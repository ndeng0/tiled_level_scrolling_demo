{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/tiled_scrolling_demo/TiledScrollingDemo.ts","src/wolfie2d/Game.ts","src/wolfie2d/files/ResourceManager.ts","src/wolfie2d/loop/GameLoopTemplate.ts","src/wolfie2d/math/MathUtilities.ts","src/wolfie2d/math/Matrix.ts","src/wolfie2d/math/Vector3.ts","src/wolfie2d/rendering/TextRenderer.ts","src/wolfie2d/rendering/WebGLGameRenderingComponent.ts","src/wolfie2d/rendering/WebGLGameRenderingSystem.ts","src/wolfie2d/rendering/WebGLGameShader.ts","src/wolfie2d/rendering/WebGLGameSpriteRenderer.ts","src/wolfie2d/rendering/WebGLGameTexture.ts","src/wolfie2d/rendering/WebGLGameTiledLayerRenderer.ts","src/wolfie2d/scene/SceneGraph.ts","src/wolfie2d/scene/SceneObject.ts","src/wolfie2d/scene/Viewport.ts","src/wolfie2d/scene/sprite/AnimatedSprite.ts","src/wolfie2d/scene/sprite/AnimatedSpriteType.ts","src/wolfie2d/scene/tiles/TileSet.ts","src/wolfie2d/scene/tiles/TiledLayer.ts","src/wolfie2d/ui/UIController.ts"],"names":[],"mappings":"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","file":"demo.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/*\r\n * TiledScrollingDemo.ts - demonstrates how tiled layers can be rendered\r\n * and scrolled using a viewport. \r\n */\r\nimport {Game} from '../wolfie2d/Game'\r\nimport {AnimatedSprite} from '../wolfie2d/scene/sprite/AnimatedSprite'\r\nimport {AnimatedSpriteType} from '../wolfie2d/scene/sprite/AnimatedSpriteType'\r\nimport {TiledLayer} from '../wolfie2d/scene/tiles/TiledLayer'\r\nimport {SceneGraph} from '../wolfie2d/scene/SceneGraph'\r\nimport {Viewport} from '../wolfie2d/scene/Viewport'\r\nimport {TextToRender, TextRenderer} from '../wolfie2d/rendering/TextRenderer'\r\n\r\n// THIS IS THE ENTRY POINT INTO OUR APPLICATION, WE MAKE\r\n// THE Game OBJECT AND INITIALIZE IT WITH THE CANVASES\r\nlet game = new Game(\"game_canvas\", \"text_canvas\");\r\n\r\n// WE THEN LOAD OUR GAME SCENE, WHICH WILL FIRST LOAD\r\n// ALL GAME RESOURCES, THEN CREATE ALL SHADERS FOR\r\n// RENDERING, AND THEN PLACE ALL GAME OBJECTS IN THE SCENE.\r\n// ONCE IT IS COMPLETED WE CAN START THE GAME\r\nconst DESERT_SCENE_PATH = \"resources/scenes/ScrollableDesert.json\";\r\ngame.getResourceManager().loadScene(DESERT_SCENE_PATH, \r\n                                    game.getSceneGraph(),\r\n                                    game.getRenderingSystem(), \r\n                                    function() {\r\n    // ADD ANY CUSTOM STUFF WE NEED HERE, LIKE TEXT RENDERING\r\n    // LET'S ADD A BUNCH OF RANDOM SPRITES\r\n    let world : TiledLayer[] = game.getSceneGraph().getTiledLayers();\r\n    let worldWidth : number = world[0].getColumns() * world[0].getTileSet().getTileWidth();\r\n    let worldHeight : number = world[0].getRows() * world[0].getTileSet().getTileHeight();\r\n    for (let i = 0; i < 50; i++) {\r\n        let type : AnimatedSpriteType = game.getResourceManager().getAnimatedSpriteType(\"DENKIMUSHI2\");\r\n        let randomSprite : AnimatedSprite = new AnimatedSprite(type, \"WALK\", \"DENKIMUSHI2\");\r\n        let randomX : number = Math.random() * worldWidth;\r\n        let randomY : number = Math.random() * worldHeight;\r\n        randomSprite.getPosition().set(randomX, randomY, 0, 1);\r\n        game.getSceneGraph().addAnimatedSprite(randomSprite);\r\n    }\r\n    for (let i = 0; i < 50; i++) {\r\n        let type : AnimatedSpriteType = game.getResourceManager().getAnimatedSpriteType(\"LADYBUG\");\r\n        let randomSprite : AnimatedSprite = new AnimatedSprite(type, \"WALKING\", \"LADYBUG\");\r\n        let randomX : number = Math.random() * worldWidth;\r\n        let randomY : number = Math.random() * worldHeight;\r\n        randomSprite.getPosition().set(randomX, randomY, 0, 1);\r\n        game.getSceneGraph().addAnimatedSprite(randomSprite);\r\n    }\r\n\r\n    // NOW ADD TEXT RENDERING. WE ARE GOING TO RENDER 3 THINGS:\r\n        // NUMBER OF SPRITES IN THE SCENE\r\n        // LOCATION IN GAME WORLD OF VIEWPORT\r\n        // NUMBER OF SPRITES IN VISIBLE SET (i.e. IN THE VIEWPORT)\r\n    let sceneGraph : SceneGraph = game.getSceneGraph();\r\n    let spritesInSceneText : TextToRender = new TextToRender(\"Sprites in Scene\", \"\", 20, 50, function() {\r\n        spritesInSceneText.text = \"Sprites in Scene: \" + sceneGraph.getNumSprites();\r\n    });\r\n    let viewportText : TextToRender = new TextToRender(\"Viewport\", \"\", 20, 70, function() {\r\n        let viewport : Viewport = sceneGraph.getViewport();\r\n        viewportText.text = \"Viewport (w, h, x, y): (\"  + viewport.getWidth() + \", \"\r\n                                                        + viewport.getHeight() + \", \"\r\n                                                        + viewport.getX() + \", \"\r\n                                                        + viewport.getY() + \")\";\r\n    });\r\n    let spritesInViewportText : TextToRender = new TextToRender(\"Sprites in Viewport\", \"\", 20, 90, function() {\r\n        spritesInViewportText.text = \"Sprites in Viewport: \" + sceneGraph.scope().length;\r\n    });\r\n    let worldDimensionsText : TextToRender = new TextToRender(\"World Dimensions\", \"\", 20, 110, function() {\r\n        worldDimensionsText.text = \"World Dimensions (w, h): (\" + worldWidth + \", \" + worldHeight + \")\";\r\n    });\r\n    let textRenderer = game.getRenderingSystem().getTextRenderer();\r\n    textRenderer.addTextToRender(spritesInSceneText);\r\n    textRenderer.addTextToRender(viewportText);\r\n    textRenderer.addTextToRender(spritesInViewportText);\r\n    textRenderer.addTextToRender(worldDimensionsText);\r\n\r\n    // AND START THE GAME LOOP\r\n    game.start();\r\n});","/*\r\n * Game is the focal point of the application, it has 4 subsystems,\r\n * the resource manager, the scene graph, the rendering system, and\r\n * the UI controller. In addition it serves as the game loop, providing\r\n * both an update and draw function that is called on a schedule.\r\n */\r\nimport {GameLoopTemplate} from './loop/GameLoopTemplate'\r\nimport {WebGLGameRenderingSystem} from './rendering/WebGLGameRenderingSystem'\r\nimport {SceneGraph} from './scene/SceneGraph'\r\nimport {AnimatedSprite} from './scene/sprite/AnimatedSprite'\r\nimport {TiledLayer} from './scene/tiles/TiledLayer'\r\nimport {ResourceManager} from './files/ResourceManager'\r\nimport {UIController} from './ui/UIController'\r\nimport {Viewport} from './scene/Viewport'\r\n\r\nexport class Game extends GameLoopTemplate {\r\n    private resourceManager : ResourceManager;\r\n    private sceneGraph : SceneGraph;\r\n    private renderingSystem : WebGLGameRenderingSystem;\r\n    private uiController : UIController;\r\n\r\n    public constructor(gameCanvasId : string, textCanvasId : string) {\r\n        super();\r\n        this.resourceManager= new ResourceManager();\r\n        this.sceneGraph= new SceneGraph();\r\n        this.renderingSystem= new WebGLGameRenderingSystem(gameCanvasId, textCanvasId);\r\n        this.uiController = new UIController(gameCanvasId, this.sceneGraph);\r\n\r\n        // MAKE SURE THE SCENE GRAPH' S VIEWPORT IS PROPERLY SETUP\r\n        let viewportWidth : number = (<HTMLCanvasElement>document.getElementById(gameCanvasId)).width;\r\n        let viewportHeight : number = (<HTMLCanvasElement>document.getElementById(gameCanvasId)).height;\r\n        let viewport : Viewport = new Viewport(viewportWidth, viewportHeight);\r\n        this.sceneGraph.setViewport(viewport);\r\n    }\r\n\r\n    public getRenderingSystem() : WebGLGameRenderingSystem {\r\n        return this.renderingSystem;\r\n    }\r\n\r\n    public getResourceManager() : ResourceManager {\r\n        return this.resourceManager;\r\n    }\r\n\r\n    public getSceneGraph() : SceneGraph {\r\n        return this.sceneGraph;\r\n    }\r\n\r\n    public begin() : void {\r\n    }\r\n\r\n    /*\r\n     * This draws the game. Note that we are not currently using the \r\n     * interpolation value, but could once physics is involved.\r\n     */\r\n    public draw(interpolationPercentage : number) : void {\r\n        // GET THE TILED LAYERS TO RENDER FROM THE SCENE GRAPH\r\n        let visibleLayers : Array<TiledLayer>;\r\n        visibleLayers = this.sceneGraph.getTiledLayers();\r\n\r\n        // GET THE VISIBLE SET FROM THE SCENE GRAPH\r\n        let visibleSprites : Array<AnimatedSprite>;\r\n        visibleSprites = <Array<AnimatedSprite>>this.sceneGraph.scope();\r\n\r\n        let viewport : Viewport = this.sceneGraph.getViewport();\r\n\r\n        // RENDER THE VISIBLE SET, WHICH SHOULD ALL BE RENDERABLE\r\n        this.renderingSystem.render(viewport, visibleLayers, visibleSprites);\r\n    }\r\n\r\n    /**\r\n     * Updates the scene.\r\n     */\r\n    public update(delta : number) : void {\r\n        this.sceneGraph.update(delta);\r\n    }\r\n    \r\n    /**\r\n     * Updates the FPS counter.\r\n     */\r\n    public end(fps : number, panic : boolean) : void {\r\n        if (panic) {\r\n            var discardedTime = Math.round(this.resetFrameDelta());\r\n            console.warn('Main loop panicked, probably because the browser tab was put in the background. Discarding ' + discardedTime + 'ms');\r\n        }\r\n    }\r\n}","/*\r\n * ResourceManager.js\r\n *\r\n * This class is responsible for managing all shared resources. This means things\r\n * that may be needed by multiple game objects. In this application this means\r\n * textures for the purpose of GPU rendering and animated sprite types.\r\n */\r\nimport { SpriteTypeData, AnimationStateData } from './SpriteTypeData'\r\nimport { MapData, TiledLayerData, TiledLayerProperty, TileSetData } from './MapData'\r\nimport { SceneData, NamedPath } from './SceneData'\r\nimport { WebGLGameRenderingSystem } from '../rendering/WebGLGameRenderingSystem'\r\nimport { WebGLGameTexture } from '../rendering/WebGLGameTexture'\r\nimport { AnimatedSpriteType } from '../scene/sprite/AnimatedSpriteType'\r\nimport { SceneGraph } from '../scene/SceneGraph'\r\nimport { TiledLayer } from '../scene/tiles/TiledLayer'\r\nimport { TileSet } from '../scene/tiles/TileSet'\r\n\r\nexport class ResourceManager {\r\n    // GAME SHADER PROGRAM SOURCE CODE WILL BE LOADED HERE. NOTE THAT\r\n    // WE HAVE ONE MAP FOR MAPPING THE SHADER NAME TO THE SOURCE CODE\r\n    // AND ANOTHER FOR MAPPING THE SHADER NAME TO THE FILE PATH\r\n    private gameShadersSource: Map<string, string> = new Map();\r\n    private gameShadersSourcePaths: Map<string, string> = new Map();\r\n    private numShadersToLoad: number;\r\n    private numShadersLoaded: number;\r\n\r\n    // SPRITE TYPES\r\n    private gameSpriteTypes: Map<string, AnimatedSpriteType> = new Map();\r\n    private gameSpriteTypePaths: Map<string, string> = new Map();\r\n    private numSpriteTypesToLoad: number;\r\n    private numSpriteTypesLoaded: number;\r\n\r\n    // TILE SETS\r\n    private gameTileSets: Map<string, TileSet> = new Map();\r\n    private gameTileSetPaths: Map<string, string> = new Map();\r\n    private numTileSetsToLoad: number;\r\n    private numTileSetsLoaded: number;\r\n\r\n    // GAME TEXTURES \r\n    private gameTextures: Map<string, WebGLGameTexture> = new Map();\r\n    private numTexturesToLoad: number;\r\n    private numTexturesLoaded: number;\r\n\r\n    public constructor() { }\r\n\r\n    // ACCESSOR METHODS\r\n\r\n    public getShaderSource(shaderName: string): string {\r\n        return this.gameShadersSource.get(shaderName);\r\n    }\r\n\r\n    public getAnimatedSpriteType(spriteTypeName: string): AnimatedSpriteType {\r\n        return this.gameSpriteTypes.get(spriteTypeName);\r\n    }\r\n\r\n    public getTileSet(tileSetName: string): TileSet {\r\n        return this.gameTileSets.get(tileSetName);\r\n    }\r\n\r\n    public getTexture(texturePath: string): WebGLGameTexture {\r\n        return this.gameTextures.get(texturePath);\r\n    }\r\n\r\n    public clear() : void {\r\n        // CLEAR THE SHADER SOURCE \r\n        this.gameShadersSource.clear();\r\n        this.gameShadersSourcePaths.clear();\r\n\r\n        // CLEAR THE SPRITE TYPES\r\n        this.gameSpriteTypes.clear();\r\n        this.gameSpriteTypePaths.clear();\r\n\r\n        // CLEAR THE TEXTURES\r\n        this.gameTextures.clear();\r\n\r\n        // WE REALLY SHOULD ADD FUNCTIONALITY TO REMOVE\r\n        // ALL THE RESOURCES FROM THE GPU ONE BY ONE\r\n        // BUT THAT'S SOMETHING FOR THE FUTURE\r\n    }\r\n\r\n    /**\r\n     * loadScene is responsible for loading all the external files needed for\r\n     * playing the game. These will be used for loading the scene, maps,\r\n     * animated sprites, textures, and shaders.\r\n     */\r\n    public loadScene(   scenePath: string,\r\n                        sceneGraph: SceneGraph,\r\n                        renderingSystem: WebGLGameRenderingSystem,\r\n                        callback: Function): void {\r\n        // CLEAR THE SCENE GRAPH TO GET RID OF ALL THE OLD STUFF\r\n        // THAT MAY HAVE BEEN LOADED FOR SOME OTHER LEVEL\r\n        sceneGraph.clear();\r\n\r\n        // CLEAR ALL THE SCENE RESOURCES \r\n        this.clear();\r\n\r\n        // WE HAVE OUR OWN CUSTOM JSON FILE FORMAT TO REPRESENT OUR SCENE\r\n        let thisResourceManager: ResourceManager = this;\r\n        this.loadTextFile(scenePath, function (jsonSceneText: string) {\r\n            let sceneData: SceneData = <SceneData>JSON.parse(jsonSceneText);\r\n            thisResourceManager.loadShadersSource(renderingSystem, sceneData.shaderSourcePaths, function () {\r\n                // NEXT LOAD THE MAP, WHICH WILL FORCE A LOADING OF\r\n                // ANY USED TILE SET TEXTURES AS WELL AS THE CREATION\r\n                // OF TILED LAYERS TO BE ADDED TO THE SCENE\r\n                thisResourceManager.loadMap(sceneData.mapPath, renderingSystem, sceneGraph, function () {\r\n                    // NOW THAT THE MAP HAS BEEN LOADED LOAD ALL THE SPRITE TYPES\r\n                    thisResourceManager.loadSpriteTypes(renderingSystem, sceneData.spriteTypePaths, function () {\r\n                        // NOW WE CAN INIT ALL SHADERS\r\n                        thisResourceManager.initAllShaders(renderingSystem, sceneGraph);\r\n\r\n                        callback();\r\n                    });\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    public initAllShaders(  renderingSystem: WebGLGameRenderingSystem,\r\n                            sceneGraph: SceneGraph): void {\r\n        // SETUP THE SPRITE RENDERER FOR USE WITH THE SPRITE SHADER THAT'S BEEN LOADED\r\n        let spriteRendererVertexShaderSource: string = this.getShaderSource(\"SPRITE_VERTEX_SHADER\");\r\n        let spriteRendererFragmentShaderSource: string = this.getShaderSource(\"SPRITE_FRAGMENT_SHADER\");\r\n        renderingSystem.getSpriteRenderer().init(renderingSystem.getWebGL(), spriteRendererVertexShaderSource, spriteRendererFragmentShaderSource, null);\r\n\r\n        // SETUP THE TILED LAYER RENDERER FOR USE WITH THE TILED SHADER THAT'S BEEN LOADED\r\n        let tiledLayerVertexShaderSource: string = this.getShaderSource(\"TILED_LAYER_VERTEX_SHADER\");\r\n        let tiledLayerFragmentShaderSource: string = this.getShaderSource(\"TILED_LAYER_FRAGMENT_SHADER\");\r\n        renderingSystem.getTiledLayerRenderer().init(renderingSystem.getWebGL(), tiledLayerVertexShaderSource, tiledLayerFragmentShaderSource, sceneGraph.getTiledLayers());\r\n    }\r\n\r\n    public loadShadersSource(   renderingSystem: WebGLGameRenderingSystem,\r\n                                namedPaths: Array<NamedPath>,\r\n                                callback: Function): void {\r\n        // START BY LOADING ALL THE SHADER SOURCE FILES THESE CAN THEN BE\r\n        // RETRIEVED LATER BY THE RENDERERS WHEN ITS TIME TO BUILD THE \r\n        // SHADER PROGRAMS\r\n        let thisResourceManager: ResourceManager = this;\r\n        this.numShadersLoaded = 0;\r\n        this.numShadersToLoad = namedPaths.length;\r\n        for (let i: number = 0; i < namedPaths.length; i++) {\r\n            let namedPath: NamedPath = namedPaths[i];\r\n            let shaderName: string = namedPath.name;\r\n            let shaderPath: string = namedPath.path;\r\n            this.loadTextFile(shaderPath, function (shaderSourceCode: string) {\r\n                thisResourceManager.gameShadersSource.set(shaderName, shaderSourceCode);\r\n                thisResourceManager.gameShadersSourcePaths.set(shaderName, shaderPath);\r\n                thisResourceManager.completeLoadingShader(function () {\r\n                    // ALL SOURCE CODE IS LOADED SO DO WHAT'S NEXT\r\n                    callback();\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    public buildPathToFileInSameDirectory(baseFileWithPath : string, targetFileName : string) : string {\r\n        let lastIndexOfSlash: number = baseFileWithPath.lastIndexOf('/');\r\n        let targetFilePath : string = \"./\";\r\n        if (lastIndexOfSlash > 0)\r\n            targetFilePath = baseFileWithPath.substring(0, lastIndexOfSlash);\r\n        targetFilePath += \"/\" + targetFileName;\r\n        return targetFilePath;\r\n    }\r\n\r\n    public loadMap( mapPath: string,\r\n                    renderingSystem: WebGLGameRenderingSystem,\r\n                    sceneGraph: SceneGraph,\r\n                    callback: Function): void {\r\n        let thisResourceManager: ResourceManager = this;\r\n        this.loadTextFile(mapPath, function (jsonMapText: string) {\r\n            let mapData: MapData = <MapData>JSON.parse(jsonMapText);\r\n\r\n            // WE ONLY USE ONE TILE SET\r\n            let tilesetFileName: string = mapData.tilesets[0].image;\r\n            let tilesetFilePath = thisResourceManager.buildPathToFileInSameDirectory(mapPath, tilesetFileName);\r\n\r\n            // USE THE PATHS TOLOAD THE TILE SET TEXTURES\r\n            thisResourceManager.loadTexture(tilesetFilePath, renderingSystem, function (tilesetTexture : WebGLGameTexture) {\r\n                // NOW THAT THE TILE SET TEXTURES HAVE BEEN LOADED,\r\n                // LOAD ALL THEIR ASSOCIATED TILESET DATA\r\n                for (let i = 0; i < mapData.tilesets.length; i++) {\r\n                    let tileSetData : TileSetData = mapData.tilesets[i];\r\n                    let rows : number = Math.ceil(tileSetData.tilecount/tileSetData.columns);\r\n                    let tileSetToAdd : TileSet = new TileSet(\r\n                                                    tileSetData.name,\r\n                                                    tileSetData.columns,\r\n                                                    rows,\r\n                                                    tileSetData.tilewidth,\r\n                                                    tileSetData.tileheight,\r\n                                                    tileSetData.spacing,\r\n                                                    tileSetData.imagewidth,\r\n                                                    tileSetData.imageheight,\r\n                                                    tileSetData.firstgid - 1,\r\n                                                    tilesetTexture);                    \r\n                    thisResourceManager.gameTileSets.set(tileSetToAdd.getName(), tileSetToAdd);\r\n                }\r\n\r\n                // AND NOW THAT THE TILE SETS HAVE BEEN LOADED\r\n                // WE CAN LOAD THE MAP'S TILED LAYERS, THOUGH NOTE\r\n                // IN THIS EXAMPLE WE ARE GOING TO KEEP IT SIMPLE\r\n                // AND ASSUME THERE IS ONLY ONE TILE SET\r\n                for (let i = 0; i < mapData.layers.length; i++) {\r\n                    let layerData : TiledLayerData = mapData.layers[i];\r\n\r\n                    // THIS LINE OF CODE IS FUNKY, WE CAN ONLY DO THIS WITH A SINGLE TILE SET,\r\n                    // SO TO MAKE THIS A REAL GAME ENGINE THIS WOULD NEED TO BE FIXED\r\n                    let layerTileSet : TileSet = thisResourceManager.gameTileSets.values().next().value;\r\n\r\n                    // WE ARE ASSUMING EACH LAYER USES JUST ONE TILE SET, WHICH MIGHT NOT\r\n                    // NECESSARILY BE TRUE. BUT FOR NOW, LET'S JUST MAKE THE LAYERS ALL\r\n                    // USING THE SAME TILE SET, ADD THE TILES, AND THEN ADD THEM TO THE SCENE GRAPH\r\n                    let tiledLayer : TiledLayer = new TiledLayer(layerData.width, layerData.height,layerTileSet);\r\n                    for (let j = 0; j < layerData.data.length; j++) {\r\n                        let tileIndex : number = layerData.data[j] - 1;\r\n                        tiledLayer.addTile(tileIndex);\r\n                    }\r\n                    sceneGraph.addLayer(tiledLayer);\r\n                }\r\n\r\n                callback();\r\n            });\r\n        });\r\n    }\r\n\r\n    /*\r\n     * Loads the texturePath file argument and once\r\n     * that is done it calls the callback function.\r\n     */\r\n    public loadTexture(texturePath: string,\r\n        renderingSystem: WebGLGameRenderingSystem,\r\n        callback: Function): void {\r\n        let thisResourceManager = this;\r\n        thisResourceManager.loadImage(texturePath, function (path: string, image: HTMLImageElement) {\r\n            let textureToLoad: WebGLGameTexture = new WebGLGameTexture();\r\n            let id: number = thisResourceManager.gameTextures.size;\r\n            thisResourceManager.gameTextures.set(path, textureToLoad);\r\n            renderingSystem.initWebGLTexture(textureToLoad, id, image, function () {\r\n                callback(textureToLoad);\r\n            });\r\n        });\r\n    }\r\n\r\n    /*\r\n     * Loads all the sprite types listed in the spriteTypePaths argument and once\r\n     * that is done it calls the callback function.\r\n     */\r\n    public loadSpriteTypes( renderingSystem : WebGLGameRenderingSystem,\r\n                            spriteTypePaths: Array<NamedPath>,\r\n                            callback: Function): void {\r\n        // THEN LOAD THE TEXTURES WE'LL BE USING\r\n        this.numSpriteTypesToLoad = spriteTypePaths.length;\r\n        this.numSpriteTypesLoaded = 0;\r\n        let thisResourceManager = this;\r\n        for (let namedPath of spriteTypePaths) {\r\n            let name: string = namedPath.name;\r\n            let path: string = namedPath.path;\r\n            this.loadSpriteType(renderingSystem, name, path, function () {\r\n                thisResourceManager.completeLoadingSpriteType(callback);\r\n            });\r\n        }\r\n    }\r\n\r\n    // PRIVATE HELPER METHODS\r\n\r\n    // LOADS A NEW JSON FILE AND UPON COMPLETION CALLS THE callback FUNCTION\r\n    private loadTextFile(textFilePath: string, callback: Function): void {\r\n        let xobj: XMLHttpRequest = new XMLHttpRequest();\r\n        xobj.overrideMimeType(\"application/json\");\r\n        xobj.open('GET', textFilePath, true);\r\n        xobj.onreadystatechange = function () {\r\n            if ((xobj.readyState == 4) && (xobj.status == 200)) {\r\n                callback(xobj.responseText);\r\n            }\r\n        };\r\n        xobj.send(null);\r\n    }\r\n\r\n    // CHECKS TO SEE IF ALL SHADER LOADING IS COMPLETE, IF YES, callback IS INVOKED\r\n    private completeLoadingShader(callback: Function): void {\r\n        this.numShadersLoaded++;\r\n        if (this.numShadersLoaded === this.numShadersToLoad) {\r\n            callback();\r\n        }\r\n    }\r\n\r\n    // CHECKS TO SEE IF ALL SPRITE TYPE LOADING IS COMPLETE, IF YES, callback IS INVOKED\r\n    private completeLoadingSpriteType(callback: Function): void {\r\n        this.numSpriteTypesLoaded++;\r\n        if (this.numSpriteTypesLoaded === this.numSpriteTypesToLoad) {\r\n            callback();\r\n        }\r\n    }\r\n\r\n    // CHECKS TO SEE IF ALL TEXTURE LOADING IS COMPLETE, IF YES, callback IS INVOKED\r\n    private completeLoadingTexture(callback: Function): void {\r\n        this.numTexturesLoaded++;\r\n        if (this.numTexturesLoaded === this.numTexturesToLoad) {\r\n            callback();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Loads an Image into RAM and once that process is complete it\r\n     * calls the callback method argument, presumably to then load\r\n     * it into GPU memory.\r\n     */\r\n    private loadImage(path: string, callback: Function): void {\r\n        // MAKE THE IMAGE\r\n        var image = new Image();\r\n\r\n        // ONCE THE IMAGE LOADING IS COMPLETED, THE CALLBACK WILL GET CALLED\r\n        image.onload = function () {\r\n            callback(path, image);\r\n        }\r\n\r\n        // START IMAGE LOADING\r\n        image.src = path;\r\n    }\r\n\r\n    /*\r\n     * This function loads a single sprite type resource from a JSON file and upon\r\n     * completion calls the callback function.\r\n     */\r\n    private loadSpriteType(renderingSystem : WebGLGameRenderingSystem, spriteTypeName: string, jsonFilePath: string, callback: Function): void {\r\n        let thisResourceManager: ResourceManager = this;\r\n        this.loadTextFile(jsonFilePath, function (jsonText: string) {\r\n            thisResourceManager.loadSpriteTypeData(renderingSystem, jsonFilePath, jsonText, function(spriteType : AnimatedSpriteType) {\r\n                thisResourceManager.gameSpriteTypes.set(spriteTypeName, spriteType);\r\n                thisResourceManager.gameSpriteTypePaths.set(spriteTypeName, jsonFilePath);\r\n                callback();\r\n            });\r\n        });\r\n    }\r\n\r\n    /*\r\n     * This helper function loads all the json text into an AnimatedSpriteType\r\n     * object and returns it.\r\n     */\r\n    private loadSpriteTypeData = (  renderingSystem : WebGLGameRenderingSystem, \r\n                                    spriteFilePath : string, \r\n                                    jsonText: string,\r\n                                    callback : Function): void => {\r\n        let jsonData: SpriteTypeData = <SpriteTypeData>JSON.parse(jsonText);\r\n        let texturePath : string = this.buildPathToFileInSameDirectory(spriteFilePath, jsonData.spriteSheetImage);\r\n        let thisResourceManager : ResourceManager = this;\r\n        this.loadTexture(texturePath, renderingSystem, function(spritesheetTexture : WebGLGameTexture) {\r\n            let spriteWidth: number = jsonData.spriteWidth;\r\n            let spriteHeight: number = jsonData.spriteHeight;\r\n            let animatedSpriteType = new AnimatedSpriteType(spritesheetTexture, spriteWidth, spriteHeight);\r\n            for (let i = 0; i < jsonData.animations.length; i++) {\r\n                let animation = <AnimationStateData>jsonData.animations[i];\r\n                animatedSpriteType.addAnimation(animation.name);\r\n                for (var j = 0; j < animation.frames.length; j++) {\r\n                    var frame = animation.frames[j];\r\n                    animatedSpriteType.addAnimationFrame(animation.name, frame.index, frame.duration);\r\n                }\r\n            }\r\n            callback(animatedSpriteType);\r\n        });\r\n    }\r\n}","export abstract class GameLoopTemplate {\r\n    // ALL INSTANCE VARIABLES WILL BE INITIALIZED VIA THE CONSTRUCTOR\r\n    private fps: number;\r\n    private simulationTimestep: number;\r\n    private frameDelta: number;\r\n    private lastFrameTimeMs: number;\r\n    private fpsAlpha: number;\r\n    private fpsUpdateInterval: number;\r\n    private lastFpsUpdate: number;\r\n    private framesSinceLastFpsUpdate: number;\r\n    private numUpdateSteps: number;\r\n    private minFrameDelay: number;\r\n    private running: boolean;\r\n    private started: boolean;\r\n    private panic: boolean;\r\n    private raf: number;\r\n\r\n    constructor() {\r\n        // An exponential moving average of the frames per second.\r\n        this.fps = 60;\r\n\r\n        // The amount of time (in milliseconds) to simulate each time update() runs.\r\n        // See `MainLoop.setSimulationTimestep()` for details.\r\n        this.simulationTimestep = 1000 / this.fps;\r\n\r\n        // The cumulative amount of in-app time that hasn't been simulated yet.\r\n        // See the comments inside animate() for details.\r\n        this.frameDelta = 0;\r\n\r\n        // The timestamp in milliseconds of the last time the main loop was run.\r\n        // Used to compute the time elapsed between frames.\r\n        this.lastFrameTimeMs = 0;\r\n\r\n        // A factor that affects how heavily to weight more recent seconds'\r\n        // performance when calculating the average frames per second. Valid values\r\n        // range from zero to one inclusive. Higher values result in weighting more\r\n        // recent seconds more heavily.\r\n        this.fpsAlpha = 0.9;\r\n\r\n        // The minimum duration between updates to the frames-per-second estimate.\r\n        // Higher values increase accuracy, but result in slower updates.\r\n        this.fpsUpdateInterval = 1000;\r\n\r\n        // The timestamp (in milliseconds) of the last time the `fps` moving\r\n        // average was updated.\r\n        this.lastFpsUpdate = 0;\r\n\r\n        // The number of frames delivered since the last time the `fps` moving\r\n        // average was updated (i.e. since `lastFpsUpdate`).\r\n        this.framesSinceLastFpsUpdate = 0;\r\n\r\n        // The number of times update() is called in a given frame. This is only\r\n        // relevant inside of animate(), but a reference is held externally so that\r\n        // this variable is not marked for garbage collection every time the main\r\n        // loop runs.\r\n        this.numUpdateSteps = 0;\r\n\r\n        // The minimum amount of time in milliseconds that must pass since the last\r\n        // frame was executed before another frame can be executed. The\r\n        // multiplicative inverse caps the FPS (the default of zero means there is\r\n        // no cap).\r\n        this.minFrameDelay = 0;\r\n\r\n        // Whether the main loop is running.\r\n        this.running = false;\r\n\r\n        // `true` if `MainLoop.start()` has been called and the most recent time it\r\n        // was called has not been followed by a call to `MainLoop.stop()`. This is\r\n        // different than `running` because there is a delay of a few milliseconds\r\n        // after `MainLoop.start()` is called before the application is considered\r\n        // \"running.\" This delay is due to waiting for the next frame.\r\n        this.started = false;\r\n\r\n        // Whether the simulation has fallen too far behind real time.\r\n        // Specifically, `panic` will be set to `true` if too many updates occur in\r\n        // one frame. This is only relevant inside of animate(), but a reference is\r\n        // held externally so that this variable is not marked for garbage\r\n        // collection every time the main loop runs.\r\n        this.panic = false;\r\n    }\r\n\r\n    /**\r\n     * Gets how many milliseconds should be simulated by every run of update().\r\n     *\r\n     * See `MainLoop.setSimulationTimestep()` for details on this value.\r\n     *\r\n     * @return {Number}\r\n     *   The number of milliseconds that should be simulated by every run of\r\n     *   {@link #setUpdate update}().\r\n     */\r\n    getSimulationTimestep(): number {\r\n        return this.simulationTimestep;\r\n    }\r\n\r\n    /**\r\n     * Sets how many milliseconds should be simulated by every run of update().\r\n     *\r\n     * The perceived frames per second (FPS) is effectively capped at the\r\n     * multiplicative inverse of the simulation timestep. That is, if the\r\n     * timestep is 1000 / 60 (which is the default), then the maximum perceived\r\n     * FPS is effectively 60. Decreasing the timestep increases the maximum\r\n     * perceived FPS at the cost of running {@link #setUpdate update}() more\r\n     * times per frame at lower frame rates. Since running update() more times\r\n     * takes more time to process, this can actually slow down the frame rate.\r\n     * Additionally, if the amount of time it takes to run update() exceeds or\r\n     * very nearly exceeds the timestep, the application will freeze and crash\r\n     * in a spiral of death (unless it is rescued; see `MainLoop.setEnd()` for\r\n     * an explanation of what can be done if a spiral of death is occurring).\r\n     *\r\n     * The exception to this is that interpolating between updates for each\r\n     * render can increase the perceived frame rate and reduce visual\r\n     * stuttering. See `MainLoop.setDraw()` for an explanation of how to do\r\n     * this.\r\n     *\r\n     * If you are considering decreasing the simulation timestep in order to\r\n     * raise the maximum perceived FPS, keep in mind that most monitors can't\r\n     * display more than 60 FPS. Whether humans can tell the difference among\r\n     * high frame rates depends on the application, but for reference, film is\r\n     * usually displayed at 24 FPS, other videos at 30 FPS, most games are\r\n     * acceptable above 30 FPS, and virtual reality might require 75 FPS to\r\n     * feel natural. Some gaming monitors go up to 144 FPS. Setting the\r\n     * timestep below 1000 / 144 is discouraged and below 1000 / 240 is\r\n     * strongly discouraged. The default of 1000 / 60 is good in most cases.\r\n     *\r\n     * The simulation timestep should typically only be changed at\r\n     * deterministic times (e.g. before the main loop starts for the first\r\n     * time, and not in response to user input or slow frame rates) to avoid\r\n     * introducing non-deterministic behavior. The update timestep should be\r\n     * the same for all players/users in multiplayer/multi-user applications.\r\n     *\r\n     * See also `MainLoop.getSimulationTimestep()`.\r\n     *\r\n     * @param {Number} timestep\r\n     *   The number of milliseconds that should be simulated by every run of\r\n     *   {@link #setUpdate update}().\r\n     */\r\n    setSimulationTimestep(timestep: number): void {\r\n        this.simulationTimestep = timestep;\r\n    }\r\n\r\n    /**\r\n     * Returns the exponential moving average of the frames per second.\r\n     *\r\n     * @return {Number}\r\n     *   The exponential moving average of the frames per second.\r\n     */\r\n    getFPS(): number {\r\n        return this.fps;\r\n    }\r\n\r\n    /**\r\n     * Gets the maximum frame rate.\r\n     *\r\n     * Other factors also limit the FPS; see `MainLoop.setSimulationTimestep`\r\n     * for details.\r\n     *\r\n     * See also `MainLoop.setMaxAllowedFPS()`.\r\n     *\r\n     * @return {Number}\r\n     *   The maximum number of frames per second allowed.\r\n     */\r\n    getMaxAllowedFPS(): number {\r\n        return 1000 / this.minFrameDelay;\r\n    }\r\n\r\n    /**\r\n     * Sets a maximum frame rate.\r\n     *\r\n     * See also `MainLoop.getMaxAllowedFPS()`.\r\n     *\r\n     * @param {Number} [fps=Infinity]\r\n     *   The maximum number of frames per second to execute. If Infinity or not\r\n     *   passed, there will be no FPS cap (although other factors do limit the\r\n     *   FPS; see `MainLoop.setSimulationTimestep` for details). If zero, this\r\n     *   will stop the loop, and when the loop is next started, it will return\r\n     *   to the previous maximum frame rate. Passing negative values will stall\r\n     *   the loop until this function is called again with a positive value.\r\n     *\r\n     * @chainable\r\n     */\r\n    setMaxAllowedFPS(fps: number): void {\r\n        if (typeof fps === 'undefined') {\r\n            fps = Infinity;\r\n        }\r\n        if (fps === 0) {\r\n            this.stop();\r\n        }\r\n        else {\r\n            // Dividing by Infinity returns zero.\r\n            this.minFrameDelay = 1000 / fps;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reset the amount of time that has not yet been simulated to zero.\r\n     *\r\n     * This introduces non-deterministic behavior if called after the\r\n     * application has started running (unless it is being reset, in which case\r\n     * it doesn't matter). However, this can be useful in cases where the\r\n     * amount of time that has not yet been simulated has grown very large\r\n     * (for example, when the application's tab gets put in the background and\r\n     * the browser throttles the timers as a result). In applications with\r\n     * lockstep the player would get dropped, but in other networked\r\n     * applications it may be necessary to snap or ease the player/user to the\r\n     * authoritative state and discard pending updates in the process. In\r\n     * non-networked applications it may also be acceptable to simply resume\r\n     * the application where it last left off and ignore the accumulated\r\n     * unsimulated time.\r\n     *\r\n     * @return {Number}\r\n     *   The cumulative amount of elapsed time in milliseconds that has not yet\r\n     *   been simulated, but is being discarded as a result of calling this\r\n     *   function.\r\n     */\r\n    resetFrameDelta() : number {\r\n        var oldFrameDelta = this.frameDelta;\r\n        this.frameDelta = 0;\r\n        return oldFrameDelta;\r\n    }\r\n\r\n    /**\r\n     * Starts the main loop.\r\n     *\r\n     * Note that the application is not considered \"running\" immediately after\r\n     * this function returns; rather, it is considered \"running\" after the\r\n     * application draws its first frame. The distinction is that event\r\n     * handlers should remain paused until the application is running, even\r\n     * after `MainLoop.start()` is called. Check `MainLoop.isRunning()` for the\r\n     * current status. To act after the application starts, register a callback\r\n     * with requestAnimationFrame() after calling this function and execute the\r\n     * action in that callback. It is safe to call `MainLoop.start()` multiple\r\n     * times even before the application starts running and without calling\r\n     * `MainLoop.stop()` in between, although there is no reason to do this;\r\n     * the main loop will only start if it is not already started.\r\n     *\r\n     * See also `MainLoop.stop()`.\r\n     */\r\n    start(): void {\r\n        if (!this.started) {\r\n            // Since the application doesn't start running immediately, track\r\n            // whether this function was called and use that to keep it from\r\n            // starting the main loop multiple times.\r\n            this.started = true;\r\n\r\n            // In the main loop, draw() is called after update(), so if we\r\n            // entered the main loop immediately, we would never render the\r\n            // initial state before any updates occur. Instead, we run one\r\n            // frame where all we do is draw, and then start the main loop with\r\n            // the next frame.\r\n            this.raf = requestAnimationFrame(this.startLoop.bind(this));\r\n        }\r\n    }\r\n\r\n    startLoop(timestamp : number): void {\r\n        // Render the initial state before any updates occur.\r\n        this.draw(1);\r\n\r\n        // The application isn't considered \"running\" until the\r\n        // application starts drawing.\r\n        this.running = true;\r\n\r\n        // Reset variables that are used for tracking time so that we\r\n        // don't simulate time passed while the application was paused.\r\n        this.lastFrameTimeMs = timestamp;\r\n        this.lastFpsUpdate = timestamp;\r\n        this.framesSinceLastFpsUpdate = 0;\r\n\r\n        // Start the main loop.\r\n        this.raf = window.requestAnimationFrame(this.animate.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Returns whether the main loop is currently running.\r\n     *\r\n     * See also `MainLoop.start()` and `MainLoop.stop()`.\r\n     *\r\n     * @return {Boolean}\r\n     *   Whether the main loop is currently running.\r\n     */\r\n    isRunning(): boolean {\r\n        return this.running;\r\n    }\r\n\r\n    /**\r\n     * Stops the main loop.\r\n     *\r\n     * Event handling and other background tasks should also be paused when the\r\n     * main loop is paused.\r\n     *\r\n     * Note that pausing in multiplayer/multi-user applications will cause the\r\n     * player's/user's client to become out of sync. In this case the\r\n     * simulation should exit, or the player/user needs to be snapped to their\r\n     * updated position when the main loop is started again.\r\n     *\r\n     * See also `MainLoop.start()` and `MainLoop.isRunning()`.\r\n     */\r\n    stop(): void {\r\n        this.running = false;\r\n        this.started = false;\r\n        window.cancelAnimationFrame(this.raf);\r\n    }\r\n\r\n    /**\r\n     * The main loop that runs updates and rendering.\r\n     * \r\n     * @param {DOMHighResTimeStamp} timestamp\r\n     * The current timestamp. In practice this is supplied by\r\n     * requestAnimationFrame at the time that it starts to fire callbacks. This\r\n     * should only be used for comparison to other timestamps because the epoch\r\n     * (i.e. the \"zero\" time) depends on the engine running this code. In engines\r\n     * that support `DOMHighResTimeStamp` (all modern browsers except iOS Safari\r\n     * 8) the epoch is the time the page started loading, specifically\r\n     * `performance.timing.navigationStart`. Everywhere else, including node.js,\r\n     * the epoch is the Unix epoch (1970-01-01T00:00:00Z).\r\n     * \r\n     * @ignore\r\n     */\r\n    animate(timestamp : number): void {\r\n        // Run the loop again the next time the browser is ready to render.\r\n        // We set rafHandle immediately so that the next frame can be canceled\r\n        // during the current frame.\r\n        this.raf = window.requestAnimationFrame(this.animate.bind(this));\r\n\r\n        // Throttle the frame rate (if minFrameDelay is set to a non-zero value by\r\n        // `MainLoop.setMaxAllowedFPS()`).\r\n        if (timestamp < this.lastFrameTimeMs + this.minFrameDelay) {\r\n            return;\r\n        }\r\n\r\n        // frameDelta is the cumulative amount of in-app time that hasn't been\r\n        // simulated yet. Add the time since the last frame. We need to track total\r\n        // not-yet-simulated time (as opposed to just the time elapsed since the\r\n        // last frame) because not all actually elapsed time is guaranteed to be\r\n        // simulated each frame. See the comments below for details.\r\n        this.frameDelta += timestamp - this.lastFrameTimeMs;\r\n        this.lastFrameTimeMs = timestamp;\r\n\r\n        // Run any updates that are not dependent on time in the simulation. See\r\n        // `MainLoop.setBegin()` for additional details on how to use this.\r\n        this.begin(timestamp, this.frameDelta);\r\n\r\n        // Update the estimate of the frame rate, `fps`. Approximately every\r\n        // second, the number of frames that occurred in that second are included\r\n        // in an exponential moving average of all frames per second. This means\r\n        // that more recent seconds affect the estimated frame rate more than older\r\n        // seconds.\r\n        if (timestamp > this.lastFpsUpdate + this.fpsUpdateInterval) {\r\n            // Compute the new exponential moving average.\r\n            this.fps =\r\n                // Divide the number of frames since the last FPS update by the\r\n                // amount of time that has passed to get the mean frames per second\r\n                // over that period. This is necessary because slightly more than a\r\n                // second has likely passed since the last update.\r\n                this.fpsAlpha * this.framesSinceLastFpsUpdate * 1000 / (timestamp - this.lastFpsUpdate) +\r\n                (1 - this.fpsAlpha) * this.fps;\r\n\r\n            // Reset the frame counter and last-updated timestamp since their\r\n            // latest values have now been incorporated into the FPS estimate.\r\n            this.lastFpsUpdate = timestamp;\r\n            this.framesSinceLastFpsUpdate = 0;\r\n        }\r\n        // Count the current frame in the next frames-per-second update. This\r\n        // happens after the previous section because the previous section\r\n        // calculates the frames that occur up until `timestamp`, and `timestamp`\r\n        // refers to a time just before the current frame was delivered.\r\n        this.framesSinceLastFpsUpdate++;\r\n\r\n        /*\r\n         * A naive way to move an object along its X-axis might be to write a main\r\n         * loop containing the statement `obj.x += 10;` which would move the object\r\n         * 10 units per frame. This approach suffers from the issue that it is\r\n         * dependent on the frame rate. In other words, if your application is\r\n         * running slowly (that is, fewer frames per second), your object will also\r\n         * appear to move slowly, whereas if your application is running quickly\r\n         * (that is, more frames per second), your object will appear to move\r\n         * quickly. This is undesirable, especially in multiplayer/multi-user\r\n         * applications.\r\n         *\r\n         * One solution is to multiply the speed by the amount of time that has\r\n         * passed between rendering frames. For example, if you want your object to\r\n         * move 600 units per second, you might write `obj.x += 600 * delta`, where\r\n         * `delta` is the time passed since the last frame. (For convenience, let's\r\n         * move this statement to an update() function that takes `delta` as a\r\n         * parameter.) This way, your object will move a constant distance over\r\n         * time. However, at low frame rates and high speeds, your object will move\r\n         * large distances every frame, which can cause it to do strange things\r\n         * such as move through walls. Additionally, we would like our program to\r\n         * be deterministic. That is, every time we run the application with the\r\n         * same input, we would like exactly the same output. If the time between\r\n         * frames (the `delta`) varies, our output will diverge the longer the\r\n         * program runs due to accumulated rounding errors, even at normal frame\r\n         * rates.\r\n         *\r\n         * A better solution is to separate the amount of time simulated in each\r\n         * update() from the amount of time between frames. Our update() function\r\n         * doesn't need to change; we just need to change the delta we pass to it\r\n         * so that each update() simulates a fixed amount of time (that is, `delta`\r\n         * should have the same value each time update() is called). The update()\r\n         * function can be run multiple times per frame if needed to simulate the\r\n         * total amount of time passed since the last frame. (If the time that has\r\n         * passed since the last frame is less than the fixed simulation time, we\r\n         * just won't run an update() until the the next frame. If there is\r\n         * unsimulated time left over that is less than our timestep, we'll just\r\n         * leave it to be simulated during the next frame.) This approach avoids\r\n         * inconsistent rounding errors and ensures that there are no giant leaps\r\n         * through walls between frames.\r\n         *\r\n         * That is what is done below. It introduces a new problem, but it is a\r\n         * manageable one: if the amount of time spent simulating is consistently\r\n         * longer than the amount of time between frames, the application could\r\n         * freeze and crash in a spiral of death. This won't happen as long as the\r\n         * fixed simulation time is set to a value that is high enough that\r\n         * update() calls usually take less time than the amount of time they're\r\n         * simulating. If it does start to happen anyway, see `MainLoop.setEnd()`\r\n         * for a discussion of ways to stop it.\r\n         *\r\n         * Additionally, see `MainLoop.setUpdate()` for a discussion of performance\r\n         * considerations.\r\n         *\r\n         * Further reading for those interested:\r\n         *\r\n         * - http://gameprogrammingpatterns.com/game-loop.html\r\n         * - http://gafferongames.com/game-physics/fix-your-timestep/\r\n         * - https://gamealchemist.wordpress.com/2013/03/16/thoughts-on-the-javascript-game-loop/\r\n         * - https://developer.mozilla.org/en-US/docs/Games/Anatomy\r\n         */\r\n        this.numUpdateSteps = 0;\r\n        while (this.frameDelta >= this.simulationTimestep) {\r\n            this.update(this.simulationTimestep);\r\n            this.frameDelta -= this.simulationTimestep;\r\n\r\n            /*\r\n             * Sanity check: bail if we run the loop too many times.\r\n             *\r\n             * One way this could happen is if update() takes longer to run than\r\n             * the time it simulates, thereby causing a spiral of death. For ways\r\n             * to avoid this, see `MainLoop.setEnd()`. Another way this could\r\n             * happen is if the browser throttles serving frames, which typically\r\n             * occurs when the tab is in the background or the device battery is\r\n             * low. An event outside of the main loop such as audio processing or\r\n             * synchronous resource reads could also cause the application to hang\r\n             * temporarily and accumulate not-yet-simulated time as a result.\r\n             *\r\n             * 240 is chosen because, for any sane value of simulationTimestep, 240\r\n             * updates will simulate at least one second, and it will simulate four\r\n             * seconds with the default value of simulationTimestep. (Safari\r\n             * notifies users that the script is taking too long to run if it takes\r\n             * more than five seconds.)\r\n             *\r\n             * If there are more updates to run in a frame than this, the\r\n             * application will appear to slow down to the user until it catches\r\n             * back up. In networked applications this will usually cause the user\r\n             * to get out of sync with their peers, but if the updates are taking\r\n             * this long already, they're probably already out of sync.\r\n             */\r\n            if (++this.numUpdateSteps >= 240) {\r\n                this.panic = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        /*\r\n         * Render the screen. We do this regardless of whether update() has run\r\n         * during this frame because it is possible to interpolate between updates\r\n         * to make the frame rate appear faster than updates are actually\r\n         * happening. See `MainLoop.setDraw()` for an explanation of how to do\r\n         * that.\r\n         *\r\n         * We draw after updating because we want the screen to reflect a state of\r\n         * the application that is as up-to-date as possible. (`MainLoop.start()`\r\n         * draws the very first frame in the application's initial state, before\r\n         * any updates have occurred.) Some sources speculate that rendering\r\n         * earlier in the requestAnimationFrame callback can get the screen painted\r\n         * faster; this is mostly not true, and even when it is, it's usually just\r\n         * a trade-off between rendering the current frame sooner and rendering the\r\n         * next frame later.\r\n         *\r\n         * See `MainLoop.setDraw()` for details about draw() itself.\r\n         */\r\n        this.draw(this.frameDelta / this.simulationTimestep);\r\n\r\n        // Run any updates that are not dependent on time in the simulation. See\r\n        // `MainLoop.setEnd()` for additional details on how to use this.\r\n        this.end(this.fps, this.panic);\r\n\r\n        this.panic = false;\r\n    }\r\n\r\n    // SUBCLASSES MUST OVERRIDE FOUR REQUIRED METHODS:\r\n        // begin\r\n        // update\r\n        // draw\r\n        // end\r\n\r\n    /**\r\n     * A function that runs at the beginning of the main loop.\r\n     *\r\n     * The begin() function is typically used to process input before the\r\n     * updates run. Processing input here (in chunks) can reduce the running\r\n     * time of event handlers, which is useful because long-running event\r\n     * handlers can sometimes delay frames.\r\n     *\r\n     * Unlike {@link #setUpdate update}(), which can run zero or more times per\r\n     * frame, begin() always runs exactly once per frame. This makes it useful\r\n     * for any updates that are not dependent on time in the simulation.\r\n     * Examples include adjusting HUD calculations or performing long-running\r\n     * updates incrementally. Compared to {@link #setEnd end}(), generally\r\n     * actions should occur in begin() if they affect anything that\r\n     * {@link #setUpdate update}() or {@link #setDraw draw}() use.\r\n     *\r\n     * @param {Function} begin\r\n     *   The begin() function.\r\n     * @param {Number} [begin.timestamp]\r\n     *   The current timestamp (when the frame started), in milliseconds. This\r\n     *   should only be used for comparison to other timestamps because the\r\n     *   epoch (i.e. the \"zero\" time) depends on the engine running this code.\r\n     *   In engines that support `DOMHighResTimeStamp` (all modern browsers\r\n     *   except iOS Safari 8) the epoch is the time the page started loading,\r\n     *   specifically `performance.timing.navigationStart`. Everywhere else,\r\n     *   including node.js, the epoch is the Unix epoch (1970-01-01T00:00:00Z).\r\n     * @param {Number} [begin.delta]\r\n     *   The total elapsed time that has not yet been simulated, in\r\n     *   milliseconds.\r\n     */\r\n    abstract begin(timestamp : number, delta : number) : void;\r\n\r\n    /**\r\n     * A function that runs updates (i.e. AI and physics).\r\n     *\r\n     * The update() function should simulate anything that is affected by time.\r\n     * It can be called zero or more times per frame depending on the frame\r\n     * rate.\r\n     *\r\n     * As with everything in the main loop, the running time of update()\r\n     * directly affects the frame rate. If update() takes long enough that the\r\n     * frame rate drops below the target (\"budgeted\") frame rate, parts of the\r\n     * update() function that do not need to execute between every frame can be\r\n     * moved into Web Workers. (Various sources on the internet sometimes\r\n     * suggest other scheduling patterns using setTimeout() or setInterval().\r\n     * These approaches sometimes offer modest improvements with minimal\r\n     * changes to existing code, but because JavaScript is single-threaded, the\r\n     * updates will still block rendering and drag down the frame rate. Web\r\n     * Workers execute in separate threads, so they free up more time in the\r\n     * main loop.)\r\n     *\r\n     * This script can be imported into a Web Worker using importScripts() and\r\n     * used to run a second main loop in the worker. Some considerations:\r\n     *\r\n     * - Profile your code before doing the work to move it into Web Workers.\r\n     *   It could be the rendering that is the bottleneck, in which case the\r\n     *   solution is to decrease the visual complexity of the scene.\r\n     * - It doesn't make sense to move the *entire* contents of update() into\r\n     *   workers unless {@link #setDraw draw}() can interpolate between frames.\r\n     *   The lowest-hanging fruit is background updates (like calculating\r\n     *   citizens' happiness in a city-building game), physics that doesn't\r\n     *   affect the scene (like flags waving in the wind), and anything that is\r\n     *   occluded or happening far off screen.\r\n     * - If draw() needs to interpolate physics based on activity that occurs\r\n     *   in a worker, the worker needs to pass the interpolation value back to\r\n     *   the main thread so that is is available to draw().\r\n     * - Web Workers can't access the state of the main thread, so they can't\r\n     *   directly modify objects in your scene. Moving data to and from Web\r\n     *   Workers is a pain. The fastest way to do it is with Transferable\r\n     *   Objects: basically, you can pass an ArrayBuffer to a worker,\r\n     *   destroying the original reference in the process.\r\n     *\r\n     * You can read more about Web Workers and Transferable Objects at\r\n     * [HTML5 Rocks](http://www.html5rocks.com/en/tutorials/workers/basics/).\r\n     *\r\n     * @param {Function} update\r\n     *   The update() function.\r\n     * @param {Number} [update.delta]\r\n     *   The amount of time in milliseconds to simulate in the update. In most\r\n     *   cases this timestep never changes in order to ensure deterministic\r\n     *   updates. The timestep is the same as that returned by\r\n     *   `MainLoop.getSimulationTimestep()`.\r\n     */\r\n    abstract update(timeStep : number) : void;\r\n\r\n    /**\r\n     * A function that draws things on the screen.\r\n     *\r\n     * The draw() function gets passed the percent of time that the next run of\r\n     * {@link #setUpdate update}() will simulate that has actually elapsed, as\r\n     * a decimal. In other words, draw() gets passed how far between update()\r\n     * calls it is. This is useful because the time simulated by update() and\r\n     * the time between draw() calls is usually different, so the parameter to\r\n     * draw() can be used to interpolate motion between frames to make\r\n     * rendering appear smoother. To illustrate, if update() advances the\r\n     * simulation at each vertical bar in the first row below, and draw() calls\r\n     * happen at each vertical bar in the second row below, then some frames\r\n     * will have time left over that is not yet simulated by update() when\r\n     * rendering occurs in draw():\r\n     *\r\n     *     update() timesteps:  |  |  |  |  |  |  |  |  |\r\n     *     draw() calls:        |   |   |   |   |   |   |\r\n     *\r\n     * To interpolate motion for rendering purposes, objects' state after the\r\n     * last update() must be retained and used to calculate an intermediate\r\n     * state. Note that this means renders will be up to one update() behind.\r\n     * This is still better than extrapolating (projecting objects' state after\r\n     * a future update()) which can produce bizarre results. Storing multiple\r\n     * states can be difficult to set up, and keep in mind that running this\r\n     * process takes time that could push the frame rate down, so it's often\r\n     * not worthwhile unless stuttering is visible.\r\n     *\r\n     * @param {Function} draw\r\n     *   The draw() function.\r\n     * @param {Number} [draw.interpolationPercentage]\r\n     *   The cumulative amount of time that hasn't been simulated yet, divided\r\n     *   by the amount of time that will be simulated the next time update()\r\n     *   runs. Useful for interpolating frames.\r\n     */\r\n    public abstract draw(interpolationPercentage : number) : void;\r\n\r\n    /**\r\n     * A function that runs at the end of the main loop.\r\n     *\r\n     * Unlike {@link #setUpdate update}(), which can run zero or more times per\r\n     * frame, end() always runs exactly once per frame. This makes it useful\r\n     * for any updates that are not dependent on time in the simulation.\r\n     * Examples include cleaning up any temporary state set up by\r\n     * {@link #setBegin begin}(), lowering the visual quality if the frame rate\r\n     * is too low, or performing long-running updates incrementally. Compared\r\n     * to begin(), generally actions should occur in end() if they use anything\r\n     * that update() or {@link #setDraw draw}() affect.\r\n     *\r\n     * @param {Function} end\r\n     *   The end() function.\r\n     * @param {Number} [end.fps]\r\n     *   The exponential moving average of the frames per second. This is the\r\n     *   same value returned by `MainLoop.getFPS()`. It can be used to take\r\n     *   action when the FPS is too low (or to restore to normalcy if the FPS\r\n     *   moves back up). Examples of actions to take if the FPS is too low\r\n     *   include exiting the application, lowering the visual quality, stopping\r\n     *   or reducing activities outside of the main loop like event handlers or\r\n     *   audio playback, performing non-critical updates less frequently, or\r\n     *   increasing the simulation timestep (by calling\r\n     *   `MainLoop.setSimulationTimestep()`). Note that this last option\r\n     *   results in more time being simulated per update() call, which causes\r\n     *   the application to behave non-deterministically.\r\n     * @param {Boolean} [end.panic=false]\r\n     *   Indicates whether the simulation has fallen too far behind real time.\r\n     *   Specifically, `panic` will be `true` if too many updates occurred in\r\n     *   one frame. In networked lockstep applications, the application should\r\n     *   wait for some amount of time to see if the user can catch up before\r\n     *   dropping the user. In networked but non-lockstep applications, this\r\n     *   typically indicates that the user needs to be snapped or eased to the\r\n     *   current authoritative state. When this happens, it may be convenient\r\n     *   to call `MainLoop.resetFrameDelta()` to discard accumulated pending\r\n     *   updates. In non-networked applications, it may be acceptable to allow\r\n     *   the application to keep running for awhile to see if it will catch up.\r\n     *   However, this could also cause the application to look like it is\r\n     *   running very quickly for a few frames as it transitions through the\r\n     *   intermediate states. An alternative that may be acceptable is to\r\n     *   simply ignore the unsimulated elapsed time by calling\r\n     *   `MainLoop.resetFrameDelta()` even though this introduces\r\n     *   non-deterministic behavior. In all cases, if the application panics\r\n     *   frequently, this is an indication that the main loop is running too\r\n     *   slowly. However, most of the time the drop in frame rate will probably\r\n     *   be noticeable before a panic occurs. To help the application catch up\r\n     *   after a panic caused by a spiral of death, the same steps can be taken\r\n     *   that are suggested above if the FPS drops too low.\r\n     */\r\n    abstract end(fps : number, panic : boolean) : void;\r\n}","/*\r\n * MathUtilities provides a number of services for rendering using 4x4 matrices, like\r\n * transformting (i.e. translation, rotation, and scaling) 3d or 2d points from world\r\n * coordinate systems to screen coordinate systems.\r\n */\r\nimport {Matrix} from './Matrix'\r\nimport {Vector3} from './Vector3'\r\n\r\nexport namespace MathUtilities {\r\n    export function determinant4x4(result : Matrix) : number {\r\n        let det0 = result.get(0, 0) * (\r\n            (result.get(1, 1) * ((result.get(2, 2) * result.get(3, 3)) - (result.get(2, 3) * result.get(3, 2))))\r\n            - (result.get(1, 2) * ((result.get(2, 1) * result.get(3, 3)) - (result.get(2, 3) * result.get(3, 1))))\r\n            + (result.get(1, 3) * ((result.get(2, 1) * result.get(3, 2)) - (result.get(3, 1) * result.get(2, 2)))));\r\n        let det1 = result.get(0, 1) * (\r\n            (result.get(1, 0) * ((result.get(2, 2) * result.get(3, 3)) - (result.get(2, 3) * result.get(3, 2))))\r\n            - (result.get(1, 2) * ((result.get(2, 0) * result.get(3, 3)) - (result.get(3, 0) * result.get(2, 3))))\r\n            + (result.get(1, 3) * ((result.get(2, 0) * result.get(3, 2)) - (result.get(3, 0) * result.get(2, 2)))));\r\n        let det2 = result.get(0, 2) * (\r\n            (result.get(1, 0) * ((result.get(2, 1) * result.get(3, 3)) - (result.get(2, 3) * result.get(3, 1))))\r\n            - (result.get(1, 1) * ((result.get(2, 0) * result.get(3, 3)) - (result.get(2, 3) * result.get(3, 0))))\r\n            + (result.get(1, 3) * ((result.get(2, 0) * result.get(3, 1)) - (result.get(2, 1) * result.get(3, 0)))));\r\n        let det3 = result.get(0, 3) * (\r\n            (result.get(1, 0) * ((result.get(2, 1) * result.get(3, 2)) - (result.get(2, 2) * result.get(3, 1))))\r\n            - (result.get(1, 1) * ((result.get(2, 0) * result.get(3, 2)) - (result.get(2, 2) * result.get(3, 0))))\r\n            + (result.get(1, 2) * ((result.get(2, 0) * result.get(3, 1)) - (result.get(2, 1) * result.get(3, 0)))));\r\n        let det = det0 - det1 + det2 - det3;\r\n        console.log(\"det = \" + det0 + \" + \" + det1 + \" + \" + det2 + \" + \" + det3);\r\n        return det;\r\n    }\r\n    export function identity(result : Matrix) : void {\r\n        if (result.getRows() === result.getColumns()) {\r\n            for (let i = 0; i < result.getRows(); i++) {\r\n                for (let j = 0; j < result.getColumns(); j++) {\r\n                    if (i === j)\r\n                        result.set(1.0, i, j);\r\n                    else\r\n                        result.set(0.0, i, j);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    export function inverse(result : Matrix, mat : Matrix) : void {\r\n        let det = this.determinant(mat);\r\n        let m00 = mat.get(0, 0); let m01 = mat.get(0, 1); let m02 = mat.get(0, 2); let m03 = mat.get(0, 3);\r\n        let m10 = mat.get(1, 0); let m11 = mat.get(1, 1); let m12 = mat.get(1, 2); let m13 = mat.get(1, 3);\r\n        let m20 = mat.get(2, 0); let m21 = mat.get(2, 1); let m22 = mat.get(2, 2); let m23 = mat.get(2, 3);\r\n        let m30 = mat.get(3, 0); let m31 = mat.get(3, 1); let m32 = mat.get(3, 2); let m33 = mat.get(3, 3);\r\n        let temp = new Matrix(4, 4);\r\n        temp.set((m12 * m23 * m31) - (m13 * m22 * m31) + (m13 * m21 * m32) - (m11 * m23 * m32) - (m12 * m21 * m33) + (m11 * m22 * m33), 0, 0);\r\n        temp.set((m03 * m22 * m31) - (m02 * m23 * m31) - (m03 * m21 * m32) + (m01 * m23 * m32) + (m02 * m21 * m33) - (m01 * m22 * m33), 0, 1);\r\n        temp.set((m02 * m13 * m31) - (m03 * m12 * m31) + (m03 * m11 * m32) - (m01 * m13 * m32) - (m02 * m11 * m33) + (m01 * m12 * m33), 0, 2);\r\n        temp.set((m03 * m12 * m21) - (m02 * m13 * m21) - (m03 * m11 * m22) + (m01 * m13 * m22) + (m02 * m11 * m23) - (m01 * m12 * m23), 0, 3);\r\n        temp.set((m13 * m22 * m30) - (m12 * m23 * m30) - (m13 * m20 * m32) + (m10 * m23 * m32) + (m12 * m20 * m33) - (m10 * m22 * m33), 1, 0);\r\n        temp.set((m02 * m23 * m30) - (m03 * m22 * m30) + (m03 * m20 * m32) - (m00 * m23 * m32) - (m02 * m20 * m33) + (m00 * m22 * m33), 1, 1);\r\n        temp.set((m03 * m12 * m30) - (m02 * m13 * m30) - (m03 * m10 * m32) + (m00 * m13 * m32) + (m02 * m10 * m33) - (m00 * m12 * m33), 1, 2);\r\n        temp.set((m02 * m13 * m20) - (m03 * m12 * m20) + (m03 * m10 * m22) - (m00 * m13 * m22) - (m02 * m10 * m23) + (m00 * m12 * m23), 1, 3);\r\n        temp.set((m11 * m23 * m30) - (m13 * m21 * m30) + (m13 * m20 * m31) - (m10 * m23 * m31) - (m11 * m20 * m33) + (m10 * m21 * m33), 2, 0);\r\n        temp.set((m03 * m21 * m30) - (m01 * m23 * m30) - (m03 * m20 * m31) + (m00 * m23 * m31) + (m01 * m20 * m33) - (m00 * m21 * m33), 2, 1);\r\n        temp.set((m01 * m13 * m30) - (m03 * m11 * m30) + (m03 * m10 * m31) - (m00 * m13 * m31) - (m01 * m10 * m33) + (m00 * m11 * m33), 2, 2);\r\n        temp.set((m03 * m11 * m20) - (m01 * m13 * m20) - (m03 * m10 * m21) + (m00 * m13 * m21) + (m01 * m10 * m23) - (m00 * m11 * m23), 2, 3);\r\n        temp.set((m12 * m21 * m30) - (m11 * m22 * m30) - (m12 * m20 * m31) + (m10 * m22 * m31) + (m11 * m20 * m32) - (m10 * m21 * m32), 3, 0);\r\n        temp.set((m01 * m22 * m30) - (m02 * m21 * m30) + (m02 * m20 * m31) - (m00 * m22 * m31) - (m01 * m20 * m32) + (m00 * m21 * m32), 3, 1);\r\n        temp.set((m02 * m11 * m30) - (m01 * m12 * m30) - (m02 * m10 * m31) + (m00 * m12 * m31) + (m01 * m10 * m32) - (m00 * m11 * m32), 3, 2);\r\n        temp.set((m01 * m12 * m20) - (m02 * m11 * m20) + (m02 * m10 * m21) - (m00 * m12 * m21) - (m01 * m10 * m22) + (m00 * m11 * m22), 3, 3);\r\n        for (let i = 0; i < 4; i++) {\r\n            for (let j = 0; j < 4; j++) {\r\n                result.set(temp.get(i, j) / det, i, j);\r\n            }\r\n        }\r\n    }\r\n    export function model(result : Matrix, translation : Vector3, rotation : Vector3, scale : Vector3) : void {\r\n        // TRANSLATION MATRIX\t\r\n        let translationMatrix = new Matrix(4, 4);\r\n        this.identity(translationMatrix);\r\n        this.translate(translationMatrix, translation);\r\n\r\n        // ROTATION MATRIX\r\n        let rotationMatrix = new Matrix(4, 4);\r\n        this.identity(rotationMatrix);\r\n        this.rotate(rotationMatrix, rotation);\r\n\r\n        // SCALING MATRIX\r\n        let scaleMatrix = new Matrix(4, 4);\r\n        this.identity(scaleMatrix);\r\n        this.scale(scaleMatrix, scale);\r\n\r\n        // AND NOW MULTIPLY THEM TOGETHER IN THE CORRECT ORDER\r\n        let tempMatrix = new Matrix(4, 4);\r\n        this.multiply(tempMatrix, translationMatrix, rotationMatrix);\r\n        this.multiply(result, tempMatrix, scaleMatrix);\r\n    }\r\n\r\n    export function multiply(result : Matrix, mat0 : Matrix, mat1 : Matrix) : void {\r\n        // result MIGHT BE mat0 OR mat1 SO IT'S BEST IF WE\r\n        // CALCULATE TEMP VALUES FIRST BEFORE ASSIGNMENT\r\n        let r00 = (mat0.get(0, 0) * mat1.get(0, 0))\r\n            + (mat0.get(0, 1) * mat1.get(1, 0))\r\n            + (mat0.get(0, 2) * mat1.get(2, 0))\r\n            + (mat0.get(0, 3) * mat1.get(3, 0));\r\n        let r10 = (mat0.get(1, 0) * mat1.get(0, 0))\r\n            + (mat0.get(1, 1) * mat1.get(1, 0))\r\n            + (mat0.get(1, 2) * mat1.get(2, 0))\r\n            + (mat0.get(1, 3) * mat1.get(3, 0));\r\n        let r20 = (mat0.get(2, 0) * mat1.get(0, 0))\r\n            + (mat0.get(2, 1) * mat1.get(1, 0))\r\n            + (mat0.get(2, 2) * mat1.get(2, 0))\r\n            + (mat0.get(2, 3) * mat1.get(3, 0));\r\n        let r30 = (mat0.get(3, 0) * mat1.get(0, 0))\r\n            + (mat0.get(3, 1) * mat1.get(1, 0))\r\n            + (mat0.get(3, 2) * mat1.get(2, 0))\r\n            + (mat0.get(3, 3) * mat1.get(3, 0));\r\n        let r01 = (mat0.get(0, 0) * mat1.get(0, 1))\r\n            + (mat0.get(0, 1) * mat1.get(1, 1))\r\n            + (mat0.get(0, 2) * mat1.get(2, 1))\r\n            + (mat0.get(0, 3) * mat1.get(3, 1));\r\n        let r11 = (mat0.get(1, 0) * mat1.get(0, 1))\r\n            + (mat0.get(1, 1) * mat1.get(1, 1))\r\n            + (mat0.get(1, 2) * mat1.get(2, 1))\r\n            + (mat0.get(1, 3) * mat1.get(3, 1));\r\n        let r21 = (mat0.get(2, 0) * mat1.get(0, 1))\r\n            + (mat0.get(2, 1) * mat1.get(1, 1))\r\n            + (mat0.get(2, 2) * mat1.get(2, 1))\r\n            + (mat0.get(2, 3) * mat1.get(3, 1));\r\n        let r31 = (mat0.get(3, 0) * mat1.get(0, 1))\r\n            + (mat0.get(3, 1) * mat1.get(1, 1))\r\n            + (mat0.get(3, 2) * mat1.get(2, 1))\r\n            + (mat0.get(3, 3) * mat1.get(3, 1));\r\n        let r02 = (mat0.get(0, 0) * mat1.get(0, 2))\r\n            + (mat0.get(0, 1) * mat1.get(1, 2))\r\n            + (mat0.get(0, 2) * mat1.get(2, 2))\r\n            + (mat0.get(0, 3) * mat1.get(3, 2));\r\n        let r12 = (mat0.get(1, 0) * mat1.get(0, 2))\r\n            + (mat0.get(1, 1) * mat1.get(1, 2))\r\n            + (mat0.get(1, 2) * mat1.get(2, 2))\r\n            + (mat0.get(1, 3) * mat1.get(3, 2));\r\n        let r22 = (mat0.get(2, 0) * mat1.get(0, 2))\r\n            + (mat0.get(2, 1) * mat1.get(1, 2))\r\n            + (mat0.get(2, 2) * mat1.get(2, 2))\r\n            + (mat0.get(2, 3) * mat1.get(3, 2));\r\n        let r32 = (mat0.get(3, 0) * mat1.get(0, 2))\r\n            + (mat0.get(3, 1) * mat1.get(1, 2))\r\n            + (mat0.get(3, 2) * mat1.get(2, 2))\r\n            + (mat0.get(3, 3) * mat1.get(3, 2));\r\n        let r03 = (mat0.get(0, 0) * mat1.get(0, 3))\r\n            + (mat0.get(0, 1) * mat1.get(1, 3))\r\n            + (mat0.get(0, 2) * mat1.get(2, 3))\r\n            + (mat0.get(0, 3) * mat1.get(3, 3));\r\n        let r13 = (mat0.get(1, 0) * mat1.get(0, 3))\r\n            + (mat0.get(1, 1) * mat1.get(1, 3))\r\n            + (mat0.get(1, 2) * mat1.get(2, 3))\r\n            + (mat0.get(1, 3) * mat1.get(3, 3));\r\n        let r23 = (mat0.get(2, 0) * mat1.get(0, 3))\r\n            + (mat0.get(2, 1) * mat1.get(1, 3))\r\n            + (mat0.get(2, 2) * mat1.get(2, 3))\r\n            + (mat0.get(2, 3) * mat1.get(3, 3));\r\n        let r33 = (mat0.get(3, 0) * mat1.get(0, 3))\r\n            + (mat0.get(3, 1) * mat1.get(1, 3))\r\n            + (mat0.get(3, 2) * mat1.get(2, 3))\r\n            + (mat0.get(3, 3) * mat1.get(3, 3));\r\n\r\n        // NOW PUT ALL THE CALCULATED VALUES IN THE result MATRIX\r\n        result.set(r00, 0, 0);\r\n        result.set(r10, 1, 0);\r\n        result.set(r20, 2, 0);\r\n        result.set(r30, 3, 0);\r\n        result.set(r01, 0, 1);\r\n        result.set(r11, 1, 1);\r\n        result.set(r21, 2, 1);\r\n        result.set(r31, 3, 1);\r\n        result.set(r02, 0, 2);\r\n        result.set(r12, 1, 2);\r\n        result.set(r22, 2, 2);\r\n        result.set(r32, 3, 2);\r\n        result.set(r03, 0, 3);\r\n        result.set(r13, 1, 3);\r\n        result.set(r23, 2, 3);\r\n        result.set(r33, 3, 3);\r\n    }\r\n\r\n    export function projection(result : Matrix, nearZ : number, farZ : number, viewportWidth : number, viewportHeight : number, fovY : number) : void {\r\n        let aspectRatio = viewportWidth / viewportHeight;\r\n        let fieldOfViewY = this.math.degreesToRadians(fovY);\r\n        let fieldOfViewX = 2 * Math.atan(Math.tan(fieldOfViewY / 2) * aspectRatio);\r\n\r\n        // WE'LL USE THESE AS SHORTHAND FOR LOADING OUR MATRIX\r\n        let n = nearZ;\r\n        let f = farZ;\r\n        let r = Math.tan(fieldOfViewX / 2) * n;\r\n        let t = Math.tan(fieldOfViewY / 2) * n;\r\n\r\n        // 0-3\r\n        result.set(n / r, 0, 0);\r\n        result.set(0.0, 0, 1);\r\n        result.set(0.0, 0, 2);\r\n        result.set(0.0, 0, 3);\r\n        // 4-7\r\n        result.set(0.0, 1, 0);\r\n        result.set(n / t, 1, 1);\r\n        result.set(0.0, 1, 2);\r\n        result.set(0.0, 1, 3);\r\n        // 8-11\r\n        result.set(0.0, 2, 0);\r\n        result.set(0.0, 2, 1);\r\n        result.set((-(f + n)) / (f - n), 2, 2);\r\n        result.set((-2 * f * n) / (f - n), 2, 3);\r\n        // 12-15 \r\n        result.set(0.0, 3, 0);\r\n        result.set(0.0, 3, 1);\r\n        result.set(-1.0, 3, 2);\r\n        result.set(0.0, 3, 3);\r\n    }\r\n\r\n    export function rotate(result : Matrix, rotationVector : Vector3) : void {\r\n        // START WITH THE X-AXIS ROTATION\r\n        let xRotationMatrix = new Matrix(4, 4);\r\n        this.identity(xRotationMatrix);\r\n        let thetaX = rotationVector.getThetaX();\r\n        xRotationMatrix.set(Math.cos(thetaX), 1, 1);\r\n        xRotationMatrix.set(Math.sin(thetaX), 2, 1);\r\n        xRotationMatrix.set(-1 * Math.sin(thetaX), 1, 2);\r\n        xRotationMatrix.set(Math.cos(thetaX), 2, 2);\r\n\r\n        // START WITH THE Y-AXIS ROTATION\r\n        let yRotationMatrix = new Matrix(4, 4);\r\n        this.identity(yRotationMatrix);\r\n        let thetaY = rotationVector.getThetaY();\r\n        yRotationMatrix.set(Math.cos(thetaY), 0, 0);\r\n        yRotationMatrix.set(-1 * Math.sin(thetaY), 2, 0);\r\n        yRotationMatrix.set(Math.sin(thetaY), 0, 2);\r\n        yRotationMatrix.set(Math.cos(thetaY), 2, 2);\r\n\r\n        // START WITH THE Z-AXIS ROTATION\r\n        let zRotationMatrix = new Matrix(4, 4);\r\n        this.identity(zRotationMatrix);\r\n        let thetaZ = rotationVector.getThetaZ();\r\n        zRotationMatrix.set(Math.cos(thetaZ), 0, 0);\r\n        zRotationMatrix.set(Math.sin(thetaZ), 1, 0);\r\n        zRotationMatrix.set(-1 * Math.sin(thetaZ), 0, 1);\r\n        zRotationMatrix.set(Math.cos(thetaZ), 1, 1);\r\n\r\n        // START WITH THE X-AXIS ROTATION\r\n        let tempMatrix = new Matrix(4, 4);\r\n        this.identity(tempMatrix);\r\n        this.multiply(tempMatrix, xRotationMatrix, yRotationMatrix);\r\n        this.multiply(result, tempMatrix, zRotationMatrix);\r\n    }\r\n\r\n    export function scale(result : Matrix, scaleVector : Vector3) : void {\r\n        // START WITH THE IDENTITY MATRIX\r\n        this.identity(result, scaleVector);\r\n\r\n        // AND THEN LOAD IN THE TRANSLATION VALUES\r\n        result.set(scaleVector.getX(), 0, 0);\r\n        result.set(scaleVector.getY(), 1, 1);\r\n        result.set(scaleVector.getZ(), 2, 2);\r\n    }\r\n\r\n    export function transform(result : Vector3, mat : Matrix, vec : Vector3) : void {\r\n        result.setX((mat.get(0, 0) * vec.getX()) + (mat.get(0, 1) * vec.getY()) + (mat.get(0, 2) * vec.getZ()) + (mat.get(0, 3) * vec.getW()));\r\n        result.setY((mat.get(1, 0) * vec.getX()) + (mat.get(1, 1) * vec.getY()) + (mat.get(1, 2) * vec.getZ()) + (mat.get(1, 3) * vec.getW()));\r\n        result.setZ((mat.get(2, 0) * vec.getX()) + (mat.get(2, 1) * vec.getY()) + (mat.get(2, 2) * vec.getZ()) + (mat.get(2, 3) * vec.getW()));\r\n        result.setW((mat.get(3, 0) * vec.getX()) + (mat.get(3, 1) * vec.getY()) + (mat.get(3, 2) * vec.getZ()) + (mat.get(3, 3) * vec.getW()));\r\n    }\r\n\r\n    export function translate(result : Matrix, translationVector : Vector3) : void {\r\n        // START WITH THE IDENTITY MATRIX\r\n        this.identity(result);\r\n\r\n        // AND THEN LOAD IN THE TRANSLATION VALUES\r\n        result.set(translationVector.getX(), 0, 3);\r\n        result.set(translationVector.getY(), 1, 3);\r\n        result.set(translationVector.getZ(), 2, 3);\r\n    }\r\n\r\n    export function transpose(result : Matrix, mat : Matrix) : void {\r\n        for (let i = 0; i < 4; i++) {\r\n            for (let j = 0; j < 4; j++) {\r\n                let temp = mat.get(i, j);\r\n                result.set(temp, j, i);\r\n            }\r\n        }\r\n    }\r\n\r\n    export function view(result : Matrix, cameraPosition : Vector3, cameraOrientation : Vector3) : void {\r\n        let pitch = this.math.degreesToRadians(cameraOrientation.getThetaX());\r\n        let yaw = this.math.degreesToRadians(cameraOrientation.getThetaY());\r\n        let roll = this.math.degreesToRadians(cameraOrientation.getThetaZ());\r\n\r\n        // TO TRANSLATE\r\n        let translateVector = this.math.vectorMath.createPositionVector();\r\n        translateVector.set(-cameraPosition.getX(), -cameraPosition.getY(), -cameraPosition.getZ());\r\n        let translateMatrix = new Matrix(4, 4);\r\n        this.identity(translateMatrix);\r\n        this.translate(translateMatrix, translateVector);\r\n\r\n        // TO ROTATE\r\n        let rotateVector = this.math.vectorMath.createRotationVector();\r\n        rotateVector.set(-pitch, -yaw, -roll);\r\n        let rotateMatrix = new Matrix(4, 4);\r\n        this.rotate(rotateMatrix, rotateVector);\r\n\r\n        // NOW COMBINE THE 2 MATRICES\r\n        this.multiply(result, rotateMatrix, translateMatrix);\r\n    }\r\n\r\n    export function addVectors(result : Vector3, vec0 : Vector3, vec1 : Vector3) : void {\r\n        for (let i = 0; i < vec0.getSize(); i++) {\r\n            let total = vec0.getAt(i) + vec1.getAt(i);\r\n            result.setAt(i, total);\r\n        }\r\n    }\r\n\r\n    export function crossProduct(result : Vector3, vec0 : Vector3, vec1 : Vector3) : void {\r\n        let result0 = (vec0.getY() * vec1.getZ())\r\n            - (vec1.getY() * vec0.getZ());\r\n        let result1 = (vec0.getZ() * vec1.getX())\r\n            - (vec1.getZ() * vec0.getX());\r\n        let result2 = (vec0.getX() * vec1.getY())\r\n            - (vec1.getX() * vec0.getY());\r\n        result.setX(result0);\r\n        result.setY(result1);\r\n        result.setZ(result2);\r\n    }\r\n\r\n    export function dotProduct(vec0 : Vector3, vec1 : Vector3) : number {\r\n        let resultX = vec0.getX() * vec1.getX();\r\n        let resultY = vec0.getY() * vec1.getY();\r\n        let resultZ = vec0.getZ() * vec1.getZ();\r\n        return resultX + resultY + resultZ;\r\n    }\r\n\r\n    export function multiplyVectors(result : Vector3, vec : Vector3, scalar : number) : void {\r\n        let vecX = vec.getX() * scalar;\r\n        let vecY = vec.getY() * scalar;\r\n        let vecZ = vec.getZ() * scalar;\r\n        result.setX(vecX);\r\n        result.setY(vecY);\r\n        result.setZ(vecZ);\r\n    }\r\n\r\n    export function normalize(result : Vector3, vec : Vector3) : void {\r\n        let xSquared = vec.getX() * vec.getX();\r\n        let ySquared = vec.getY() * vec.getY();\r\n        let zSquared = vec.getZ() * vec.getZ();\r\n        let distance = Math.sqrt(xSquared + ySquared + zSquared);\r\n        result.setX(vec.getX() / distance);\r\n        result.setY(vec.getY() / distance);\r\n        result.setZ(vec.getZ() / distance);\r\n    }\r\n\r\n    export function subtractVectors(result : Vector3, vec0 : Vector3, vec1 : Vector3) : void {\r\n        let resultX = vec0.getX() - vec1.getX();\r\n        let resultY = vec0.getY() - vec1.getY();\r\n        let resultZ = vec0.getZ() - vec1.getZ();\r\n        result.setX(resultX);\r\n        result.setY(resultY);\r\n        result.setZ(resultZ);\r\n    }\r\n}","/*\r\n * A Matrix is used for transforming points from local\r\n * coordinates to world coordinates.\r\n */\r\nexport class Matrix {\r\n    private mat : Float32Array;\r\n    private rows : number;\r\n    private columns : number;\r\n\r\n    public constructor(rows : number, columns : number) {\r\n        this.rows = rows;\r\n        this.columns = columns;\r\n        this.mat = new Float32Array(rows * columns);\r\n        for (let i = 0; i < (rows * columns); i++)\r\n            this.mat[i] = 0.0;\r\n    }\r\n\r\n    public getData() : Float32Array {\r\n        return this.mat;\r\n    }\r\n\r\n    public getRows() : number {\r\n        return this.rows;\r\n    }\r\n\r\n    public getColumns() : number {\r\n        return this.columns;\r\n    }\r\n\r\n    public getIndex (rows : number, columns : number) : number {\r\n        return (this.rows * columns) + rows;\r\n    }\r\n    \r\n    public get (row : number, column : number) : number {\r\n        let index = this.getIndex(row, column);\r\n        let valueToReturn = this.mat[index];\r\n        return valueToReturn;\r\n    }\r\n\r\n    public set (value : number, row : number, column : number) {\r\n        let index = this.getIndex(row, column);\r\n        this.mat[index] = value;\r\n    }\r\n    \r\n    public print () : void {\r\n        let maxWidth = 0;\r\n        for (let i = 0; i < 4; i++) {\r\n            for (let j = 0; j < 4; j++) {\r\n                let testNum = this.get(j, i) + \"\";\r\n                if (testNum.length > maxWidth) {\r\n                    maxWidth = testNum.length;\r\n                }\r\n            }\r\n        }\r\n        let text = \"[ \";\r\n        for (let i = 0; i < this.rows; i++) {\r\n            if (i > 0)\r\n                text += \"  \";\r\n            for (var j = 0; j < this.columns; j++) {\r\n                var numText = this.get(i, j) + \"\";\r\n                while (numText.length < maxWidth) {\r\n                    numText = \" \" + numText;\r\n                }\r\n                text += numText;\r\n                if (j < (this.columns - 1)) {\r\n                    text += \",\";\r\n                }\r\n                text += \" \";\r\n            }\r\n            if (i < (this.rows - 1)) {\r\n                text += \"\\n\";\r\n            }\r\n            text += \"]\";\r\n            console.log(text);\r\n        }\r\n    }\r\n}","/**\r\n * Vector3\r\n * \r\n * The Vector3 class can be used for any 2d or 3d point, vector, \r\n * or rotation (i.e. angles of orientation).\r\n */\r\nexport class Vector3 {\r\n    private vec : Float32Array;\r\n    private size : number;\r\n\r\n    public constructor() {\r\n        this.vec = new Float32Array(4);\r\n        for (let i = 0; i < 4; i++)\r\n            this.vec[i] = 0.0;\r\n        this.size = 4;\r\n    }\r\n\r\n    public getSize() : number {\r\n        return this.size;\r\n    }\r\n\r\n    public getAt(index : number) : number {\r\n        return this.vec[index];\r\n    }\r\n\r\n    public getX() : number {\r\n        return this.vec[0];\r\n    }\r\n\r\n    public getY() : number {\r\n        return this.vec[1];\r\n    }\r\n\r\n    public getZ() : number {\r\n        return this.vec[2];\r\n    }\r\n\r\n    public getW() : number {\r\n        return this.vec[3];\r\n    }\r\n\r\n    public getThetaX() : number {\r\n        return this.vec[0];\r\n    }\r\n\r\n    public getThetaY() : number {\r\n        return this.vec[1];\r\n    }\r\n\r\n    public getThetaZ() : number {\r\n        return this.vec[2];\r\n    }\r\n\r\n    public set(init0 : number, init1 : number, init2 : number, init3 : number) : void {\r\n        this.vec[0] = init0;\r\n        this.vec[1] = init1;\r\n        this.vec[2] = init2;\r\n        this.vec[3] = init3;\r\n    }\r\n\r\n    public setAt(index : number, value : number) : void {\r\n        this.vec[index] = value;\r\n    }\r\n\r\n    public setX(initX : number) : void {\r\n        this.vec[0] = initX;\r\n    }\r\n\r\n    public setY(initY : number) : void {\r\n        this.vec[1] = initY;\r\n    }\r\n\r\n    public setZ(initZ : number) : void {\r\n        this.vec[2] = initZ;\r\n    }\r\n\r\n    public setW(initW : number) : void {\r\n        this.vec[3] = initW;\r\n    }\r\n\r\n    public setThetaX(initThetaX : number) : void {\r\n        this.setX(initThetaX);\r\n    }\r\n\r\n    public setThetaY(initThetaY : number) : void {\r\n        this.setY(initThetaY);\r\n    }\r\n\r\n    public setThetaZ(initThetaZ : number) : void {\r\n        this.setZ(initThetaZ);\r\n    }\r\n\r\n    public print() : void {\r\n        let text = \"[\";\r\n        for (let i = 0; i < this.size; i++) {\r\n            text += this.vec[i];\r\n            if (i < (this.size - 1)) {\r\n                text += \", \";\r\n            }\r\n        }\r\n        text += \"]\";\r\n        console.log(text);\r\n    }\r\n}","/*\r\n * This class renders text to a canvas, updated each frame.\r\n */\r\nexport class TextToRender {\r\n    public id : string;\r\n    public text : string;\r\n    public x : number;\r\n    public y : number;\r\n    public update : Function;\r\n    public fontFamily : string;\r\n    public fontSize : number;\r\n    public fontColor : string;\r\n    public properties : Map<string, object>;\r\n\r\n    public constructor(initId : string, initText : string, initX : number, initY : number, initUpdate : Function) {\r\n        this.id = initId;\r\n        this.text = initText;\r\n        this.x = initX;\r\n        this.y = initY;\r\n        this.update = initUpdate;\r\n        this.fontFamily = \"\";\r\n        this.fontSize = 0;\r\n        this.fontColor = \"\";\r\n        this.properties = new Map();\r\n    }\r\n}\r\n\r\nexport class TextRenderer {\r\n    private textToRender : Array<TextToRender>;\r\n    private textCanvas : HTMLCanvasElement;\r\n    private textCanvasWidth : number;\r\n    private textCanvasHeight : number;\r\n    private textCtx : CanvasRenderingContext2D;\r\n    private defaultFontFamily : string;\r\n    private defaultFontSize : number;\r\n    private defaultFontColor : string;\r\n\r\n    public constructor(textCanvasId : string, initFontFamily : string, initFontSize : number, initFontColor : string) {\r\n        this.textToRender = new Array();\r\n        this.textCanvas = <HTMLCanvasElement>document.getElementById(textCanvasId);\r\n        this.textCanvas.width = window.innerWidth;\r\n        this.textCanvas.height = window.innerHeight;\r\n        this.textCanvasWidth = this.textCanvas.width;\r\n        this.textCanvasHeight = this.textCanvas.height;\r\n        this.textCtx = this.textCanvas.getContext(\"2d\");\r\n        this.defaultFontFamily = initFontFamily;\r\n        this.defaultFontSize = initFontSize;\r\n        this.defaultFontColor = initFontColor;\r\n    }\r\n    \r\n    public addTextToRender(textToAdd : TextToRender) : void {\r\n        textToAdd.fontFamily = this.defaultFontFamily;\r\n        textToAdd.fontSize = this.defaultFontSize;\r\n        textToAdd.fontColor = this.defaultFontColor;\r\n        this.textToRender.push(textToAdd);\r\n    }\r\n\r\n    public clear() : void {\r\n        this.textToRender = [];\r\n    }\r\n\r\n    public getCanvasWidth() : number {\r\n        return this.textCanvasWidth;\r\n    }\r\n\r\n    public getCanvasHeight() : number {\r\n        return this.textCanvasHeight;\r\n    }\r\n\r\n    public render() : void {\r\n        this.textCtx.clearRect(0, 0, this.textCanvas.width, this.textCanvas.height);\r\n        for (var i = 0; i < this.textToRender.length; i++) {\r\n            var textToRender = this.textToRender[i];\r\n            textToRender.update();\r\n            this.textCtx.font = \"\" + textToRender.fontSize + \"px \" + textToRender.fontFamily;\r\n            this.textCtx.fillStyle = textToRender.fontColor;\r\n            this.textCtx.fillText(textToRender.text, textToRender.x, textToRender.y);\r\n        }\r\n    }\r\n}","import { WebGLGameShader } from './WebGLGameShader'\r\nimport { Matrix } from '../math/Matrix'\r\nimport { Vector3 } from '../math/Vector3'\r\n\r\nexport abstract class WebGLGameRenderingComponent {\r\n    protected readonly A_POSITION = \"a_Position\";\r\n    protected readonly A_TEX_COORD = \"a_TexCoord\";\r\n    protected readonly U_MESH_TRANSFORM = \"u_MeshTransform\";\r\n    protected readonly U_TEX_COORD_FACTOR = \"u_TexCoordFactor\";\r\n    protected readonly U_TEX_COORD_SHIFT = \"u_TexCoordShift\";\r\n    protected readonly U_SAMPLER = \"u_Sampler\";\r\n    protected readonly NUM_VERTICES = 4;\r\n    protected readonly FLOATS_PER_VERTEX = 2;\r\n    protected readonly FLOATS_PER_TEXTURE_COORDINATE = 2;\r\n    protected readonly TOTAL_BYTES = 16;\r\n    protected readonly VERTEX_POSITION_OFFSET = 0;\r\n    protected readonly TEXTURE_COORDINATE_OFFSET = 8;\r\n    protected readonly INDEX_OF_FIRST_VERTEX = 0;\r\n\r\n    // THESE WILL BE PROVIDED CUSTOMLY AFTER CONSTRUCTION DURING init\r\n    protected shader: WebGLGameShader;\r\n    protected vertexDataBuffer: WebGLBuffer;\r\n    protected webGLAttributeLocations: Map<string, GLuint>;\r\n    protected webGLUniformLocations: Map<string, WebGLUniformLocation>;\r\n\r\n    // WE'LL USE THESE FOR TRANSOFMRING OBJECTS WHEN WE DRAW THEM\r\n    protected meshTransform: Matrix;\r\n    protected meshTranslate: Vector3;\r\n    protected meshRotate: Vector3;\r\n    protected meshScale: Vector3;\r\n\r\n    constructor() {\r\n        // WE'LL MANAGE THESE FOR OUR WebGL SHADERS\r\n        this.webGLAttributeLocations = new Map();\r\n        this.webGLUniformLocations = new Map();\r\n\r\n        // WE'LL USE THESE FOR TRANSLATING, ROTATING, AND SCALING THE MESH\r\n        this.meshTransform = new Matrix(4, 4);\r\n        this.meshTranslate = new Vector3();\r\n        this.meshRotate = new Vector3();\r\n        this.meshScale = new Vector3();\r\n    }\r\n\r\n    public init(webGL: WebGLRenderingContext,\r\n                vertexShaderSource: string,\r\n                fragmentShaderSource: string,\r\n                renderSetupData: object): void {\r\n        // FIRST WE NEED TO MAKE THE SHADER\r\n        this.shader = new WebGLGameShader();\r\n        this.shader.init(webGL, vertexShaderSource, fragmentShaderSource);\r\n\r\n        // CREATE THE BUFFER ON THE GPU\r\n        this.vertexDataBuffer = webGL.createBuffer();\r\n\r\n        // BIND THE BUFFER TO BE VERTEX DATA\r\n        webGL.bindBuffer(webGL.ARRAY_BUFFER, this.vertexDataBuffer);\r\n\r\n        // MAKE THE MESH DATA OURSELVES IN A CHILD CLASS\r\n        let meshVertexData : Float32Array = this.getVertexData(renderSetupData);\r\n\r\n        // AND SEND THE DATA TO THE BUFFER WE CREATED ON THE GPU\r\n        webGL.bufferData(webGL.ARRAY_BUFFER, meshVertexData, webGL.STATIC_DRAW);\r\n\r\n        // SETUP THE SHADER ATTRIBUTES AND UNIFORMS\r\n        this.loadAttributeLocations(webGL, this.getShaderAttributeNames());\r\n        this.loadUniformLocations(webGL, this.getShaderUniformNames());\r\n    }\r\n\r\n    public abstract getVertexData(renderData : object) : Float32Array;\r\n    public abstract getShaderAttributeNames(): string[];\r\n    public abstract getShaderUniformNames(): string[];\r\n\r\n    /**\r\n     * This function loads all the attribute data values so that we can\r\n     * retrieve them later when it is time to render. Note that this function\r\n     * can only be called after the shader program has been created.\r\n     */\r\n    protected loadAttributeLocations(webGL: WebGLRenderingContext, attributeLocationNames: Array<string>) {\r\n        for (var i = 0; i < attributeLocationNames.length; i++) {\r\n            let locationName: string = attributeLocationNames[i];\r\n            let location: GLuint = webGL.getAttribLocation(this.shader.getProgram(), locationName);\r\n            this.webGLAttributeLocations.set(locationName, location);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This function loads all the uniform data values so that we can\r\n     * retrieve them later when it is time to render. Note that this function\r\n     * can only be called after the shader program has been created.\r\n     */\r\n    protected loadUniformLocations(webGL: WebGLRenderingContext, uniformLocationNames: Array<string>) {\r\n        for (let i: number = 0; i < uniformLocationNames.length; i++) {\r\n            let locationName: string = uniformLocationNames[i];\r\n            let location: WebGLUniformLocation = webGL.getUniformLocation(this.shader.getProgram(), locationName);\r\n            this.webGLUniformLocations.set(locationName, location);\r\n        }\r\n    }\r\n}","/*\r\n * This serves as the subsystem that manages all game rendering.\r\n */\r\nimport { TextRenderer } from './TextRenderer'\r\nimport { WebGLGameTiledLayerRenderer } from './WebGLGameTiledLayerRenderer'\r\nimport { WebGLGameSpriteRenderer } from './WebGLGameSpriteRenderer'\r\nimport { WebGLGameTexture } from './WebGLGameTexture';\r\nimport { AnimatedSprite } from '../scene/sprite/AnimatedSprite'\r\nimport { TiledLayer } from '../scene/tiles/TiledLayer'\r\nimport { Viewport } from '../scene/Viewport'\r\n\r\n\r\nexport class WebGLGameRenderingSystem {\r\n    private renderingCanvas: HTMLCanvasElement;\r\n    private webGL: WebGLRenderingContext;\r\n    private canvasWidth: number;\r\n    private canvasHeight: number;\r\n\r\n    // OUR GAMES RENDER THREE DIFFERENT TYPES OF THINGS\r\n    private tiledLayerRenderer: WebGLGameTiledLayerRenderer;\r\n    private spriteRenderer: WebGLGameSpriteRenderer;\r\n    private textRenderer: TextRenderer;\r\n\r\n    public constructor( renderingCanvasId: string,\r\n                        textCanvasId: string) {\r\n        // FIRST SETUP webGL\r\n        this.renderingCanvas = <HTMLCanvasElement>document.getElementById(renderingCanvasId);\r\n        this.renderingCanvas.width = window.innerWidth;\r\n        this.renderingCanvas.height = window.innerHeight;\r\n        this.canvasWidth = this.renderingCanvas.width;\r\n        this.canvasHeight = this.renderingCanvas.height;\r\n        this.webGL = this.renderingCanvas.getContext(\"webgl\");\r\n\r\n        // IF THE USER'S MACHINE/BROWSER DOESN'T SUPPORT\r\n        // WebGL THEN THERE'S NO POINT OF GOING ON\r\n        if (!this.webGL) {\r\n            // PROVIDE SOME FEEDBACK THAT WebGL WON'T WORK BECAUSE\r\n            // THE USER'S' GRAPHICS CARD IS FOR THE BIRDS\r\n            console.error(\"WebGL is not supported by this device\");\r\n\r\n            // AND END INITIALIZATION\r\n            return;\r\n        }\r\n\r\n        // WebGL IS SUPPORTED, SO INIT EVERYTHING THAT USES IT\r\n\r\n        // MAKE THE CLEAR COLOR BLACK\r\n        this.setClearColor(0.0, 0.0, 0.0, 1.0);\r\n\r\n        // ENABLE DEPTH TESTING\r\n        this.webGL.disable(this.webGL.DEPTH_TEST);\r\n        this.webGL.enable(this.webGL.BLEND);\r\n        this.webGL.blendFunc(this.webGL.SRC_ALPHA, this.webGL.ONE_MINUS_SRC_ALPHA);\r\n\r\n        // TURN ON BACKFACE CULLING\r\n        this.webGL.enable(this.webGL.CULL_FACE);\r\n\r\n        // THIS SPECIFIES THAT WE'RE USING THE ENTIRE CANVAS\r\n        this.webGL.viewport(0, 0, this.canvasWidth, this.canvasHeight);\r\n\r\n        // MAKE THE TILED LAYER RENDERER\r\n        this.tiledLayerRenderer = new WebGLGameTiledLayerRenderer();\r\n\r\n        // MAKE THE SPRITE RENDERER\r\n        this.spriteRenderer = new WebGLGameSpriteRenderer();\r\n\r\n        // THIS WILL STORE OUR TEXT\r\n        this.textRenderer = new TextRenderer(textCanvasId, \"serif\", 18, \"#FFFF00\");\r\n    }\r\n\r\n    public getTextureConstant(id: number): number {\r\n        // WE ONLY ALLOW FOR 10 TEXTURES TO BE PUT ON THE GPU\r\n        switch (id) {\r\n            case 0: return this.webGL.TEXTURE0;\r\n            case 1: return this.webGL.TEXTURE1;\r\n            case 2: return this.webGL.TEXTURE2;\r\n            case 3: return this.webGL.TEXTURE3;\r\n            case 4: return this.webGL.TEXTURE4;\r\n            case 5: return this.webGL.TEXTURE5;\r\n            case 6: return this.webGL.TEXTURE6;\r\n            case 7: return this.webGL.TEXTURE7;\r\n            case 8: return this.webGL.TEXTURE8;\r\n            default: return this.webGL.TEXTURE9;\r\n        }\r\n    }\r\n\r\n    public getWebGL(): WebGLRenderingContext {\r\n        return this.webGL;\r\n    }\r\n\r\n    public getTiledLayerRenderer(): WebGLGameTiledLayerRenderer {\r\n        return this.tiledLayerRenderer;\r\n    }\r\n\r\n    public getSpriteRenderer(): WebGLGameSpriteRenderer {\r\n        return this.spriteRenderer;\r\n    }\r\n\r\n    public getTextRenderer(): TextRenderer {\r\n        return this.textRenderer;\r\n    }\r\n\r\n    public initWebGLTexture(textureToInit: WebGLGameTexture, textureId: number, image: HTMLImageElement, callback: Function): void {\r\n        textureToInit.width = image.width;\r\n        textureToInit.height = image.height;\r\n\r\n        // CREATE A WebGL TEXTURE ON THE GPU\r\n        textureToInit.webGLTexture = this.webGL.createTexture();\r\n        textureToInit.webGLTextureId = textureId;\r\n\r\n        // FLIP THE IMAGE'S y-AXIS\r\n        //webGL.pixelStorei(webGL.UNPACK_FLIP_Y_WEBGL, 1);\r\n\r\n        // ACTIVATE THE WebGL TEXTURE ON THE GPU\r\n        //let textureNumName : string = \"TEXTURE\" + textureId;\r\n        let textureNameConstant: number = this.getTextureConstant(textureId);\r\n        this.webGL.activeTexture(textureNameConstant);\r\n\r\n        // BIND THE TEXTURE TO A 2D TYPE\r\n        this.webGL.bindTexture(this.webGL.TEXTURE_2D, textureToInit.webGLTexture);\r\n\r\n        // SPECIFY RENDERING SETTINGS\r\n        this.webGL.texParameteri(this.webGL.TEXTURE_2D, this.webGL.TEXTURE_MIN_FILTER, this.webGL.LINEAR);\r\n\r\n        // SET THE IMAGE FOR THE TEXTURE\r\n        this.webGL.texImage2D(this.webGL.TEXTURE_2D, 0, this.webGL.RGBA, this.webGL.RGBA, this.webGL.UNSIGNED_BYTE, image);\r\n\r\n        // KEEP IT FOR WHEN WE RENDER\r\n        callback();\r\n    }\r\n\r\n    public setClearColor(r: number, g: number, b: number, a: number): void {\r\n        this.webGL.clearColor(r, g, b, a);\r\n    }\r\n\r\n    public render(  viewport : Viewport,\r\n                    tiledLayers: Array<TiledLayer>,\r\n                    visibleSprites: Array<AnimatedSprite>): void {\r\n        // CLEAR THE CANVAS\r\n        this.webGL.clear(this.webGL.COLOR_BUFFER_BIT | this.webGL.DEPTH_BUFFER_BIT);\r\n\r\n        // RENDER THE TILED LAYER FIRST\r\n        this.tiledLayerRenderer.render(this.webGL, viewport, tiledLayers);\r\n\r\n        // RENDER THE SPRITES ON ONE CANVAS\r\n        this.spriteRenderer.render(this.webGL, viewport, visibleSprites);\r\n\r\n        // THEN THE TEXT ON ANOTHER OVERLAPPING CANVAS\r\n        this.textRenderer.render();\r\n    }\r\n}","/*\r\n * This is a wrapper class for a WebGLProgram, i.e. a shader for custom rendering\r\n * using WebGL's programmable pipeline.\r\n */\r\nexport class WebGLGameShader {\r\n    private program : WebGLProgram;\r\n    private vertexShader : WebGLShader;\r\n    private fragmentShader : WebGLShader;\r\n\r\n    public constructor() {}\r\n\r\n    public getProgram() : WebGLProgram {\r\n        return this.program;\r\n    }\r\n\r\n    public init(webGL : WebGLRenderingContext, vSource : string, fSource : string) : void {\r\n        this.vertexShader = <WebGLShader>this.createShader(webGL, webGL.VERTEX_SHADER, vSource);\r\n        this.fragmentShader = <WebGLShader>this.createShader(webGL, webGL.FRAGMENT_SHADER, fSource);\r\n        this.program = this.createShaderProgram(webGL, this.vertexShader, this.fragmentShader);\r\n    }\r\n\r\n    public createShader(webGL : WebGLRenderingContext, type : number, source : string) : WebGLShader {\r\n        // MAKE A NEW SHADER OBJECT, LOAD IT'S SOURCE, AND COMPILE IT\r\n        var shader = webGL.createShader(type);\r\n        webGL.shaderSource(shader, source);\r\n        webGL.compileShader(shader);\r\n\r\n        // DID IT COMPILE?\r\n        var success = webGL.getShaderParameter(shader, webGL.COMPILE_STATUS);\r\n        if (success) {\r\n            return shader;\r\n        }\r\n\r\n        // DISASTER\r\n        console.log(webGL.getShaderInfoLog(shader));\r\n        webGL.deleteShader(shader);\r\n        return null;\r\n    }\r\n\r\n    public createShaderProgram(webGL : WebGLRenderingContext, vShader : WebGLShader, fShader : WebGLShader) : WebGLProgram {\r\n        // MAKE THE GLSL SHADER PROGRAM\r\n        let programToCreate = webGL.createProgram();\r\n\r\n        // LINK THE VERT AND FRAG\r\n        webGL.attachShader(programToCreate, vShader);\r\n        webGL.attachShader(programToCreate, fShader);\r\n\r\n        // NOW WE CAN LINK THE SHADER PROGRAM\r\n        webGL.linkProgram(programToCreate);\r\n        let linked : boolean = webGL.getProgramParameter(programToCreate, webGL.LINK_STATUS);\r\n\r\n        // IS IT LINKED?\r\n        if (!linked) {\r\n            // DISASTER\r\n            let errorFeedback : string = webGL.getProgramInfoLog(programToCreate);\r\n            console.log(errorFeedback);\r\n\r\n            // DISASTER\r\n            console.log(webGL.getProgramInfoLog(programToCreate));\r\n            webGL.deleteProgram(programToCreate);\r\n        }\r\n        return programToCreate;\r\n    }\r\n}","import {WebGLGameRenderingComponent} from './WebGLGameRenderingComponent'\r\nimport {MathUtilities} from '../math/MathUtilities'\r\nimport {AnimatedSprite} from '../scene/sprite/AnimatedSprite'\r\nimport {AnimatedSpriteType} from '../scene/sprite/AnimatedSpriteType'\r\nimport {WebGLGameTexture} from './WebGLGameTexture'\r\nimport {Viewport} from '../scene/Viewport'\r\n\r\nexport class WebGLGameSpriteRenderer extends WebGLGameRenderingComponent {\r\n\r\n    private rotation : Array<number> = [0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0];\r\n    private spriteRotation : number; \r\n\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    public getVertexData() : Float32Array {\r\n        return new Float32Array([\r\n            -0.5,  0.5, this.rotation[0], this.rotation[1],\r\n            -0.5, -0.5, this.rotation[2], this.rotation[3],\r\n             0.5,  0.5, this.rotation[4], this.rotation[5],\r\n             0.5, -0.5, this.rotation[6], this.rotation[7]\r\n        ]);\r\n    }\r\n    public getShaderAttributeNames() : string[] {\r\n        return [this.A_POSITION, this.A_TEX_COORD];\r\n    }\r\n    public getShaderUniformNames() : string[] {\r\n        return [this.U_MESH_TRANSFORM, this.U_SAMPLER, this.U_TEX_COORD_FACTOR, this.U_TEX_COORD_SHIFT];\r\n    }\r\n\r\n    public render(  webGL : WebGLRenderingContext,\r\n                    viewport : Viewport,\r\n                    visibleSprites : Array<AnimatedSprite>) : void {\r\n        // SELECT THE ANIMATED SPRITE RENDERING SHADER PROGRAM FOR USE\r\n        let shaderProgramToUse = this.shader.getProgram();\r\n        webGL.useProgram(shaderProgramToUse);\r\n\r\n       // AND THEN RENDER EACH ONE\r\n       for (let sprite of visibleSprites) {\r\n            this.renderAnimatedSprite(webGL, viewport, sprite);        \r\n        }\r\n    }\r\n\r\n    private renderAnimatedSprite(   webGL : WebGLRenderingContext,\r\n                                    viewport : Viewport, \r\n                                    sprite : AnimatedSprite) : void {\r\n        // YOU'LL NEED TO UPDATE THIS METHOD TO MAKE SURE SPRITES SCROLL AND ROTATE\r\n        \r\n        let canvasWidth : number = webGL.canvas.width;\r\n        let canvasHeight : number = webGL.canvas.height;\r\n        let spriteType : AnimatedSpriteType = sprite.getSpriteType();\r\n        let texture : WebGLGameTexture = spriteType.getSpriteSheetTexture();\r\n\r\n        // Rotation\r\n        this.spriteRotation = sprite.getDirection();\r\n        if(this.spriteRotation == 1) {\r\n            this.rotation = [0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0];\r\n        } else if(this.spriteRotation == 2) {\r\n            this.rotation = [0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0];\r\n        } else if(this.spriteRotation == 3) {\r\n            this.rotation = [0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0];\r\n        } else if(this.spriteRotation == 4) {\r\n            this.rotation = [1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0];\r\n        } else {\r\n            this.rotation = [0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0];\r\n        }\r\n\r\n        // CALCULATE HOW MUCH TO TRANSLATE THE QUAD PER THE SPRITE POSITION\r\n        let spriteWidth : number = spriteType.getSpriteWidth();\r\n        let spriteHeight : number = spriteType.getSpriteHeight();\r\n        let spriteXInPixels : number = sprite.getPosition().getX() + (spriteWidth/2) - viewport.getX();\r\n        let spriteYInPixels : number = sprite.getPosition().getY() + (spriteHeight/2) - viewport.getY();\r\n        let spriteXTranslate : number = (spriteXInPixels - (canvasWidth/2))/(canvasWidth/2);\r\n        let spriteYTranslate : number = (spriteYInPixels - (canvasHeight/2))/(canvasHeight/2);\r\n        this.meshTranslate.setX(spriteXTranslate);\r\n        this.meshTranslate.setY(-spriteYTranslate);\r\n\r\n        // CALCULATE HOW MUCH TO SCALE THE QUAD PER THE SPRITE SIZE\r\n        let defaultWidth : number = canvasWidth;\r\n        let defaultHeight : number = canvasHeight;\r\n        let scaleX : number = 2*spriteWidth/defaultWidth;\r\n        let scaleY : number = 2*spriteHeight/defaultHeight;\r\n        this.meshScale.set(scaleX, scaleY, 0.0, 0.0);//1.0, 1.0);\r\n\r\n        // @todo - COMBINE THIS WITH THE ROTATE AND SCALE VALUES FROM THE SPRITE\r\n        MathUtilities.identity(this.meshTransform);\r\n        MathUtilities.model(this.meshTransform, this.meshTranslate, this.meshRotate, this.meshScale);\r\n        \r\n        // FIGURE OUT THE TEXTURE COORDINATE FACTOR AND SHIFT\r\n        let texCoordFactorX : number = spriteWidth/texture.width;\r\n        let texCoordFactorY : number = spriteHeight/texture.height;\r\n        let spriteLeft : number = sprite.getLeft();\r\n        let spriteTop : number = sprite.getTop();\r\n        let texCoordShiftX : number = spriteLeft/texture.width;\r\n        let texCoordShiftY : number = spriteTop/texture.height;\r\n\r\n        // USE THE ATTRIBUTES\r\n        webGL.bindBuffer(webGL.ARRAY_BUFFER, this.vertexDataBuffer);\r\n        webGL.bindTexture(webGL.TEXTURE_2D, texture.webGLTexture);\r\n\r\n        // HOOK UP THE ATTRIBUTES\r\n        let a_PositionLocation : GLuint = this.webGLAttributeLocations.get(this.A_POSITION);\r\n        webGL.vertexAttribPointer(a_PositionLocation, this.FLOATS_PER_TEXTURE_COORDINATE, webGL.FLOAT, false, this.TOTAL_BYTES, this.VERTEX_POSITION_OFFSET);\r\n        webGL.enableVertexAttribArray(a_PositionLocation);\r\n        let a_TexCoordLocation : GLuint = this.webGLAttributeLocations.get(this.A_TEX_COORD);\r\n        webGL.vertexAttribPointer(a_TexCoordLocation, this.FLOATS_PER_TEXTURE_COORDINATE, webGL.FLOAT, false, this.TOTAL_BYTES, this.TEXTURE_COORDINATE_OFFSET);\r\n        webGL.enableVertexAttribArray(a_TexCoordLocation);\r\n\r\n        // USE THE UNIFORMS\r\n        let u_MeshTransformLocation : WebGLUniformLocation = this.webGLUniformLocations.get(this.U_MESH_TRANSFORM);\r\n        webGL.uniformMatrix4fv(u_MeshTransformLocation, false, this.meshTransform.getData());\r\n        let u_SamplerLocation : WebGLUniformLocation = this.webGLUniformLocations.get(this.U_SAMPLER);\r\n        webGL.uniform1i(u_SamplerLocation, texture.webGLTextureId);\r\n        let u_TexCoordFactorLocation : WebGLUniformLocation = this.webGLUniformLocations.get(this.U_TEX_COORD_FACTOR);\r\n        webGL.uniform2f(u_TexCoordFactorLocation, texCoordFactorX, texCoordFactorY);\r\n        let u_TexCoordShiftLocation : WebGLUniformLocation = this.webGLUniformLocations.get(this.U_TEX_COORD_SHIFT);\r\n        webGL.uniform2f(u_TexCoordShiftLocation, texCoordShiftX, texCoordShiftY);\r\n\r\n        // DRAW THE SPRITE AS A TRIANGLE STRIP USING 4 VERTICES, STARTING AT THE START OF THE ARRAY (index 0)\r\n        webGL.drawArrays(webGL.TRIANGLE_STRIP, this.INDEX_OF_FIRST_VERTEX, this.NUM_VERTICES);\r\n    }\r\n}","export class WebGLGameTexture {\r\n    public webGLTextureId: number;\r\n    public webGLTexture: WebGLTexture;\r\n    public image: HTMLImageElement;\r\n    public width : number;\r\n    public height : number;\r\n}","import { MathUtilities } from \"../math/MathUtilities\"\r\nimport { TiledLayer } from \"../scene/tiles/TiledLayer\"\r\nimport { TileSet } from \"../scene/tiles/TileSet\"\r\nimport { WebGLGameRenderingComponent } from './WebGLGameRenderingComponent'\r\nimport { WebGLGameTexture } from './WebGLGameTexture'\r\nimport { Viewport } from '../scene/Viewport'\r\n\r\nexport class WebGLGameTiledLayerRenderer extends WebGLGameRenderingComponent {\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * This function generates the array of attribute data needed to \r\n     * render our TiledLayer and puts it in the tiled layer argument.\r\n     */\r\n    public generateVertexData(tiledLayer: TiledLayer): Float32Array {\r\n        let someNumberYouHaveToDetermine : number = 4;\r\n        let dataToFill = [someNumberYouHaveToDetermine];\r\n        let vertexData: Float32Array = new Float32Array(dataToFill);\r\n        return vertexData;\r\n    }\r\n\r\n    public getVertexData(renderSetupData: object): Float32Array {\r\n        // WE WILL NEED THIS TO KNOW HOW LARGE TO MAKE OUR VERTEX DATA BUFFER\r\n        let tiledLayers: Array<TiledLayer> = <Array<TiledLayer>>renderSetupData;\r\n        let tiledLayer: TiledLayer = tiledLayers[0];\r\n        return this.generateVertexData(tiledLayer);\r\n    }\r\n\r\n    public getShaderAttributeNames(): string[] {\r\n        // YOU'LL NEED TO DEFINE THIS METHOD\r\n        return [];\r\n    }\r\n\r\n    public getShaderUniformNames(): string[] {\r\n        // YOU'LL NEED TO DEFINE THIS METHOD\r\n        return [];\r\n    }\r\n\r\n    public render(  webGL: WebGLRenderingContext,\r\n                    viewport : Viewport,\r\n                    tiledLayers: Array<TiledLayer>): void {\r\n\r\n            // SELECT THE ANIMATED SPRITE RENDERING SHADER PROGRAM FOR USE\r\n        let shaderProgramToUse = this.shader.getProgram();\r\n        webGL.useProgram(shaderProgramToUse);\r\n\r\n        // AND THEN RENDER EACH LAYER\r\n        for (let tiledLayer of tiledLayers) {\r\n            this.renderTiledLayer(webGL, viewport, tiledLayer);\r\n        }\r\n    }\r\n\r\n    private renderTiledLayer(\r\n        webGL: WebGLRenderingContext,\r\n        viewport : Viewport,\r\n        tiledLayer: TiledLayer) {\r\n            // YOU'LL NEED TO DEFINE THIS METHOD\r\n    }\r\n}","import {SceneObject} from './SceneObject'\r\nimport {AnimatedSprite} from './sprite/AnimatedSprite'\r\nimport {TiledLayer} from './tiles/TiledLayer'\r\nimport {TileSet} from './tiles/TileSet'\r\nimport {Viewport} from './Viewport';\r\n\r\nexport class SceneGraph {\r\n    // AND ALL OF THE ANIMATED SPRITES, WHICH ARE NOT STORED\r\n    // SORTED OR IN ANY PARTICULAR ORDER. NOTE THAT ANIMATED SPRITES\r\n    // ARE SCENE OBJECTS\r\n    private animatedSprites : Array<AnimatedSprite>;\r\n\r\n    // SET OF VISIBLE OBJECTS, NOTE THAT AT THE MOMENT OUR\r\n    // SCENE GRAPH IS QUITE SIMPLE, SO THIS IS THE SAME AS\r\n    // OUR LIST OF ANIMATED SPRITES\r\n    private visibleSet : Array<SceneObject>;\r\n\r\n    // WE ARE ALSO USING A TILING ENGINE FOR RENDERING OUR LEVEL\r\n    // NOTE THAT WE MANAGE THIS HERE BECAUSE WE MAY INVOLVE THE TILED\r\n    // LAYERS IN PHYSICS AND PATHFINDING AS WELL\r\n    private tiledLayers : Array<TiledLayer>;\r\n    private tileSets : Array<TileSet>;\r\n\r\n    // THE VIEWPORT IS USED TO FILTER OUT WHAT IS NOT VISIBLE\r\n    private viewport : Viewport;\r\n\r\n    public constructor() {\r\n        // DEFAULT CONSTRUCTOR INITIALIZES OUR DATA STRUCTURES\r\n        this.clear();\r\n    }\r\n\r\n    public clear() : void {\r\n        this.animatedSprites = [];\r\n        this.visibleSet = [];\r\n        this.tiledLayers = [];\r\n        this.tileSets = [];\r\n    }\r\n\r\n    public addTileSet(tileSetToAdd : TileSet) : number {\r\n        return this.tileSets.push(tileSetToAdd) - 1;\r\n    }\r\n\r\n    public getNumTileSets() : number {\r\n        return this.tileSets.length;\r\n    }\r\n\r\n    public getTileSet(index : number) : TileSet {\r\n        return this.tileSets[index];\r\n    }\r\n\r\n    public addLayer(layerToAdd : TiledLayer) : void {\r\n        this.tiledLayers.push(layerToAdd);\r\n    }\r\n\r\n    public getNumTiledLayers() : number {\r\n        return this.tiledLayers.length;\r\n    }\r\n\r\n    public getTiledLayers() : Array<TiledLayer> {\r\n        return this.tiledLayers;\r\n    }\r\n\r\n    public getTiledLayer(layerIndex : number) : TiledLayer {\r\n        return this.tiledLayers[layerIndex];\r\n    }\r\n\r\n    public getNumSprites() : number {\r\n        return this.animatedSprites.length;\r\n    }\r\n\r\n    public setViewport(initViewport : Viewport) : void {\r\n        this.viewport = initViewport;\r\n    }\r\n\r\n    public getViewport() : Viewport { \r\n        return this.viewport;\r\n    }\r\n\r\n    public addAnimatedSprite(sprite : AnimatedSprite) : void {\r\n        this.animatedSprites.push(sprite);\r\n    }\r\n\r\n    public getSpriteAt(testX : number, testY : number) : AnimatedSprite {\r\n        for (let sprite of this.animatedSprites) {\r\n            if (sprite.contains(testX, testY))\r\n                return sprite;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * update\r\n     * \r\n     * Called once per frame, this function updates the state of all the objects\r\n     * in the scene.\r\n     * \r\n     * @param delta The time that has passed since the last time this update\r\n     * funcation was called.\r\n     */\r\n    public update(delta : number) : void {\r\n        for (let sprite of this.animatedSprites) {\r\n            sprite.update(delta);\r\n            \r\n            if(sprite.getType() == \"DENKIMUSHI2\") {\r\n                sprite.denkimushiAI();\r\n            }else if(sprite.getType() == \"LADYBUG\") {\r\n                sprite.ladybugAI();\r\n            }\r\n        }\r\n    }\r\n\r\n    public scope() : Array<SceneObject> {\r\n        // CLEAR OUT THE OLD\r\n        this.visibleSet = [];\r\n\r\n        // PUT ALL THE SCENE OBJECTS INTO THE VISIBLE SET\r\n        for (let sprite of this.animatedSprites) {\r\n            this.visibleSet.push(sprite);\r\n        }\r\n\r\n        return this.visibleSet;\r\n    }\r\n}","import {Vector3} from '../math/Vector3'\r\n\r\n/**\r\n * SceneObject\r\n * \r\n * A SceneObject is something that can be placed into the scene graph. It has\r\n * a position, rotation, and scale in the game world. Note that its position\r\n * is typically its centered location, so if we're talking about a 2d box, \r\n * it would be the center of that box.\r\n */\r\nexport abstract class SceneObject {\r\n    private position : Vector3;\r\n    private rotation : Vector3;\r\n    private scale : Vector3;\r\n\r\n    public constructor() {\r\n        this.position = new Vector3();\r\n        this.rotation = new Vector3();\r\n        this.scale = new Vector3();\r\n\r\n        // CLEAR ALL VALUES\r\n        this.position.set(0.0, 0.0, 0.0, 1.0);\r\n        this.rotation.set(0.0, 0.0, 0.0, 1.0);\r\n        this.scale.set(1.0, 1.0, 1.0, 1.0);\r\n    }\r\n\r\n    public getPosition() : Vector3 {\r\n        return this.position;\r\n    }    \r\n\r\n    public getRotation() : Vector3 {\r\n        return this.rotation;\r\n    }\r\n\r\n    public getScale() : Vector3 {\r\n        return this.scale;\r\n    }\r\n\r\n    public abstract contains(testX : number, testY : number) : boolean;\r\n}","export class Viewport {\r\n    private width : number;\r\n    private height : number;\r\n    private x : number;\r\n    private y : number;\r\n\r\n    public constructor(initWidth : number, initHeight : number) {\r\n        this.width = initWidth;\r\n        this.height = initHeight;\r\n        this.x = 0;\r\n        this.y = 0;\r\n    }\r\n\r\n    public getWidth() : number {\r\n        return this.width;\r\n    }\r\n\r\n    public getHeight() : number {\r\n        return this.height;\r\n    }\r\n\r\n    public getX() : number {\r\n        return this.x;\r\n    }\r\n\r\n    public getY() : number {\r\n        return this.y;\r\n    }\r\n\r\n    public inc(incX : number, incY : number) : void {\r\n        this.x += incX;\r\n        this.y += incY;\r\n    }\r\n\r\n    public setPosition(initX : number, initY : number) : void {\r\n        this.x = initX;\r\n        this.y = initY;\r\n    }\r\n}","import {SceneObject} from '../SceneObject'\r\nimport {AnimatedSpriteType} from './AnimatedSpriteType'\r\nimport { Vector3 } from '../../math/Vector3';\r\n\r\nexport class AnimatedSprite extends SceneObject {\r\n    private spriteType : AnimatedSpriteType;\r\n    private type : string;\r\n    private state : string;\r\n    private animationFrameIndex : number;\r\n    private frameCounter : number;\r\n\r\n    private movetime : number = 0;\r\n    private randomInterval : number = Math.floor(Math.random() * 60);\r\n    private direction : number;\r\n    private initPosition : number;\r\n    private newPosition : number;\r\n    \r\n    public constructor(initSpriteType : AnimatedSpriteType, initState : string, type : string) {\r\n        super();\r\n        this.spriteType = initSpriteType;\r\n        this.type = type;\r\n        \r\n        // START RESET\r\n        this.state = initState;\r\n        this.animationFrameIndex = 0;\r\n        this.frameCounter = 0;\r\n    }\r\n\r\n    public getAnimationFrameIndex() : number {\r\n        return this.animationFrameIndex;\r\n    }\r\n\r\n    public getFrameCounter() : number {\r\n        return this.frameCounter;\r\n    }\r\n\r\n    public getSpriteType() : AnimatedSpriteType {\r\n        return this.spriteType;\r\n    }\r\n\r\n    public getType() : string {\r\n        return this.type;\r\n    }\r\n\r\n    public getDirection() : number {\r\n        return this.direction;\r\n    }\r\n\r\n    public getState() : string {\r\n        return this.state;\r\n    }\r\n    \r\n    public setState(initState : string) : void {\r\n        this.state = initState;\r\n        this.animationFrameIndex = 0;\r\n        this.frameCounter = 0;\r\n    }\r\n    \r\n    public update(delta : number) : void {\r\n        this.frameCounter++;\r\n        \r\n        // HAVE WE GONE PAST THE LAST FRAME IN THE ANIMATION?\r\n        var currentAnimation = this.spriteType.getAnimation(this.state);\r\n        var currentFrame = currentAnimation[this.animationFrameIndex];\r\n        if (this.frameCounter > (currentFrame.duration)) {\r\n            this.animationFrameIndex++;\r\n            if (this.animationFrameIndex >= currentAnimation.length) {\r\n                this.animationFrameIndex = 0;\r\n            }\r\n            this.frameCounter = 0;\r\n        }\r\n    }\r\n\r\n    public denkimushiAI() : void {\r\n        let SPEED : number = 10;\r\n        this.movetime++;\r\n\r\n        if(this.movetime > this.randomInterval) {\r\n            this.movetime = 0;\r\n            this.randomInterval = Math.floor(Math.random() * 20);\r\n            this.direction = Math.floor(Math.random() * 5);\r\n        }\r\n\r\n        // Stay Still\r\n        if(this.direction == 0) {\r\n            this.setState(\"IDLE\");\r\n        }\r\n        // Move Up\r\n        else if(this.direction == 1 && this.getPosition().getY() > 0) {\r\n            this.setState(\"WALK\");\r\n            this.getPosition().set(this.getPosition().getX(), this.getPosition().getY() - SPEED, 0, 1);\r\n        }\r\n        // Move Right\r\n        else if(this.direction == 2 && this.getPosition().getX() + this.getSpriteType().getSpriteWidth() < 3200) {\r\n            this.setState(\"WALK\");\r\n            this.getPosition().set(this.getPosition().getX() + SPEED, this.getPosition().getY(), 0, 1);\r\n        }\r\n        // Move Down\r\n        else if(this.direction == 3 && this.getPosition().getY() + this.getSpriteType().getSpriteHeight() < 3200) {\r\n            this.setState(\"WALK\");\r\n            this.getPosition().set(this.getPosition().getX(), this.getPosition().getY() + SPEED, 0, 1);\r\n        }\r\n        // Move Left\r\n        else if(this.direction == 4 && this.getPosition().getX() > 0) {\r\n            this.setState(\"WALK\");\r\n            this.getPosition().set(this.getPosition().getX() - SPEED, this.getPosition().getY(), 0, 1);\r\n        }\r\n    }\r\n\r\n    public ladybugAI() : void {\r\n        let SPEED : number = 10;\r\n        this.movetime++;\r\n\r\n        if(this.direction == null) {\r\n            this.direction = Math.random() <= 0.5 ? -1 : 1;\r\n        }\r\n\r\n        if(this.movetime > this.randomInterval) {\r\n            this.movetime = 0;\r\n            this.direction = this.direction * -1;\r\n        }\r\n\r\n        // Stay Still\r\n        if(this.direction == 0) {\r\n            this.setState(\"IDLE\");\r\n        }\r\n        // Move Right\r\n        else if(this.direction == 1 && this.getPosition().getX() + this.getSpriteType().getSpriteWidth() < 3200) {\r\n            this.setState(\"WALKING\");\r\n            this.getPosition().set(this.getPosition().getX() + SPEED, this.getPosition().getY(), 0, 1);\r\n        }\r\n        // Move Left\r\n        else if(this.direction == -1 && this.getPosition().getX() > 0) {\r\n            this.setState(\"WALKING\");\r\n            this.getPosition().set(this.getPosition().getX() - SPEED, this.getPosition().getY(), 0, 1);\r\n        }\r\n\r\n    }\r\n\r\n    public contains(pointX : number, pointY : number) : boolean {\r\n        let spriteWidth = this.getSpriteType().getSpriteWidth();\r\n        let spriteHeight = this.getSpriteType().getSpriteHeight();\r\n        let spriteLeft = this.getPosition().getX();\r\n        let spriteRight = this.getPosition().getX() + spriteWidth;\r\n        let spriteTop = this.getPosition().getY();\r\n        let spriteBottom = this.getPosition().getY() + spriteHeight;\r\n        if (    (pointX < spriteLeft)\r\n            ||  (spriteRight < pointX)\r\n            ||  (pointY < spriteTop)\r\n            ||  (spriteBottom < pointY)) {\r\n                return false;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n    \r\n    /**RENAME THIS METHOD SO IT DENOTES PIXEL LOCATION IN TEXTURE */\r\n    public getLeft() : number {\r\n        return this.spriteType.getLeft(this.state, this.animationFrameIndex);\r\n    }\r\n    \r\n    public getTop() : number {\r\n        return this.spriteType.getTop(this.state, this.animationFrameIndex);\r\n    }\r\n\r\n    public toString() : string {\r\n        let summary : string =  \"{ position: (\"\r\n                            +   this.getPosition().getX() + \", \" + this.getPosition().getY() + \") \"\r\n                            +   \"(state: \" + this.getState() + \") \"\r\n                            +   \"(animationFrameIndex: \" + this.getAnimationFrameIndex() + \") \"\r\n                            +   \"(frameCounter: \" + this.getFrameCounter() + \") \";\r\n        return summary;\r\n    }\r\n}","import {WebGLGameTexture} from '../../rendering/WebGLGameTexture'\r\n\r\nexport class AnimationFrame {\r\n    public left : number;\r\n    public top : number;\r\n    public duration : number;\r\n\r\n    constructor(initLeft : number, initTop : number, initDuration : number) {\r\n        this.left = initLeft;\r\n        this.top = initTop;\r\n        this.duration = initDuration;\r\n    }\r\n}\r\n\r\nexport class AnimatedSpriteType {\r\n    private spriteSheetTexture : WebGLGameTexture;\r\n    private animations : Map<string, Array<AnimationFrame>>;\r\n    private spriteWidth : number;\r\n    private spriteHeight : number;\r\n\r\n    public constructor(initSpriteSheetTexture : WebGLGameTexture, \r\n                initSpriteWidth : number, initSpriteHeight : number) {\r\n        this.spriteSheetTexture = initSpriteSheetTexture;\r\n        this.animations = new Map();\r\n        this.spriteWidth = initSpriteWidth;\r\n        this.spriteHeight = initSpriteHeight;\r\n    }\r\n\r\n    public addAnimation(state : string) : void {\r\n        this.animations.set(state, new Array<AnimationFrame>());\r\n    }\r\n\r\n    public addAnimationFrame(state : string, index : number, frameDuration : number) : void {\r\n        var columns = this.spriteSheetTexture.width/this.spriteWidth;\r\n        var rows = this.spriteSheetTexture.height/this.spriteHeight;\r\n        var col = index % columns;\r\n        var row = Math.floor(index /  columns);\r\n        var left = col * this.spriteWidth;\r\n        var top = row * this.spriteHeight;\r\n        this.animations.get(state).push(new AnimationFrame(left, top, frameDuration));\r\n    }\r\n\r\n    public getSpriteWidth() : number {\r\n        return this.spriteWidth;\r\n    }\r\n\r\n    public getSpriteHeight() : number {\r\n        return this.spriteHeight;\r\n    }\r\n\r\n    public getSpriteSheetTexture() : WebGLGameTexture {\r\n        return this.spriteSheetTexture;\r\n    }\r\n\r\n    public getAnimation(state : string) : Array<AnimationFrame> {\r\n        return this.animations.get(state);\r\n    }\r\n\r\n    public getLeft(state : string, frameIndex : number) : number {\r\n        let animationFrame : AnimationFrame = this.animations.get(state)[frameIndex];\r\n        return animationFrame.left;\r\n    }\r\n\r\n    public getTop(state : string, frameIndex : number) : number {\r\n        let animationFrame : AnimationFrame = this.animations.get(state)[frameIndex];\r\n        return animationFrame.top;\r\n    }\r\n}","import { WebGLGameTexture } from \"../../rendering/WebGLGameTexture\";\r\n\r\nexport class TileSet {\r\n    private name : string;\r\n    private columns : number;\r\n    private rows : number;\r\n    private tileWidth : number;\r\n    private tileHeight : number;\r\n    private tileSpacing : number;\r\n    private tileSheetWidth : number;\r\n    private tileSheetHeight : number;\r\n    private firstIndex : number;\r\n    private texture : WebGLGameTexture;\r\n\r\n    constructor(initName : string, \r\n                initColumns : number,\r\n                initRows : number,\r\n                initTileWidth : number,\r\n                initTileHeight : number,\r\n                initTileSpacing : number,\r\n                initTileSheetWidth : number,\r\n                initTileSheetHeight : number,\r\n                initFirstIndex : number,\r\n                initTexture : WebGLGameTexture) {\r\n        this.name = initName;\r\n        this.columns = initColumns;\r\n        this.rows = initRows;\r\n        this.tileWidth = initTileWidth;\r\n        this.tileHeight = initTileHeight;\r\n        this.tileSpacing = initTileSpacing;\r\n        this.tileSheetWidth = initTileSheetWidth;\r\n        this.tileSheetHeight = initTileSheetHeight;\r\n        this.firstIndex = initFirstIndex;\r\n        this.texture = initTexture;\r\n    }\r\n\r\n    public getName() : string {\r\n        return this.name;\r\n    }\r\n\r\n    public getColumns() : number {\r\n        return this.columns;\r\n    }\r\n\r\n    public getRows() : number { \r\n        return this.rows;\r\n    }\r\n\r\n    public getTileWidth() : number {\r\n        return this.tileWidth;\r\n    }\r\n\r\n    public getTileHeight() : number {\r\n        return this.tileHeight;\r\n    }\r\n\r\n    public getTileSpacing() : number {\r\n        return this.tileSpacing;\r\n    }\r\n\r\n    public getTileSheetWidth() : number {\r\n        return this.tileSheetWidth;\r\n    }\r\n\r\n    public getTileSheetHeight() : number {\r\n        return this.tileSheetHeight;\r\n    }\r\n\r\n    public getFirstIndex() : number {\r\n        return this.firstIndex;\r\n    }\r\n\r\n    public getTexture() : WebGLGameTexture {\r\n        return this.texture;\r\n    }\r\n}","import { TileSet } from \"./TileSet\";\r\n\r\nexport class TiledLayer {\r\n    private collidable : boolean;\r\n    private tiles : Array<number>;\r\n    private columns : number;\r\n    private rows : number;\r\n    private tileSet : TileSet;\r\n    \r\n    // WE WILL STORE RENDERING-SPECIFIC DATA HERE\r\n    private renderData : object;\r\n\r\n    constructor(initColumns : number,\r\n                initRows : number,\r\n                initTileSet : TileSet) {\r\n        this.tiles = new Array();\r\n        this.columns = initColumns;\r\n        this.rows = initRows;\r\n        this.tileSet = initTileSet;\r\n    }\r\n\r\n    public setRenderData(initRenderData : object) : void {\r\n        this.renderData = initRenderData;\r\n    }\r\n\r\n    public getRenderData() : object {\r\n        return this.renderData;\r\n    }\r\n\r\n    public getMinimumVisibleColumn(viewportLeft : number) : number {\r\n        return (viewportLeft / this.tileSet.getTileWidth());\r\n    }\r\n\r\n    public getMaximumVisibleColumn(viewportRight : number) : number {\r\n        return (viewportRight / this.tileSet.getTileWidth());\r\n    }\r\n\r\n    public getMinimumVisibleRow(viewportTop : number) : number {\r\n        return (viewportTop / this.tileSet.getTileHeight());\r\n    }\r\n\r\n    public getMaximumVisibleRow(viewportBottom : number) : number {\r\n        return (viewportBottom / this.tileSet.getTileHeight());\r\n    }\r\n\r\n    public getNumCells() : number {\r\n        return this.columns * this.rows;\r\n    }\r\n\r\n    public getColumns() : number {\r\n        return this.columns;\r\n    }\r\n\r\n    public getRows() : number {\r\n        return this.rows;\r\n    }\r\n\r\n    public getTileSet() : TileSet {\r\n        return this.tileSet;\r\n    }\r\n\r\n    public isCollidable() : boolean {\r\n        return this.collidable;\r\n    }\r\n\r\n    public addTile(tileSetCellIndex : number) : void {\r\n        this.tiles.push(tileSetCellIndex);\r\n    }\r\n\r\n    public setTile(column : number, row : number, tileSetCellIndex : number) {\r\n        let tileIndex : number = this.getTileIndex(column, row);\r\n        this.tiles[tileIndex] = tileSetCellIndex;\r\n    }\r\n\r\n    public getTileIndex(column : number, row : number) : number {\r\n        return (row * this.columns) + column;\r\n    }\r\n\r\n    public getTileSetCellIndex(column : number, row : number) : number {\r\n        let tileIndex : number = this.getTileIndex(column, row);\r\n        return this.tiles[tileIndex];\r\n    }\r\n\r\n    public getTile(column : number, row : number) : number {\r\n        let index = this.getTileIndex(column, row);\r\n        return this.tiles[index];\r\n    }\r\n}","/*\r\n * This provides responses to UI input.\r\n */\r\nimport {AnimatedSprite} from \"../scene/sprite/AnimatedSprite\"\r\nimport {SceneGraph} from \"../scene/SceneGraph\"\r\n\r\nexport class UIController {\r\n    private spriteToDrag : AnimatedSprite;\r\n    private scene : SceneGraph;\r\n    private dragOffsetX : number;\r\n    private dragOffsetY : number;\r\n\r\n    public constructor(canvasId : string, initScene : SceneGraph) {\r\n        this.spriteToDrag = null;\r\n        this.scene = initScene;\r\n        this.dragOffsetX = -1;\r\n        this.dragOffsetY = -1;\r\n\r\n        let canvas : HTMLCanvasElement = <HTMLCanvasElement>document.getElementById(canvasId);\r\n        canvas.addEventListener(\"mousedown\", this.mouseDownHandler);\r\n        canvas.addEventListener(\"mousemove\", this.mouseMoveHandler);\r\n        canvas.addEventListener(\"mouseup\", this.mouseUpHandler);\r\n        document.addEventListener(\"keydown\", this.keyboardHandler);\r\n    }\r\n\r\n    public mouseDownHandler = (event : MouseEvent) : void => {\r\n        let mousePressX : number = event.clientX;\r\n        let mousePressY : number = event.clientY;\r\n        let sprite : AnimatedSprite = this.scene.getSpriteAt(mousePressX, mousePressY);\r\n        console.log(\"mousePressX: \" + mousePressX);\r\n        console.log(\"mousePressY: \" + mousePressY);\r\n        console.log(\"sprite: \" + sprite);\r\n        if (sprite != null) {\r\n            // START DRAGGING IT\r\n            this.spriteToDrag = sprite;\r\n            this.dragOffsetX = sprite.getPosition().getX() - mousePressX;\r\n            this.dragOffsetY = sprite.getPosition().getY() - mousePressY;\r\n        }\r\n    }\r\n    \r\n    public mouseMoveHandler = (event : MouseEvent) : void => {\r\n        if (this.spriteToDrag != null) {\r\n            this.spriteToDrag.getPosition().set(event.clientX + this.dragOffsetX, \r\n                                                event.clientY + this.dragOffsetY, \r\n                                                this.spriteToDrag.getPosition().getZ(), \r\n                                                this.spriteToDrag.getPosition().getW());\r\n        }\r\n    }\r\n\r\n    public mouseUpHandler = (event : MouseEvent) : void => {\r\n        this.spriteToDrag = null;\r\n    }\r\n\r\n    public keyboardHandler = (event : KeyboardEvent) : void => {\r\n        if(event.key == 'w' && this.scene.getViewport().getY() > 0) {\r\n            this.scene.getViewport().inc(0, -100);\r\n        }\r\n        if(event.key == 'a' && this.scene.getViewport().getX() > 0) {\r\n            this.scene.getViewport().inc(-100, 0);\r\n        }\r\n        if(event.key == 's') {\r\n            this.scene.getViewport().inc(0, 100);\r\n        }\r\n        if(event.key == 'd') {\r\n            this.scene.getViewport().inc(100, 0);\r\n        }\r\n    }\r\n}"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvdGlsZWRfc2Nyb2xsaW5nX2RlbW8vVGlsZWRTY3JvbGxpbmdEZW1vLnRzIiwic3JjL3dvbGZpZTJkL0dhbWUudHMiLCJzcmMvd29sZmllMmQvZmlsZXMvUmVzb3VyY2VNYW5hZ2VyLnRzIiwic3JjL3dvbGZpZTJkL2xvb3AvR2FtZUxvb3BUZW1wbGF0ZS50cyIsInNyYy93b2xmaWUyZC9tYXRoL01hdGhVdGlsaXRpZXMudHMiLCJzcmMvd29sZmllMmQvbWF0aC9NYXRyaXgudHMiLCJzcmMvd29sZmllMmQvbWF0aC9WZWN0b3IzLnRzIiwic3JjL3dvbGZpZTJkL3JlbmRlcmluZy9UZXh0UmVuZGVyZXIudHMiLCJzcmMvd29sZmllMmQvcmVuZGVyaW5nL1dlYkdMR2FtZVJlbmRlcmluZ0NvbXBvbmVudC50cyIsInNyYy93b2xmaWUyZC9yZW5kZXJpbmcvV2ViR0xHYW1lUmVuZGVyaW5nU3lzdGVtLnRzIiwic3JjL3dvbGZpZTJkL3JlbmRlcmluZy9XZWJHTEdhbWVTaGFkZXIudHMiLCJzcmMvd29sZmllMmQvcmVuZGVyaW5nL1dlYkdMR2FtZVNwcml0ZVJlbmRlcmVyLnRzIiwic3JjL3dvbGZpZTJkL3JlbmRlcmluZy9XZWJHTEdhbWVUZXh0dXJlLnRzIiwic3JjL3dvbGZpZTJkL3JlbmRlcmluZy9XZWJHTEdhbWVUaWxlZExheWVyUmVuZGVyZXIudHMiLCJzcmMvd29sZmllMmQvc2NlbmUvU2NlbmVHcmFwaC50cyIsInNyYy93b2xmaWUyZC9zY2VuZS9TY2VuZU9iamVjdC50cyIsInNyYy93b2xmaWUyZC9zY2VuZS9WaWV3cG9ydC50cyIsInNyYy93b2xmaWUyZC9zY2VuZS9zcHJpdGUvQW5pbWF0ZWRTcHJpdGUudHMiLCJzcmMvd29sZmllMmQvc2NlbmUvc3ByaXRlL0FuaW1hdGVkU3ByaXRlVHlwZS50cyIsInNyYy93b2xmaWUyZC9zY2VuZS90aWxlcy9UaWxlU2V0LnRzIiwic3JjL3dvbGZpZTJkL3NjZW5lL3RpbGVzL1RpbGVkTGF5ZXIudHMiLCJzcmMvd29sZmllMmQvdWkvVUlDb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FDQUE7Ozs7QUFJQSxJQUFBLFNBQUEsUUFBQSxrQkFBQSxDQUFBO0FBQ0EsSUFBQSxtQkFBQSxRQUFBLHlDQUFBLENBQUE7QUFLQSxJQUFBLGlCQUFBLFFBQUEsb0NBQUEsQ0FBQTtBQUVBO0FBQ0E7QUFDQSxJQUFJLE9BQU8sSUFBSSxPQUFBLElBQUosQ0FBUyxhQUFULEVBQXdCLGFBQXhCLENBQVg7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQU0sb0JBQW9CLHdDQUExQjtBQUNBLEtBQUssa0JBQUwsR0FBMEIsU0FBMUIsQ0FBb0MsaUJBQXBDLEVBQ29DLEtBQUssYUFBTCxFQURwQyxFQUVvQyxLQUFLLGtCQUFMLEVBRnBDLEVBR29DLFlBQUE7QUFDaEM7QUFDQTtBQUNBLFFBQUksUUFBdUIsS0FBSyxhQUFMLEdBQXFCLGNBQXJCLEVBQTNCO0FBQ0EsUUFBSSxhQUFzQixNQUFNLENBQU4sRUFBUyxVQUFULEtBQXdCLE1BQU0sQ0FBTixFQUFTLFVBQVQsR0FBc0IsWUFBdEIsRUFBbEQ7QUFDQSxRQUFJLGNBQXVCLE1BQU0sQ0FBTixFQUFTLE9BQVQsS0FBcUIsTUFBTSxDQUFOLEVBQVMsVUFBVCxHQUFzQixhQUF0QixFQUFoRDtBQUNBLFNBQUssSUFBSSxJQUFJLENBQWIsRUFBZ0IsSUFBSSxFQUFwQixFQUF3QixHQUF4QixFQUE2QjtBQUN6QixZQUFJLE9BQTRCLEtBQUssa0JBQUwsR0FBMEIscUJBQTFCLENBQWdELGFBQWhELENBQWhDO0FBQ0EsWUFBSSxlQUFnQyxJQUFJLGlCQUFBLGNBQUosQ0FBbUIsSUFBbkIsRUFBeUIsTUFBekIsRUFBaUMsYUFBakMsQ0FBcEM7QUFDQSxZQUFJLFVBQW1CLEtBQUssTUFBTCxLQUFnQixVQUF2QztBQUNBLFlBQUksVUFBbUIsS0FBSyxNQUFMLEtBQWdCLFdBQXZD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QU4sSUFBYSxHQUFiLElBQW9CLE1BQUssS0FBTCxDQUFXLFdBQVgsR0FBeUIsSUFBekIsS0FBa0MsQ0FBekQsRUFBNEQ7QUFDeEQsa0JBQUssS0FBTCxDQUFXLFdBQVgsR0FBeUIsR0FBekIsQ0FBNkIsQ0FBQyxHQUE5QixFQUFtQyxDQUFuQztBQUNIO0FBQ0QsWUFBRyxNQUFNLEdBQU4sSUFBYSxHQUFoQixFQUFxQjtBQUNqQixrQkFBSyxLQUFMLENBQVcsV0FBWCxHQUF5QixHQUF6QixDQUE2QixDQUE3QixFQUFnQyxHQUFoQztBQUNIO0FBQ0QsWUFBRyxNQUFNLEdBQU4sSUFBYSxHQUFoQixFQUFxQjtBQUNqQixrQkFBSyxLQUFMLENBQVcsV0FBWCxHQUF5QixHQUF6QixDQUE2QixHQUE3QixFQUFrQyxDQUFsQztBQUNIO0FBQ0osS0FiTTtBQXhDSCxTQUFLLFlBQUwsR0FBb0IsSUFBcEI7QUFDQSxTQUFLLEtBQUwsR0FBYSxTQUFiO0FBQ0EsU0FBSyxXQUFMLEdBQW1CLENBQUMsQ0FBcEI7QUFDQSxTQUFLLFdBQUwsR0FBbUIsQ0FBQyxDQUFwQjtBQUVBLFFBQUksU0FBZ0QsU0FBUyxjQUFULENBQXdCLFFBQXhCLENBQXBEO0FBQ0EsV0FBTyxnQkFBUCxDQUF3QixXQUF4QixFQUFxQyxLQUFLLGdCQUExQztBQUNBLFdBQU8sZ0JBQVAsQ0FBd0IsV0FBeEIsRUFBcUMsS0FBSyxnQkFBMUM7QUFDQSxXQUFPLGdCQUFQLENBQXdCLFNBQXhCLEVBQW1DLEtBQUssY0FBeEM7QUFDQSxhQUFTLGdCQUFULENBQTBCLFNBQTFCLEVBQXFDLEtBQUssZUFBMUM7QUFDSCxDOztBQWpCTCxRQUFBLFlBQUEsR0FBQSxZQUFBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXtmdW5jdGlvbiByKGUsbix0KXtmdW5jdGlvbiBvKGksZil7aWYoIW5baV0pe2lmKCFlW2ldKXt2YXIgYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFmJiZjKXJldHVybiBjKGksITApO2lmKHUpcmV0dXJuIHUoaSwhMCk7dmFyIGE9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitpK1wiJ1wiKTt0aHJvdyBhLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsYX12YXIgcD1uW2ldPXtleHBvcnRzOnt9fTtlW2ldWzBdLmNhbGwocC5leHBvcnRzLGZ1bmN0aW9uKHIpe3ZhciBuPWVbaV1bMV1bcl07cmV0dXJuIG8obnx8cil9LHAscC5leHBvcnRzLHIsZSxuLHQpfXJldHVybiBuW2ldLmV4cG9ydHN9Zm9yKHZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsaT0wO2k8dC5sZW5ndGg7aSsrKW8odFtpXSk7cmV0dXJuIG99cmV0dXJuIHJ9KSgpIiwiLypcclxuICogVGlsZWRTY3JvbGxpbmdEZW1vLnRzIC0gZGVtb25zdHJhdGVzIGhvdyB0aWxlZCBsYXllcnMgY2FuIGJlIHJlbmRlcmVkXHJcbiAqIGFuZCBzY3JvbGxlZCB1c2luZyBhIHZpZXdwb3J0LiBcclxuICovXHJcbmltcG9ydCB7R2FtZX0gZnJvbSAnLi4vd29sZmllMmQvR2FtZSdcclxuaW1wb3J0IHtBbmltYXRlZFNwcml0ZX0gZnJvbSAnLi4vd29sZmllMmQvc2NlbmUvc3ByaXRlL0FuaW1hdGVkU3ByaXRlJ1xyXG5pbXBvcnQge0FuaW1hdGVkU3ByaXRlVHlwZX0gZnJvbSAnLi4vd29sZmllMmQvc2NlbmUvc3ByaXRlL0FuaW1hdGVkU3ByaXRlVHlwZSdcclxuaW1wb3J0IHtUaWxlZExheWVyfSBmcm9tICcuLi93b2xmaWUyZC9zY2VuZS90aWxlcy9UaWxlZExheWVyJ1xyXG5pbXBvcnQge1NjZW5lR3JhcGh9IGZyb20gJy4uL3dvbGZpZTJkL3NjZW5lL1NjZW5lR3JhcGgnXHJcbmltcG9ydCB7Vmlld3BvcnR9IGZyb20gJy4uL3dvbGZpZTJkL3NjZW5lL1ZpZXdwb3J0J1xyXG5pbXBvcnQge1RleHRUb1JlbmRlciwgVGV4dFJlbmRlcmVyfSBmcm9tICcuLi93b2xmaWUyZC9yZW5kZXJpbmcvVGV4dFJlbmRlcmVyJ1xyXG5cclxuLy8gVEhJUyBJUyBUSEUgRU5UUlkgUE9JTlQgSU5UTyBPVVIgQVBQTElDQVRJT04sIFdFIE1BS0VcclxuLy8gVEhFIEdhbWUgT0JKRUNUIEFORCBJTklUSUFMSVpFIElUIFdJVEggVEhFIENBTlZBU0VTXHJcbmxldCBnYW1lID0gbmV3IEdhbWUoXCJnYW1lX2NhbnZhc1wiLCBcInRleHRfY2FudmFzXCIpO1xyXG5cclxuLy8gV0UgVEhFTiBMT0FEIE9VUiBHQU1FIFNDRU5FLCBXSElDSCBXSUxMIEZJUlNUIExPQURcclxuLy8gQUxMIEdBTUUgUkVTT1VSQ0VTLCBUSEVOIENSRUFURSBBTEwgU0hBREVSUyBGT1JcclxuLy8gUkVOREVSSU5HLCBBTkQgVEhFTiBQTEFDRSBBTEwgR0FNRSBPQkpFQ1RTIElOIFRIRSBTQ0VORS5cclxuLy8gT05DRSBJVCBJUyBDT01QTEVURUQgV0UgQ0FOIFNUQVJUIFRIRSBHQU1FXHJcbmNvbnN0IERFU0VSVF9TQ0VORV9QQVRIID0gXCJyZXNvdXJjZXMvc2NlbmVzL1Njcm9sbGFibGVEZXNlcnQuanNvblwiO1xyXG5nYW1lLmdldFJlc291cmNlTWFuYWdlcigpLmxvYWRTY2VuZShERVNFUlRfU0NFTkVfUEFUSCwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhbWUuZ2V0U2NlbmVHcmFwaCgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYW1lLmdldFJlbmRlcmluZ1N5c3RlbSgpLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oKSB7XHJcbiAgICAvLyBBREQgQU5ZIENVU1RPTSBTVFVGRiBXRSBORUVEIEhFUkUsIExJS0UgVEVYVCBSRU5ERVJJTkdcclxuICAgIC8vIExFVCdTIEFERCBBIEJVTkNIIE9GIFJBTkRPTSBTUFJJVEVTXHJcbiAgICBsZXQgd29ybGQgOiBUaWxlZExheWVyW10gPSBnYW1lLmdldFNjZW5lR3JhcGgoKS5nZXRUaWxlZExheWVycygpO1xyXG4gICAgbGV0IHdvcmxkV2lkdGggOiBudW1iZXIgPSB3b3JsZFswXS5nZXRDb2x1bW5zKCkgKiB3b3JsZFswXS5nZXRUaWxlU2V0KCkuZ2V0VGlsZVdpZHRoKCk7XHJcbiAgICBsZXQgd29ybGRIZWlnaHQgOiBudW1iZXIgPSB3b3JsZFswXS5nZXRSb3dzKCkgKiB3b3JsZFswXS5nZXRUaWxlU2V0KCkuZ2V0VGlsZUhlaWdodCgpO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCA1MDsgaSsrKSB7XHJcbiAgICAgICAgbGV0IHR5cGUgOiBBbmltYXRlZFNwcml0ZVR5cGUgPSBnYW1lLmdldFJlc291cmNlTWFuYWdlcigpLmdldEFuaW1hdGVkU3ByaXRlVHlwZShcIkRFTktJTVVTSEkyXCIpO1xyXG4gICAgICAgIGxldCByYW5kb21TcHJpdGUgOiBBbmltYXRlZFNwcml0ZSA9IG5ldyBBbmltYXRlZFNwcml0ZSh0eXBlLCBcIldBTEtcIiwgXCJERU5LSU1VU0hJMlwiKTtcclxuICAgICAgICBsZXQgcmFuZG9tWCA6IG51bWJlciA9IE1hdGgucmFuZG9tKCkgKiB3b3JsZFdpZHRoO1xyXG4gICAgICAgIGxldCByYW5kb21ZIDogbnVtYmVyID0gTWF0aC5yYW5kb20oKSAqIHdvcmxkSGVpZ2h0O1xyXG4gICAgICAgIHJhbmRvbVNwcml0ZS5nZXRQb3NpdGlvbigpLnNldChyYW5kb21YLCByYW5kb21ZLCAwLCAxKTtcclxuICAgICAgICBnYW1lLmdldFNjZW5lR3JhcGgoKS5hZGRBbmltYXRlZFNwcml0ZShyYW5kb21TcHJpdGUpO1xyXG4gICAgfVxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCA1MDsgaSsrKSB7XHJcbiAgICAgICAgbGV0IHR5cGUgOiBBbmltYXRlZFNwcml0ZVR5cGUgPSBnYW1lLmdldFJlc291cmNlTWFuYWdlcigpLmdldEFuaW1hdGVkU3ByaXRlVHlwZShcIkxBRFlCVUdcIik7XHJcbiAgICAgICAgbGV0IHJhbmRvbVNwcml0ZSA6IEFuaW1hdGVkU3ByaXRlID0gbmV3IEFuaW1hdGVkU3ByaXRlKHR5cGUsIFwiV0FMS0lOR1wiLCBcIkxBRFlCVUdcIik7XHJcbiAgICAgICAgbGV0IHJhbmRvbVggOiBudW1iZXIgPSBNYXRoLnJhbmRvbSgpICogd29ybGRXaWR0aDtcclxuICAgICAgICBsZXQgcmFuZG9tWSA6IG51bWJlciA9IE1hdGgucmFuZG9tKCkgKiB3b3JsZEhlaWdodDtcclxuICAgICAgICByYW5kb21TcHJpdGUuZ2V0UG9zaXRpb24oKS5zZXQocmFuZG9tWCwgcmFuZG9tWSwgMCwgMSk7XHJcbiAgICAgICAgZ2FtZS5nZXRTY2VuZUdyYXBoKCkuYWRkQW5pbWF0ZWRTcHJpdGUocmFuZG9tU3ByaXRlKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBOT1cgQUREIFRFWFQgUkVOREVSSU5HLiBXRSBBUkUgR09JTkcgVE8gUkVOREVSIDMgVEhJTkdTOlxyXG4gICAgICAgIC8vIE5VTUJFUiBPRiBTUFJJVEVTIElOIFRIRSBTQ0VORVxyXG4gICAgICAgIC8vIExPQ0FUSU9OIElOIEdBTUUgV09STEQgT0YgVklFV1BPUlRcclxuICAgICAgICAvLyBOVU1CRVIgT0YgU1BSSVRFUyBJTiBWSVNJQkxFIFNFVCAoaS5lLiBJTiBUSEUgVklFV1BPUlQpXHJcbiAgICBsZXQgc2NlbmVHcmFwaCA6IFNjZW5lR3JhcGggPSBnYW1lLmdldFNjZW5lR3JhcGgoKTtcclxuICAgIGxldCBzcHJpdGVzSW5TY2VuZVRleHQgOiBUZXh0VG9SZW5kZXIgPSBuZXcgVGV4dFRvUmVuZGVyKFwiU3ByaXRlcyBpbiBTY2VuZVwiLCBcIlwiLCAyMCwgNTAsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHNwcml0ZXNJblNjZW5lVGV4dC50ZXh0ID0gXCJTcHJpdGVzIGluIFNjZW5lOiBcIiArIHNjZW5lR3JhcGguZ2V0TnVtU3ByaXRlcygpO1xyXG4gICAgfSk7XHJcbiAgICBsZXQgdmlld3BvcnRUZXh0IDogVGV4dFRvUmVuZGVyID0gbmV3IFRleHRUb1JlbmRlcihcIlZpZXdwb3J0XCIsIFwiXCIsIDIwLCA3MCwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgbGV0IHZpZXdwb3J0IDogVmlld3BvcnQgPSBzY2VuZUdyYXBoLmdldFZpZXdwb3J0KCk7XHJcbiAgICAgICAgdmlld3BvcnRUZXh0LnRleHQgPSBcIlZpZXdwb3J0ICh3LCBoLCB4LCB5KTogKFwiICArIHZpZXdwb3J0LmdldFdpZHRoKCkgKyBcIiwgXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIHZpZXdwb3J0LmdldEhlaWdodCgpICsgXCIsIFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyB2aWV3cG9ydC5nZXRYKCkgKyBcIiwgXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIHZpZXdwb3J0LmdldFkoKSArIFwiKVwiO1xyXG4gICAgfSk7XHJcbiAgICBsZXQgc3ByaXRlc0luVmlld3BvcnRUZXh0IDogVGV4dFRvUmVuZGVyID0gbmV3IFRleHRUb1JlbmRlcihcIlNwcml0ZXMgaW4gVmlld3BvcnRcIiwgXCJcIiwgMjAsIDkwLCBmdW5jdGlvbigpIHtcclxuICAgICAgICBzcHJpdGVzSW5WaWV3cG9ydFRleHQudGV4dCA9IFwiU3ByaXRlcyBpbiBWaWV3cG9ydDogXCIgKyBzY2VuZUdyYXBoLnNjb3BlKCkubGVuZ3RoO1xyXG4gICAgfSk7XHJcbiAgICBsZXQgd29ybGREaW1lbnNpb25zVGV4dCA6IFRleHRUb1JlbmRlciA9IG5ldyBUZXh0VG9SZW5kZXIoXCJXb3JsZCBEaW1lbnNpb25zXCIsIFwiXCIsIDIwLCAxMTAsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHdvcmxkRGltZW5zaW9uc1RleHQudGV4dCA9IFwiV29ybGQgRGltZW5zaW9ucyAodywgaCk6IChcIiArIHdvcmxkV2lkdGggKyBcIiwgXCIgKyB3b3JsZEhlaWdodCArIFwiKVwiO1xyXG4gICAgfSk7XHJcbiAgICBsZXQgdGV4dFJlbmRlcmVyID0gZ2FtZS5nZXRSZW5kZXJpbmdTeXN0ZW0oKS5nZXRUZXh0UmVuZGVyZXIoKTtcclxuICAgIHRleHRSZW5kZXJlci5hZGRUZXh0VG9SZW5kZXIoc3ByaXRlc0luU2NlbmVUZXh0KTtcclxuICAgIHRleHRSZW5kZXJlci5hZGRUZXh0VG9SZW5kZXIodmlld3BvcnRUZXh0KTtcclxuICAgIHRleHRSZW5kZXJlci5hZGRUZXh0VG9SZW5kZXIoc3ByaXRlc0luVmlld3BvcnRUZXh0KTtcclxuICAgIHRleHRSZW5kZXJlci5hZGRUZXh0VG9SZW5kZXIod29ybGREaW1lbnNpb25zVGV4dCk7XHJcblxyXG4gICAgLy8gQU5EIFNUQVJUIFRIRSBHQU1FIExPT1BcclxuICAgIGdhbWUuc3RhcnQoKTtcclxufSk7IiwiLypcclxuICogR2FtZSBpcyB0aGUgZm9jYWwgcG9pbnQgb2YgdGhlIGFwcGxpY2F0aW9uLCBpdCBoYXMgNCBzdWJzeXN0ZW1zLFxyXG4gKiB0aGUgcmVzb3VyY2UgbWFuYWdlciwgdGhlIHNjZW5lIGdyYXBoLCB0aGUgcmVuZGVyaW5nIHN5c3RlbSwgYW5kXHJcbiAqIHRoZSBVSSBjb250cm9sbGVyLiBJbiBhZGRpdGlvbiBpdCBzZXJ2ZXMgYXMgdGhlIGdhbWUgbG9vcCwgcHJvdmlkaW5nXHJcbiAqIGJvdGggYW4gdXBkYXRlIGFuZCBkcmF3IGZ1bmN0aW9uIHRoYXQgaXMgY2FsbGVkIG9uIGEgc2NoZWR1bGUuXHJcbiAqL1xyXG5pbXBvcnQge0dhbWVMb29wVGVtcGxhdGV9IGZyb20gJy4vbG9vcC9HYW1lTG9vcFRlbXBsYXRlJ1xyXG5pbXBvcnQge1dlYkdMR2FtZVJlbmRlcmluZ1N5c3RlbX0gZnJvbSAnLi9yZW5kZXJpbmcvV2ViR0xHYW1lUmVuZGVyaW5nU3lzdGVtJ1xyXG5pbXBvcnQge1NjZW5lR3JhcGh9IGZyb20gJy4vc2NlbmUvU2NlbmVHcmFwaCdcclxuaW1wb3J0IHtBbmltYXRlZFNwcml0ZX0gZnJvbSAnLi9zY2VuZS9zcHJpdGUvQW5pbWF0ZWRTcHJpdGUnXHJcbmltcG9ydCB7VGlsZWRMYXllcn0gZnJvbSAnLi9zY2VuZS90aWxlcy9UaWxlZExheWVyJ1xyXG5pbXBvcnQge1Jlc291cmNlTWFuYWdlcn0gZnJvbSAnLi9maWxlcy9SZXNvdXJjZU1hbmFnZXInXHJcbmltcG9ydCB7VUlDb250cm9sbGVyfSBmcm9tICcuL3VpL1VJQ29udHJvbGxlcidcclxuaW1wb3J0IHtWaWV3cG9ydH0gZnJvbSAnLi9zY2VuZS9WaWV3cG9ydCdcclxuXHJcbmV4cG9ydCBjbGFzcyBHYW1lIGV4dGVuZHMgR2FtZUxvb3BUZW1wbGF0ZSB7XHJcbiAgICBwcml2YXRlIHJlc291cmNlTWFuYWdlciA6IFJlc291cmNlTWFuYWdlcjtcclxuICAgIHByaXZhdGUgc2NlbmVHcmFwaCA6IFNjZW5lR3JhcGg7XHJcbiAgICBwcml2YXRlIHJlbmRlcmluZ1N5c3RlbSA6IFdlYkdMR2FtZVJlbmRlcmluZ1N5c3RlbTtcclxuICAgIHByaXZhdGUgdWlDb250cm9sbGVyIDogVUlDb250cm9sbGVyO1xyXG5cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihnYW1lQ2FudmFzSWQgOiBzdHJpbmcsIHRleHRDYW52YXNJZCA6IHN0cmluZykge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgdGhpcy5yZXNvdXJjZU1hbmFnZXI9IG5ldyBSZXNvdXJjZU1hbmFnZXIoKTtcclxuICAgICAgICB0aGlzLnNjZW5lR3JhcGg9IG5ldyBTY2VuZUdyYXBoKCk7XHJcbiAgICAgICAgdGhpcy5yZW5kZXJpbmdTeXN0ZW09IG5ldyBXZWJHTEdhbWVSZW5kZXJpbmdTeXN0ZW0oZ2FtZUNhbnZhc0lkLCB0ZXh0Q2FudmFzSWQpO1xyXG4gICAgICAgIHRoaXMudWlDb250cm9sbGVyID0gbmV3IFVJQ29udHJvbGxlcihnYW1lQ2FudmFzSWQsIHRoaXMuc2NlbmVHcmFwaCk7XHJcblxyXG4gICAgICAgIC8vIE1BS0UgU1VSRSBUSEUgU0NFTkUgR1JBUEgnIFMgVklFV1BPUlQgSVMgUFJPUEVSTFkgU0VUVVBcclxuICAgICAgICBsZXQgdmlld3BvcnRXaWR0aCA6IG51bWJlciA9ICg8SFRNTENhbnZhc0VsZW1lbnQ+ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZ2FtZUNhbnZhc0lkKSkud2lkdGg7XHJcbiAgICAgICAgbGV0IHZpZXdwb3J0SGVpZ2h0IDogbnVtYmVyID0gKDxIVE1MQ2FudmFzRWxlbWVudD5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChnYW1lQ2FudmFzSWQpKS5oZWlnaHQ7XHJcbiAgICAgICAgbGV0IHZpZXdwb3J0IDogVmlld3BvcnQgPSBuZXcgVmlld3BvcnQodmlld3BvcnRXaWR0aCwgdmlld3BvcnRIZWlnaHQpO1xyXG4gICAgICAgIHRoaXMuc2NlbmVHcmFwaC5zZXRWaWV3cG9ydCh2aWV3cG9ydCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldFJlbmRlcmluZ1N5c3RlbSgpIDogV2ViR0xHYW1lUmVuZGVyaW5nU3lzdGVtIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXJpbmdTeXN0ZW07XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldFJlc291cmNlTWFuYWdlcigpIDogUmVzb3VyY2VNYW5hZ2VyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yZXNvdXJjZU1hbmFnZXI7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldFNjZW5lR3JhcGgoKSA6IFNjZW5lR3JhcGgge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNjZW5lR3JhcGg7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGJlZ2luKCkgOiB2b2lkIHtcclxuICAgIH1cclxuXHJcbiAgICAvKlxyXG4gICAgICogVGhpcyBkcmF3cyB0aGUgZ2FtZS4gTm90ZSB0aGF0IHdlIGFyZSBub3QgY3VycmVudGx5IHVzaW5nIHRoZSBcclxuICAgICAqIGludGVycG9sYXRpb24gdmFsdWUsIGJ1dCBjb3VsZCBvbmNlIHBoeXNpY3MgaXMgaW52b2x2ZWQuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBkcmF3KGludGVycG9sYXRpb25QZXJjZW50YWdlIDogbnVtYmVyKSA6IHZvaWQge1xyXG4gICAgICAgIC8vIEdFVCBUSEUgVElMRUQgTEFZRVJTIFRPIFJFTkRFUiBGUk9NIFRIRSBTQ0VORSBHUkFQSFxyXG4gICAgICAgIGxldCB2aXNpYmxlTGF5ZXJzIDogQXJyYXk8VGlsZWRMYXllcj47XHJcbiAgICAgICAgdmlzaWJsZUxheWVycyA9IHRoaXMuc2NlbmVHcmFwaC5nZXRUaWxlZExheWVycygpO1xyXG5cclxuICAgICAgICAvLyBHRVQgVEhFIFZJU0lCTEUgU0VUIEZST00gVEhFIFNDRU5FIEdSQVBIXHJcbiAgICAgICAgbGV0IHZpc2libGVTcHJpdGVzIDogQXJyYXk8QW5pbWF0ZWRTcHJpdGU+O1xyXG4gICAgICAgIHZpc2libGVTcHJpdGVzID0gPEFycmF5PEFuaW1hdGVkU3ByaXRlPj50aGlzLnNjZW5lR3JhcGguc2NvcGUoKTtcclxuXHJcbiAgICAgICAgbGV0IHZpZXdwb3J0IDogVmlld3BvcnQgPSB0aGlzLnNjZW5lR3JhcGguZ2V0Vmlld3BvcnQoKTtcclxuXHJcbiAgICAgICAgLy8gUkVOREVSIFRIRSBWSVNJQkxFIFNFVCwgV0hJQ0ggU0hPVUxEIEFMTCBCRSBSRU5ERVJBQkxFXHJcbiAgICAgICAgdGhpcy5yZW5kZXJpbmdTeXN0ZW0ucmVuZGVyKHZpZXdwb3J0LCB2aXNpYmxlTGF5ZXJzLCB2aXNpYmxlU3ByaXRlcyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBVcGRhdGVzIHRoZSBzY2VuZS5cclxuICAgICAqL1xyXG4gICAgcHVibGljIHVwZGF0ZShkZWx0YSA6IG51bWJlcikgOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnNjZW5lR3JhcGgudXBkYXRlKGRlbHRhKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiBVcGRhdGVzIHRoZSBGUFMgY291bnRlci5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGVuZChmcHMgOiBudW1iZXIsIHBhbmljIDogYm9vbGVhbikgOiB2b2lkIHtcclxuICAgICAgICBpZiAocGFuaWMpIHtcclxuICAgICAgICAgICAgdmFyIGRpc2NhcmRlZFRpbWUgPSBNYXRoLnJvdW5kKHRoaXMucmVzZXRGcmFtZURlbHRhKCkpO1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ01haW4gbG9vcCBwYW5pY2tlZCwgcHJvYmFibHkgYmVjYXVzZSB0aGUgYnJvd3NlciB0YWIgd2FzIHB1dCBpbiB0aGUgYmFja2dyb3VuZC4gRGlzY2FyZGluZyAnICsgZGlzY2FyZGVkVGltZSArICdtcycpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIi8qXHJcbiAqIFJlc291cmNlTWFuYWdlci5qc1xyXG4gKlxyXG4gKiBUaGlzIGNsYXNzIGlzIHJlc3BvbnNpYmxlIGZvciBtYW5hZ2luZyBhbGwgc2hhcmVkIHJlc291cmNlcy4gVGhpcyBtZWFucyB0aGluZ3NcclxuICogdGhhdCBtYXkgYmUgbmVlZGVkIGJ5IG11bHRpcGxlIGdhbWUgb2JqZWN0cy4gSW4gdGhpcyBhcHBsaWNhdGlvbiB0aGlzIG1lYW5zXHJcbiAqIHRleHR1cmVzIGZvciB0aGUgcHVycG9zZSBvZiBHUFUgcmVuZGVyaW5nIGFuZCBhbmltYXRlZCBzcHJpdGUgdHlwZXMuXHJcbiAqL1xyXG5pbXBvcnQgeyBTcHJpdGVUeXBlRGF0YSwgQW5pbWF0aW9uU3RhdGVEYXRhIH0gZnJvbSAnLi9TcHJpdGVUeXBlRGF0YSdcclxuaW1wb3J0IHsgTWFwRGF0YSwgVGlsZWRMYXllckRhdGEsIFRpbGVkTGF5ZXJQcm9wZXJ0eSwgVGlsZVNldERhdGEgfSBmcm9tICcuL01hcERhdGEnXHJcbmltcG9ydCB7IFNjZW5lRGF0YSwgTmFtZWRQYXRoIH0gZnJvbSAnLi9TY2VuZURhdGEnXHJcbmltcG9ydCB7IFdlYkdMR2FtZVJlbmRlcmluZ1N5c3RlbSB9IGZyb20gJy4uL3JlbmRlcmluZy9XZWJHTEdhbWVSZW5kZXJpbmdTeXN0ZW0nXHJcbmltcG9ydCB7IFdlYkdMR2FtZVRleHR1cmUgfSBmcm9tICcuLi9yZW5kZXJpbmcvV2ViR0xHYW1lVGV4dHVyZSdcclxuaW1wb3J0IHsgQW5pbWF0ZWRTcHJpdGVUeXBlIH0gZnJvbSAnLi4vc2NlbmUvc3ByaXRlL0FuaW1hdGVkU3ByaXRlVHlwZSdcclxuaW1wb3J0IHsgU2NlbmVHcmFwaCB9IGZyb20gJy4uL3NjZW5lL1NjZW5lR3JhcGgnXHJcbmltcG9ydCB7IFRpbGVkTGF5ZXIgfSBmcm9tICcuLi9zY2VuZS90aWxlcy9UaWxlZExheWVyJ1xyXG5pbXBvcnQgeyBUaWxlU2V0IH0gZnJvbSAnLi4vc2NlbmUvdGlsZXMvVGlsZVNldCdcclxuXHJcbmV4cG9ydCBjbGFzcyBSZXNvdXJjZU1hbmFnZXIge1xyXG4gICAgLy8gR0FNRSBTSEFERVIgUFJPR1JBTSBTT1VSQ0UgQ09ERSBXSUxMIEJFIExPQURFRCBIRVJFLiBOT1RFIFRIQVRcclxuICAgIC8vIFdFIEhBVkUgT05FIE1BUCBGT1IgTUFQUElORyBUSEUgU0hBREVSIE5BTUUgVE8gVEhFIFNPVVJDRSBDT0RFXHJcbiAgICAvLyBBTkQgQU5PVEhFUiBGT1IgTUFQUElORyBUSEUgU0hBREVSIE5BTUUgVE8gVEhFIEZJTEUgUEFUSFxyXG4gICAgcHJpdmF0ZSBnYW1lU2hhZGVyc1NvdXJjZTogTWFwPHN0cmluZywgc3RyaW5nPiA9IG5ldyBNYXAoKTtcclxuICAgIHByaXZhdGUgZ2FtZVNoYWRlcnNTb3VyY2VQYXRoczogTWFwPHN0cmluZywgc3RyaW5nPiA9IG5ldyBNYXAoKTtcclxuICAgIHByaXZhdGUgbnVtU2hhZGVyc1RvTG9hZDogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBudW1TaGFkZXJzTG9hZGVkOiBudW1iZXI7XHJcblxyXG4gICAgLy8gU1BSSVRFIFRZUEVTXHJcbiAgICBwcml2YXRlIGdhbWVTcHJpdGVUeXBlczogTWFwPHN0cmluZywgQW5pbWF0ZWRTcHJpdGVUeXBlPiA9IG5ldyBNYXAoKTtcclxuICAgIHByaXZhdGUgZ2FtZVNwcml0ZVR5cGVQYXRoczogTWFwPHN0cmluZywgc3RyaW5nPiA9IG5ldyBNYXAoKTtcclxuICAgIHByaXZhdGUgbnVtU3ByaXRlVHlwZXNUb0xvYWQ6IG51bWJlcjtcclxuICAgIHByaXZhdGUgbnVtU3ByaXRlVHlwZXNMb2FkZWQ6IG51bWJlcjtcclxuXHJcbiAgICAvLyBUSUxFIFNFVFNcclxuICAgIHByaXZhdGUgZ2FtZVRpbGVTZXRzOiBNYXA8c3RyaW5nLCBUaWxlU2V0PiA9IG5ldyBNYXAoKTtcclxuICAgIHByaXZhdGUgZ2FtZVRpbGVTZXRQYXRoczogTWFwPHN0cmluZywgc3RyaW5nPiA9IG5ldyBNYXAoKTtcclxuICAgIHByaXZhdGUgbnVtVGlsZVNldHNUb0xvYWQ6IG51bWJlcjtcclxuICAgIHByaXZhdGUgbnVtVGlsZVNldHNMb2FkZWQ6IG51bWJlcjtcclxuXHJcbiAgICAvLyBHQU1FIFRFWFRVUkVTIFxyXG4gICAgcHJpdmF0ZSBnYW1lVGV4dHVyZXM6IE1hcDxzdHJpbmcsIFdlYkdMR2FtZVRleHR1cmU+ID0gbmV3IE1hcCgpO1xyXG4gICAgcHJpdmF0ZSBudW1UZXh0dXJlc1RvTG9hZDogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBudW1UZXh0dXJlc0xvYWRlZDogbnVtYmVyO1xyXG5cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHsgfVxyXG5cclxuICAgIC8vIEFDQ0VTU09SIE1FVEhPRFNcclxuXHJcbiAgICBwdWJsaWMgZ2V0U2hhZGVyU291cmNlKHNoYWRlck5hbWU6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2FtZVNoYWRlcnNTb3VyY2UuZ2V0KHNoYWRlck5hbWUpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRBbmltYXRlZFNwcml0ZVR5cGUoc3ByaXRlVHlwZU5hbWU6IHN0cmluZyk6IEFuaW1hdGVkU3ByaXRlVHlwZSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2FtZVNwcml0ZVR5cGVzLmdldChzcHJpdGVUeXBlTmFtZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldFRpbGVTZXQodGlsZVNldE5hbWU6IHN0cmluZyk6IFRpbGVTZXQge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdhbWVUaWxlU2V0cy5nZXQodGlsZVNldE5hbWUpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRUZXh0dXJlKHRleHR1cmVQYXRoOiBzdHJpbmcpOiBXZWJHTEdhbWVUZXh0dXJlIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5nYW1lVGV4dHVyZXMuZ2V0KHRleHR1cmVQYXRoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY2xlYXIoKSA6IHZvaWQge1xyXG4gICAgICAgIC8vIENMRUFSIFRIRSBTSEFERVIgU09VUkNFIFxyXG4gICAgICAgIHRoaXMuZ2FtZVNoYWRlcnNTb3VyY2UuY2xlYXIoKTtcclxuICAgICAgICB0aGlzLmdhbWVTaGFkZXJzU291cmNlUGF0aHMuY2xlYXIoKTtcclxuXHJcbiAgICAgICAgLy8gQ0xFQVIgVEhFIFNQUklURSBUWVBFU1xyXG4gICAgICAgIHRoaXMuZ2FtZVNwcml0ZVR5cGVzLmNsZWFyKCk7XHJcbiAgICAgICAgdGhpcy5nYW1lU3ByaXRlVHlwZVBhdGhzLmNsZWFyKCk7XHJcblxyXG4gICAgICAgIC8vIENMRUFSIFRIRSBURVhUVVJFU1xyXG4gICAgICAgIHRoaXMuZ2FtZVRleHR1cmVzLmNsZWFyKCk7XHJcblxyXG4gICAgICAgIC8vIFdFIFJFQUxMWSBTSE9VTEQgQUREIEZVTkNUSU9OQUxJVFkgVE8gUkVNT1ZFXHJcbiAgICAgICAgLy8gQUxMIFRIRSBSRVNPVVJDRVMgRlJPTSBUSEUgR1BVIE9ORSBCWSBPTkVcclxuICAgICAgICAvLyBCVVQgVEhBVCdTIFNPTUVUSElORyBGT1IgVEhFIEZVVFVSRVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogbG9hZFNjZW5lIGlzIHJlc3BvbnNpYmxlIGZvciBsb2FkaW5nIGFsbCB0aGUgZXh0ZXJuYWwgZmlsZXMgbmVlZGVkIGZvclxyXG4gICAgICogcGxheWluZyB0aGUgZ2FtZS4gVGhlc2Ugd2lsbCBiZSB1c2VkIGZvciBsb2FkaW5nIHRoZSBzY2VuZSwgbWFwcyxcclxuICAgICAqIGFuaW1hdGVkIHNwcml0ZXMsIHRleHR1cmVzLCBhbmQgc2hhZGVycy5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGxvYWRTY2VuZSggICBzY2VuZVBhdGg6IHN0cmluZyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2NlbmVHcmFwaDogU2NlbmVHcmFwaCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyaW5nU3lzdGVtOiBXZWJHTEdhbWVSZW5kZXJpbmdTeXN0ZW0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBGdW5jdGlvbik6IHZvaWQge1xyXG4gICAgICAgIC8vIENMRUFSIFRIRSBTQ0VORSBHUkFQSCBUTyBHRVQgUklEIE9GIEFMTCBUSEUgT0xEIFNUVUZGXHJcbiAgICAgICAgLy8gVEhBVCBNQVkgSEFWRSBCRUVOIExPQURFRCBGT1IgU09NRSBPVEhFUiBMRVZFTFxyXG4gICAgICAgIHNjZW5lR3JhcGguY2xlYXIoKTtcclxuXHJcbiAgICAgICAgLy8gQ0xFQVIgQUxMIFRIRSBTQ0VORSBSRVNPVVJDRVMgXHJcbiAgICAgICAgdGhpcy5jbGVhcigpO1xyXG5cclxuICAgICAgICAvLyBXRSBIQVZFIE9VUiBPV04gQ1VTVE9NIEpTT04gRklMRSBGT1JNQVQgVE8gUkVQUkVTRU5UIE9VUiBTQ0VORVxyXG4gICAgICAgIGxldCB0aGlzUmVzb3VyY2VNYW5hZ2VyOiBSZXNvdXJjZU1hbmFnZXIgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMubG9hZFRleHRGaWxlKHNjZW5lUGF0aCwgZnVuY3Rpb24gKGpzb25TY2VuZVRleHQ6IHN0cmluZykge1xyXG4gICAgICAgICAgICBsZXQgc2NlbmVEYXRhOiBTY2VuZURhdGEgPSA8U2NlbmVEYXRhPkpTT04ucGFyc2UoanNvblNjZW5lVGV4dCk7XHJcbiAgICAgICAgICAgIHRoaXNSZXNvdXJjZU1hbmFnZXIubG9hZFNoYWRlcnNTb3VyY2UocmVuZGVyaW5nU3lzdGVtLCBzY2VuZURhdGEuc2hhZGVyU291cmNlUGF0aHMsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIC8vIE5FWFQgTE9BRCBUSEUgTUFQLCBXSElDSCBXSUxMIEZPUkNFIEEgTE9BRElORyBPRlxyXG4gICAgICAgICAgICAgICAgLy8gQU5ZIFVTRUQgVElMRSBTRVQgVEVYVFVSRVMgQVMgV0VMTCBBUyBUSEUgQ1JFQVRJT05cclxuICAgICAgICAgICAgICAgIC8vIE9GIFRJTEVEIExBWUVSUyBUTyBCRSBBRERFRCBUTyBUSEUgU0NFTkVcclxuICAgICAgICAgICAgICAgIHRoaXNSZXNvdXJjZU1hbmFnZXIubG9hZE1hcChzY2VuZURhdGEubWFwUGF0aCwgcmVuZGVyaW5nU3lzdGVtLCBzY2VuZUdyYXBoLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gTk9XIFRIQVQgVEhFIE1BUCBIQVMgQkVFTiBMT0FERUQgTE9BRCBBTEwgVEhFIFNQUklURSBUWVBFU1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXNSZXNvdXJjZU1hbmFnZXIubG9hZFNwcml0ZVR5cGVzKHJlbmRlcmluZ1N5c3RlbSwgc2NlbmVEYXRhLnNwcml0ZVR5cGVQYXRocywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBOT1cgV0UgQ0FOIElOSVQgQUxMIFNIQURFUlNcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1Jlc291cmNlTWFuYWdlci5pbml0QWxsU2hhZGVycyhyZW5kZXJpbmdTeXN0ZW0sIHNjZW5lR3JhcGgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgaW5pdEFsbFNoYWRlcnMoICByZW5kZXJpbmdTeXN0ZW06IFdlYkdMR2FtZVJlbmRlcmluZ1N5c3RlbSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjZW5lR3JhcGg6IFNjZW5lR3JhcGgpOiB2b2lkIHtcclxuICAgICAgICAvLyBTRVRVUCBUSEUgU1BSSVRFIFJFTkRFUkVSIEZPUiBVU0UgV0lUSCBUSEUgU1BSSVRFIFNIQURFUiBUSEFUJ1MgQkVFTiBMT0FERURcclxuICAgICAgICBsZXQgc3ByaXRlUmVuZGVyZXJWZXJ0ZXhTaGFkZXJTb3VyY2U6IHN0cmluZyA9IHRoaXMuZ2V0U2hhZGVyU291cmNlKFwiU1BSSVRFX1ZFUlRFWF9TSEFERVJcIik7XHJcbiAgICAgICAgbGV0IHNwcml0ZVJlbmRlcmVyRnJhZ21lbnRTaGFkZXJTb3VyY2U6IHN0cmluZyA9IHRoaXMuZ2V0U2hhZGVyU291cmNlKFwiU1BSSVRFX0ZSQUdNRU5UX1NIQURFUlwiKTtcclxuICAgICAgICByZW5kZXJpbmdTeXN0ZW0uZ2V0U3ByaXRlUmVuZGVyZXIoKS5pbml0KHJlbmRlcmluZ1N5c3RlbS5nZXRXZWJHTCgpLCBzcHJpdGVSZW5kZXJlclZlcnRleFNoYWRlclNvdXJjZSwgc3ByaXRlUmVuZGVyZXJGcmFnbWVudFNoYWRlclNvdXJjZSwgbnVsbCk7XHJcblxyXG4gICAgICAgIC8vIFNFVFVQIFRIRSBUSUxFRCBMQVlFUiBSRU5ERVJFUiBGT1IgVVNFIFdJVEggVEhFIFRJTEVEIFNIQURFUiBUSEFUJ1MgQkVFTiBMT0FERURcclxuICAgICAgICBsZXQgdGlsZWRMYXllclZlcnRleFNoYWRlclNvdXJjZTogc3RyaW5nID0gdGhpcy5nZXRTaGFkZXJTb3VyY2UoXCJUSUxFRF9MQVlFUl9WRVJURVhfU0hBREVSXCIpO1xyXG4gICAgICAgIGxldCB0aWxlZExheWVyRnJhZ21lbnRTaGFkZXJTb3VyY2U6IHN0cmluZyA9IHRoaXMuZ2V0U2hhZGVyU291cmNlKFwiVElMRURfTEFZRVJfRlJBR01FTlRfU0hBREVSXCIpO1xyXG4gICAgICAgIHJlbmRlcmluZ1N5c3RlbS5nZXRUaWxlZExheWVyUmVuZGVyZXIoKS5pbml0KHJlbmRlcmluZ1N5c3RlbS5nZXRXZWJHTCgpLCB0aWxlZExheWVyVmVydGV4U2hhZGVyU291cmNlLCB0aWxlZExheWVyRnJhZ21lbnRTaGFkZXJTb3VyY2UsIHNjZW5lR3JhcGguZ2V0VGlsZWRMYXllcnMoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGxvYWRTaGFkZXJzU291cmNlKCAgIHJlbmRlcmluZ1N5c3RlbTogV2ViR0xHYW1lUmVuZGVyaW5nU3lzdGVtLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVkUGF0aHM6IEFycmF5PE5hbWVkUGF0aD4sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2s6IEZ1bmN0aW9uKTogdm9pZCB7XHJcbiAgICAgICAgLy8gU1RBUlQgQlkgTE9BRElORyBBTEwgVEhFIFNIQURFUiBTT1VSQ0UgRklMRVMgVEhFU0UgQ0FOIFRIRU4gQkVcclxuICAgICAgICAvLyBSRVRSSUVWRUQgTEFURVIgQlkgVEhFIFJFTkRFUkVSUyBXSEVOIElUUyBUSU1FIFRPIEJVSUxEIFRIRSBcclxuICAgICAgICAvLyBTSEFERVIgUFJPR1JBTVNcclxuICAgICAgICBsZXQgdGhpc1Jlc291cmNlTWFuYWdlcjogUmVzb3VyY2VNYW5hZ2VyID0gdGhpcztcclxuICAgICAgICB0aGlzLm51bVNoYWRlcnNMb2FkZWQgPSAwO1xyXG4gICAgICAgIHRoaXMubnVtU2hhZGVyc1RvTG9hZCA9IG5hbWVkUGF0aHMubGVuZ3RoO1xyXG4gICAgICAgIGZvciAobGV0IGk6IG51bWJlciA9IDA7IGkgPCBuYW1lZFBhdGhzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxldCBuYW1lZFBhdGg6IE5hbWVkUGF0aCA9IG5hbWVkUGF0aHNbaV07XHJcbiAgICAgICAgICAgIGxldCBzaGFkZXJOYW1lOiBzdHJpbmcgPSBuYW1lZFBhdGgubmFtZTtcclxuICAgICAgICAgICAgbGV0IHNoYWRlclBhdGg6IHN0cmluZyA9IG5hbWVkUGF0aC5wYXRoO1xyXG4gICAgICAgICAgICB0aGlzLmxvYWRUZXh0RmlsZShzaGFkZXJQYXRoLCBmdW5jdGlvbiAoc2hhZGVyU291cmNlQ29kZTogc3RyaW5nKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzUmVzb3VyY2VNYW5hZ2VyLmdhbWVTaGFkZXJzU291cmNlLnNldChzaGFkZXJOYW1lLCBzaGFkZXJTb3VyY2VDb2RlKTtcclxuICAgICAgICAgICAgICAgIHRoaXNSZXNvdXJjZU1hbmFnZXIuZ2FtZVNoYWRlcnNTb3VyY2VQYXRocy5zZXQoc2hhZGVyTmFtZSwgc2hhZGVyUGF0aCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzUmVzb3VyY2VNYW5hZ2VyLmNvbXBsZXRlTG9hZGluZ1NoYWRlcihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQUxMIFNPVVJDRSBDT0RFIElTIExPQURFRCBTTyBETyBXSEFUJ1MgTkVYVFxyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBidWlsZFBhdGhUb0ZpbGVJblNhbWVEaXJlY3RvcnkoYmFzZUZpbGVXaXRoUGF0aCA6IHN0cmluZywgdGFyZ2V0RmlsZU5hbWUgOiBzdHJpbmcpIDogc3RyaW5nIHtcclxuICAgICAgICBsZXQgbGFzdEluZGV4T2ZTbGFzaDogbnVtYmVyID0gYmFzZUZpbGVXaXRoUGF0aC5sYXN0SW5kZXhPZignLycpO1xyXG4gICAgICAgIGxldCB0YXJnZXRGaWxlUGF0aCA6IHN0cmluZyA9IFwiLi9cIjtcclxuICAgICAgICBpZiAobGFzdEluZGV4T2ZTbGFzaCA+IDApXHJcbiAgICAgICAgICAgIHRhcmdldEZpbGVQYXRoID0gYmFzZUZpbGVXaXRoUGF0aC5zdWJzdHJpbmcoMCwgbGFzdEluZGV4T2ZTbGFzaCk7XHJcbiAgICAgICAgdGFyZ2V0RmlsZVBhdGggKz0gXCIvXCIgKyB0YXJnZXRGaWxlTmFtZTtcclxuICAgICAgICByZXR1cm4gdGFyZ2V0RmlsZVBhdGg7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGxvYWRNYXAoIG1hcFBhdGg6IHN0cmluZyxcclxuICAgICAgICAgICAgICAgICAgICByZW5kZXJpbmdTeXN0ZW06IFdlYkdMR2FtZVJlbmRlcmluZ1N5c3RlbSxcclxuICAgICAgICAgICAgICAgICAgICBzY2VuZUdyYXBoOiBTY2VuZUdyYXBoLFxyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBGdW5jdGlvbik6IHZvaWQge1xyXG4gICAgICAgIGxldCB0aGlzUmVzb3VyY2VNYW5hZ2VyOiBSZXNvdXJjZU1hbmFnZXIgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMubG9hZFRleHRGaWxlKG1hcFBhdGgsIGZ1bmN0aW9uIChqc29uTWFwVGV4dDogc3RyaW5nKSB7XHJcbiAgICAgICAgICAgIGxldCBtYXBEYXRhOiBNYXBEYXRhID0gPE1hcERhdGE+SlNPTi5wYXJzZShqc29uTWFwVGV4dCk7XHJcblxyXG4gICAgICAgICAgICAvLyBXRSBPTkxZIFVTRSBPTkUgVElMRSBTRVRcclxuICAgICAgICAgICAgbGV0IHRpbGVzZXRGaWxlTmFtZTogc3RyaW5nID0gbWFwRGF0YS50aWxlc2V0c1swXS5pbWFnZTtcclxuICAgICAgICAgICAgbGV0IHRpbGVzZXRGaWxlUGF0aCA9IHRoaXNSZXNvdXJjZU1hbmFnZXIuYnVpbGRQYXRoVG9GaWxlSW5TYW1lRGlyZWN0b3J5KG1hcFBhdGgsIHRpbGVzZXRGaWxlTmFtZSk7XHJcblxyXG4gICAgICAgICAgICAvLyBVU0UgVEhFIFBBVEhTIFRPTE9BRCBUSEUgVElMRSBTRVQgVEVYVFVSRVNcclxuICAgICAgICAgICAgdGhpc1Jlc291cmNlTWFuYWdlci5sb2FkVGV4dHVyZSh0aWxlc2V0RmlsZVBhdGgsIHJlbmRlcmluZ1N5c3RlbSwgZnVuY3Rpb24gKHRpbGVzZXRUZXh0dXJlIDogV2ViR0xHYW1lVGV4dHVyZSkge1xyXG4gICAgICAgICAgICAgICAgLy8gTk9XIFRIQVQgVEhFIFRJTEUgU0VUIFRFWFRVUkVTIEhBVkUgQkVFTiBMT0FERUQsXHJcbiAgICAgICAgICAgICAgICAvLyBMT0FEIEFMTCBUSEVJUiBBU1NPQ0lBVEVEIFRJTEVTRVQgREFUQVxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtYXBEYXRhLnRpbGVzZXRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRpbGVTZXREYXRhIDogVGlsZVNldERhdGEgPSBtYXBEYXRhLnRpbGVzZXRzW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCByb3dzIDogbnVtYmVyID0gTWF0aC5jZWlsKHRpbGVTZXREYXRhLnRpbGVjb3VudC90aWxlU2V0RGF0YS5jb2x1bW5zKTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdGlsZVNldFRvQWRkIDogVGlsZVNldCA9IG5ldyBUaWxlU2V0KFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGlsZVNldERhdGEubmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbGVTZXREYXRhLmNvbHVtbnMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3dzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGlsZVNldERhdGEudGlsZXdpZHRoLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGlsZVNldERhdGEudGlsZWhlaWdodCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbGVTZXREYXRhLnNwYWNpbmcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aWxlU2V0RGF0YS5pbWFnZXdpZHRoLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGlsZVNldERhdGEuaW1hZ2VoZWlnaHQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aWxlU2V0RGF0YS5maXJzdGdpZCAtIDEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aWxlc2V0VGV4dHVyZSk7ICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICB0aGlzUmVzb3VyY2VNYW5hZ2VyLmdhbWVUaWxlU2V0cy5zZXQodGlsZVNldFRvQWRkLmdldE5hbWUoKSwgdGlsZVNldFRvQWRkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBBTkQgTk9XIFRIQVQgVEhFIFRJTEUgU0VUUyBIQVZFIEJFRU4gTE9BREVEXHJcbiAgICAgICAgICAgICAgICAvLyBXRSBDQU4gTE9BRCBUSEUgTUFQJ1MgVElMRUQgTEFZRVJTLCBUSE9VR0ggTk9URVxyXG4gICAgICAgICAgICAgICAgLy8gSU4gVEhJUyBFWEFNUExFIFdFIEFSRSBHT0lORyBUTyBLRUVQIElUIFNJTVBMRVxyXG4gICAgICAgICAgICAgICAgLy8gQU5EIEFTU1VNRSBUSEVSRSBJUyBPTkxZIE9ORSBUSUxFIFNFVFxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtYXBEYXRhLmxheWVycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBsYXllckRhdGEgOiBUaWxlZExheWVyRGF0YSA9IG1hcERhdGEubGF5ZXJzW2ldO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBUSElTIExJTkUgT0YgQ09ERSBJUyBGVU5LWSwgV0UgQ0FOIE9OTFkgRE8gVEhJUyBXSVRIIEEgU0lOR0xFIFRJTEUgU0VULFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFNPIFRPIE1BS0UgVEhJUyBBIFJFQUwgR0FNRSBFTkdJTkUgVEhJUyBXT1VMRCBORUVEIFRPIEJFIEZJWEVEXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGxheWVyVGlsZVNldCA6IFRpbGVTZXQgPSB0aGlzUmVzb3VyY2VNYW5hZ2VyLmdhbWVUaWxlU2V0cy52YWx1ZXMoKS5uZXh0KCkudmFsdWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFdFIEFSRSBBU1NVTUlORyBFQUNIIExBWUVSIFVTRVMgSlVTVCBPTkUgVElMRSBTRVQsIFdISUNIIE1JR0hUIE5PVFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIE5FQ0VTU0FSSUxZIEJFIFRSVUUuIEJVVCBGT1IgTk9XLCBMRVQnUyBKVVNUIE1BS0UgVEhFIExBWUVSUyBBTExcclxuICAgICAgICAgICAgICAgICAgICAvLyBVU0lORyBUSEUgU0FNRSBUSUxFIFNFVCwgQUREIFRIRSBUSUxFUywgQU5EIFRIRU4gQUREIFRIRU0gVE8gVEhFIFNDRU5FIEdSQVBIXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRpbGVkTGF5ZXIgOiBUaWxlZExheWVyID0gbmV3IFRpbGVkTGF5ZXIobGF5ZXJEYXRhLndpZHRoLCBsYXllckRhdGEuaGVpZ2h0LGxheWVyVGlsZVNldCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBsYXllckRhdGEuZGF0YS5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdGlsZUluZGV4IDogbnVtYmVyID0gbGF5ZXJEYXRhLmRhdGFbal0gLSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aWxlZExheWVyLmFkZFRpbGUodGlsZUluZGV4KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgc2NlbmVHcmFwaC5hZGRMYXllcih0aWxlZExheWVyKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKlxyXG4gICAgICogTG9hZHMgdGhlIHRleHR1cmVQYXRoIGZpbGUgYXJndW1lbnQgYW5kIG9uY2VcclxuICAgICAqIHRoYXQgaXMgZG9uZSBpdCBjYWxscyB0aGUgY2FsbGJhY2sgZnVuY3Rpb24uXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBsb2FkVGV4dHVyZSh0ZXh0dXJlUGF0aDogc3RyaW5nLFxyXG4gICAgICAgIHJlbmRlcmluZ1N5c3RlbTogV2ViR0xHYW1lUmVuZGVyaW5nU3lzdGVtLFxyXG4gICAgICAgIGNhbGxiYWNrOiBGdW5jdGlvbik6IHZvaWQge1xyXG4gICAgICAgIGxldCB0aGlzUmVzb3VyY2VNYW5hZ2VyID0gdGhpcztcclxuICAgICAgICB0aGlzUmVzb3VyY2VNYW5hZ2VyLmxvYWRJbWFnZSh0ZXh0dXJlUGF0aCwgZnVuY3Rpb24gKHBhdGg6IHN0cmluZywgaW1hZ2U6IEhUTUxJbWFnZUVsZW1lbnQpIHtcclxuICAgICAgICAgICAgbGV0IHRleHR1cmVUb0xvYWQ6IFdlYkdMR2FtZVRleHR1cmUgPSBuZXcgV2ViR0xHYW1lVGV4dHVyZSgpO1xyXG4gICAgICAgICAgICBsZXQgaWQ6IG51bWJlciA9IHRoaXNSZXNvdXJjZU1hbmFnZXIuZ2FtZVRleHR1cmVzLnNpemU7XHJcbiAgICAgICAgICAgIHRoaXNSZXNvdXJjZU1hbmFnZXIuZ2FtZVRleHR1cmVzLnNldChwYXRoLCB0ZXh0dXJlVG9Mb2FkKTtcclxuICAgICAgICAgICAgcmVuZGVyaW5nU3lzdGVtLmluaXRXZWJHTFRleHR1cmUodGV4dHVyZVRvTG9hZCwgaWQsIGltYWdlLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjayh0ZXh0dXJlVG9Mb2FkKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLypcclxuICAgICAqIExvYWRzIGFsbCB0aGUgc3ByaXRlIHR5cGVzIGxpc3RlZCBpbiB0aGUgc3ByaXRlVHlwZVBhdGhzIGFyZ3VtZW50IGFuZCBvbmNlXHJcbiAgICAgKiB0aGF0IGlzIGRvbmUgaXQgY2FsbHMgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgbG9hZFNwcml0ZVR5cGVzKCByZW5kZXJpbmdTeXN0ZW0gOiBXZWJHTEdhbWVSZW5kZXJpbmdTeXN0ZW0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcHJpdGVUeXBlUGF0aHM6IEFycmF5PE5hbWVkUGF0aD4sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogRnVuY3Rpb24pOiB2b2lkIHtcclxuICAgICAgICAvLyBUSEVOIExPQUQgVEhFIFRFWFRVUkVTIFdFJ0xMIEJFIFVTSU5HXHJcbiAgICAgICAgdGhpcy5udW1TcHJpdGVUeXBlc1RvTG9hZCA9IHNwcml0ZVR5cGVQYXRocy5sZW5ndGg7XHJcbiAgICAgICAgdGhpcy5udW1TcHJpdGVUeXBlc0xvYWRlZCA9IDA7XHJcbiAgICAgICAgbGV0IHRoaXNSZXNvdXJjZU1hbmFnZXIgPSB0aGlzO1xyXG4gICAgICAgIGZvciAobGV0IG5hbWVkUGF0aCBvZiBzcHJpdGVUeXBlUGF0aHMpIHtcclxuICAgICAgICAgICAgbGV0IG5hbWU6IHN0cmluZyA9IG5hbWVkUGF0aC5uYW1lO1xyXG4gICAgICAgICAgICBsZXQgcGF0aDogc3RyaW5nID0gbmFtZWRQYXRoLnBhdGg7XHJcbiAgICAgICAgICAgIHRoaXMubG9hZFNwcml0ZVR5cGUocmVuZGVyaW5nU3lzdGVtLCBuYW1lLCBwYXRoLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzUmVzb3VyY2VNYW5hZ2VyLmNvbXBsZXRlTG9hZGluZ1Nwcml0ZVR5cGUoY2FsbGJhY2spO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUFJJVkFURSBIRUxQRVIgTUVUSE9EU1xyXG5cclxuICAgIC8vIExPQURTIEEgTkVXIEpTT04gRklMRSBBTkQgVVBPTiBDT01QTEVUSU9OIENBTExTIFRIRSBjYWxsYmFjayBGVU5DVElPTlxyXG4gICAgcHJpdmF0ZSBsb2FkVGV4dEZpbGUodGV4dEZpbGVQYXRoOiBzdHJpbmcsIGNhbGxiYWNrOiBGdW5jdGlvbik6IHZvaWQge1xyXG4gICAgICAgIGxldCB4b2JqOiBYTUxIdHRwUmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xyXG4gICAgICAgIHhvYmoub3ZlcnJpZGVNaW1lVHlwZShcImFwcGxpY2F0aW9uL2pzb25cIik7XHJcbiAgICAgICAgeG9iai5vcGVuKCdHRVQnLCB0ZXh0RmlsZVBhdGgsIHRydWUpO1xyXG4gICAgICAgIHhvYmoub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoKHhvYmoucmVhZHlTdGF0ZSA9PSA0KSAmJiAoeG9iai5zdGF0dXMgPT0gMjAwKSkge1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2soeG9iai5yZXNwb25zZVRleHQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICB4b2JqLnNlbmQobnVsbCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ0hFQ0tTIFRPIFNFRSBJRiBBTEwgU0hBREVSIExPQURJTkcgSVMgQ09NUExFVEUsIElGIFlFUywgY2FsbGJhY2sgSVMgSU5WT0tFRFxyXG4gICAgcHJpdmF0ZSBjb21wbGV0ZUxvYWRpbmdTaGFkZXIoY2FsbGJhY2s6IEZ1bmN0aW9uKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5udW1TaGFkZXJzTG9hZGVkKys7XHJcbiAgICAgICAgaWYgKHRoaXMubnVtU2hhZGVyc0xvYWRlZCA9PT0gdGhpcy5udW1TaGFkZXJzVG9Mb2FkKSB7XHJcbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIENIRUNLUyBUTyBTRUUgSUYgQUxMIFNQUklURSBUWVBFIExPQURJTkcgSVMgQ09NUExFVEUsIElGIFlFUywgY2FsbGJhY2sgSVMgSU5WT0tFRFxyXG4gICAgcHJpdmF0ZSBjb21wbGV0ZUxvYWRpbmdTcHJpdGVUeXBlKGNhbGxiYWNrOiBGdW5jdGlvbik6IHZvaWQge1xyXG4gICAgICAgIHRoaXMubnVtU3ByaXRlVHlwZXNMb2FkZWQrKztcclxuICAgICAgICBpZiAodGhpcy5udW1TcHJpdGVUeXBlc0xvYWRlZCA9PT0gdGhpcy5udW1TcHJpdGVUeXBlc1RvTG9hZCkge1xyXG4gICAgICAgICAgICBjYWxsYmFjaygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBDSEVDS1MgVE8gU0VFIElGIEFMTCBURVhUVVJFIExPQURJTkcgSVMgQ09NUExFVEUsIElGIFlFUywgY2FsbGJhY2sgSVMgSU5WT0tFRFxyXG4gICAgcHJpdmF0ZSBjb21wbGV0ZUxvYWRpbmdUZXh0dXJlKGNhbGxiYWNrOiBGdW5jdGlvbik6IHZvaWQge1xyXG4gICAgICAgIHRoaXMubnVtVGV4dHVyZXNMb2FkZWQrKztcclxuICAgICAgICBpZiAodGhpcy5udW1UZXh0dXJlc0xvYWRlZCA9PT0gdGhpcy5udW1UZXh0dXJlc1RvTG9hZCkge1xyXG4gICAgICAgICAgICBjYWxsYmFjaygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIExvYWRzIGFuIEltYWdlIGludG8gUkFNIGFuZCBvbmNlIHRoYXQgcHJvY2VzcyBpcyBjb21wbGV0ZSBpdFxyXG4gICAgICogY2FsbHMgdGhlIGNhbGxiYWNrIG1ldGhvZCBhcmd1bWVudCwgcHJlc3VtYWJseSB0byB0aGVuIGxvYWRcclxuICAgICAqIGl0IGludG8gR1BVIG1lbW9yeS5cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBsb2FkSW1hZ2UocGF0aDogc3RyaW5nLCBjYWxsYmFjazogRnVuY3Rpb24pOiB2b2lkIHtcclxuICAgICAgICAvLyBNQUtFIFRIRSBJTUFHRVxyXG4gICAgICAgIHZhciBpbWFnZSA9IG5ldyBJbWFnZSgpO1xyXG5cclxuICAgICAgICAvLyBPTkNFIFRIRSBJTUFHRSBMT0FESU5HIElTIENPTVBMRVRFRCwgVEhFIENBTExCQUNLIFdJTEwgR0VUIENBTExFRFxyXG4gICAgICAgIGltYWdlLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgY2FsbGJhY2socGF0aCwgaW1hZ2UpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gU1RBUlQgSU1BR0UgTE9BRElOR1xyXG4gICAgICAgIGltYWdlLnNyYyA9IHBhdGg7XHJcbiAgICB9XHJcblxyXG4gICAgLypcclxuICAgICAqIFRoaXMgZnVuY3Rpb24gbG9hZHMgYSBzaW5nbGUgc3ByaXRlIHR5cGUgcmVzb3VyY2UgZnJvbSBhIEpTT04gZmlsZSBhbmQgdXBvblxyXG4gICAgICogY29tcGxldGlvbiBjYWxscyB0aGUgY2FsbGJhY2sgZnVuY3Rpb24uXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgbG9hZFNwcml0ZVR5cGUocmVuZGVyaW5nU3lzdGVtIDogV2ViR0xHYW1lUmVuZGVyaW5nU3lzdGVtLCBzcHJpdGVUeXBlTmFtZTogc3RyaW5nLCBqc29uRmlsZVBhdGg6IHN0cmluZywgY2FsbGJhY2s6IEZ1bmN0aW9uKTogdm9pZCB7XHJcbiAgICAgICAgbGV0IHRoaXNSZXNvdXJjZU1hbmFnZXI6IFJlc291cmNlTWFuYWdlciA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5sb2FkVGV4dEZpbGUoanNvbkZpbGVQYXRoLCBmdW5jdGlvbiAoanNvblRleHQ6IHN0cmluZykge1xyXG4gICAgICAgICAgICB0aGlzUmVzb3VyY2VNYW5hZ2VyLmxvYWRTcHJpdGVUeXBlRGF0YShyZW5kZXJpbmdTeXN0ZW0sIGpzb25GaWxlUGF0aCwganNvblRleHQsIGZ1bmN0aW9uKHNwcml0ZVR5cGUgOiBBbmltYXRlZFNwcml0ZVR5cGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXNSZXNvdXJjZU1hbmFnZXIuZ2FtZVNwcml0ZVR5cGVzLnNldChzcHJpdGVUeXBlTmFtZSwgc3ByaXRlVHlwZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzUmVzb3VyY2VNYW5hZ2VyLmdhbWVTcHJpdGVUeXBlUGF0aHMuc2V0KHNwcml0ZVR5cGVOYW1lLCBqc29uRmlsZVBhdGgpO1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLypcclxuICAgICAqIFRoaXMgaGVscGVyIGZ1bmN0aW9uIGxvYWRzIGFsbCB0aGUganNvbiB0ZXh0IGludG8gYW4gQW5pbWF0ZWRTcHJpdGVUeXBlXHJcbiAgICAgKiBvYmplY3QgYW5kIHJldHVybnMgaXQuXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgbG9hZFNwcml0ZVR5cGVEYXRhID0gKCAgcmVuZGVyaW5nU3lzdGVtIDogV2ViR0xHYW1lUmVuZGVyaW5nU3lzdGVtLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ByaXRlRmlsZVBhdGggOiBzdHJpbmcsIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqc29uVGV4dDogc3RyaW5nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayA6IEZ1bmN0aW9uKTogdm9pZCA9PiB7XHJcbiAgICAgICAgbGV0IGpzb25EYXRhOiBTcHJpdGVUeXBlRGF0YSA9IDxTcHJpdGVUeXBlRGF0YT5KU09OLnBhcnNlKGpzb25UZXh0KTtcclxuICAgICAgICBsZXQgdGV4dHVyZVBhdGggOiBzdHJpbmcgPSB0aGlzLmJ1aWxkUGF0aFRvRmlsZUluU2FtZURpcmVjdG9yeShzcHJpdGVGaWxlUGF0aCwganNvbkRhdGEuc3ByaXRlU2hlZXRJbWFnZSk7XHJcbiAgICAgICAgbGV0IHRoaXNSZXNvdXJjZU1hbmFnZXIgOiBSZXNvdXJjZU1hbmFnZXIgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMubG9hZFRleHR1cmUodGV4dHVyZVBhdGgsIHJlbmRlcmluZ1N5c3RlbSwgZnVuY3Rpb24oc3ByaXRlc2hlZXRUZXh0dXJlIDogV2ViR0xHYW1lVGV4dHVyZSkge1xyXG4gICAgICAgICAgICBsZXQgc3ByaXRlV2lkdGg6IG51bWJlciA9IGpzb25EYXRhLnNwcml0ZVdpZHRoO1xyXG4gICAgICAgICAgICBsZXQgc3ByaXRlSGVpZ2h0OiBudW1iZXIgPSBqc29uRGF0YS5zcHJpdGVIZWlnaHQ7XHJcbiAgICAgICAgICAgIGxldCBhbmltYXRlZFNwcml0ZVR5cGUgPSBuZXcgQW5pbWF0ZWRTcHJpdGVUeXBlKHNwcml0ZXNoZWV0VGV4dHVyZSwgc3ByaXRlV2lkdGgsIHNwcml0ZUhlaWdodCk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwganNvbkRhdGEuYW5pbWF0aW9ucy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgbGV0IGFuaW1hdGlvbiA9IDxBbmltYXRpb25TdGF0ZURhdGE+anNvbkRhdGEuYW5pbWF0aW9uc1tpXTtcclxuICAgICAgICAgICAgICAgIGFuaW1hdGVkU3ByaXRlVHlwZS5hZGRBbmltYXRpb24oYW5pbWF0aW9uLm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBhbmltYXRpb24uZnJhbWVzLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZyYW1lID0gYW5pbWF0aW9uLmZyYW1lc1tqXTtcclxuICAgICAgICAgICAgICAgICAgICBhbmltYXRlZFNwcml0ZVR5cGUuYWRkQW5pbWF0aW9uRnJhbWUoYW5pbWF0aW9uLm5hbWUsIGZyYW1lLmluZGV4LCBmcmFtZS5kdXJhdGlvbik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FsbGJhY2soYW5pbWF0ZWRTcHJpdGVUeXBlKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufSIsImV4cG9ydCBhYnN0cmFjdCBjbGFzcyBHYW1lTG9vcFRlbXBsYXRlIHtcclxuICAgIC8vIEFMTCBJTlNUQU5DRSBWQVJJQUJMRVMgV0lMTCBCRSBJTklUSUFMSVpFRCBWSUEgVEhFIENPTlNUUlVDVE9SXHJcbiAgICBwcml2YXRlIGZwczogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBzaW11bGF0aW9uVGltZXN0ZXA6IG51bWJlcjtcclxuICAgIHByaXZhdGUgZnJhbWVEZWx0YTogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBsYXN0RnJhbWVUaW1lTXM6IG51bWJlcjtcclxuICAgIHByaXZhdGUgZnBzQWxwaGE6IG51bWJlcjtcclxuICAgIHByaXZhdGUgZnBzVXBkYXRlSW50ZXJ2YWw6IG51bWJlcjtcclxuICAgIHByaXZhdGUgbGFzdEZwc1VwZGF0ZTogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBmcmFtZXNTaW5jZUxhc3RGcHNVcGRhdGU6IG51bWJlcjtcclxuICAgIHByaXZhdGUgbnVtVXBkYXRlU3RlcHM6IG51bWJlcjtcclxuICAgIHByaXZhdGUgbWluRnJhbWVEZWxheTogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBydW5uaW5nOiBib29sZWFuO1xyXG4gICAgcHJpdmF0ZSBzdGFydGVkOiBib29sZWFuO1xyXG4gICAgcHJpdmF0ZSBwYW5pYzogYm9vbGVhbjtcclxuICAgIHByaXZhdGUgcmFmOiBudW1iZXI7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgLy8gQW4gZXhwb25lbnRpYWwgbW92aW5nIGF2ZXJhZ2Ugb2YgdGhlIGZyYW1lcyBwZXIgc2Vjb25kLlxyXG4gICAgICAgIHRoaXMuZnBzID0gNjA7XHJcblxyXG4gICAgICAgIC8vIFRoZSBhbW91bnQgb2YgdGltZSAoaW4gbWlsbGlzZWNvbmRzKSB0byBzaW11bGF0ZSBlYWNoIHRpbWUgdXBkYXRlKCkgcnVucy5cclxuICAgICAgICAvLyBTZWUgYE1haW5Mb29wLnNldFNpbXVsYXRpb25UaW1lc3RlcCgpYCBmb3IgZGV0YWlscy5cclxuICAgICAgICB0aGlzLnNpbXVsYXRpb25UaW1lc3RlcCA9IDEwMDAgLyB0aGlzLmZwcztcclxuXHJcbiAgICAgICAgLy8gVGhlIGN1bXVsYXRpdmUgYW1vdW50IG9mIGluLWFwcCB0aW1lIHRoYXQgaGFzbid0IGJlZW4gc2ltdWxhdGVkIHlldC5cclxuICAgICAgICAvLyBTZWUgdGhlIGNvbW1lbnRzIGluc2lkZSBhbmltYXRlKCkgZm9yIGRldGFpbHMuXHJcbiAgICAgICAgdGhpcy5mcmFtZURlbHRhID0gMDtcclxuXHJcbiAgICAgICAgLy8gVGhlIHRpbWVzdGFtcCBpbiBtaWxsaXNlY29uZHMgb2YgdGhlIGxhc3QgdGltZSB0aGUgbWFpbiBsb29wIHdhcyBydW4uXHJcbiAgICAgICAgLy8gVXNlZCB0byBjb21wdXRlIHRoZSB0aW1lIGVsYXBzZWQgYmV0d2VlbiBmcmFtZXMuXHJcbiAgICAgICAgdGhpcy5sYXN0RnJhbWVUaW1lTXMgPSAwO1xyXG5cclxuICAgICAgICAvLyBBIGZhY3RvciB0aGF0IGFmZmVjdHMgaG93IGhlYXZpbHkgdG8gd2VpZ2h0IG1vcmUgcmVjZW50IHNlY29uZHMnXHJcbiAgICAgICAgLy8gcGVyZm9ybWFuY2Ugd2hlbiBjYWxjdWxhdGluZyB0aGUgYXZlcmFnZSBmcmFtZXMgcGVyIHNlY29uZC4gVmFsaWQgdmFsdWVzXHJcbiAgICAgICAgLy8gcmFuZ2UgZnJvbSB6ZXJvIHRvIG9uZSBpbmNsdXNpdmUuIEhpZ2hlciB2YWx1ZXMgcmVzdWx0IGluIHdlaWdodGluZyBtb3JlXHJcbiAgICAgICAgLy8gcmVjZW50IHNlY29uZHMgbW9yZSBoZWF2aWx5LlxyXG4gICAgICAgIHRoaXMuZnBzQWxwaGEgPSAwLjk7XHJcblxyXG4gICAgICAgIC8vIFRoZSBtaW5pbXVtIGR1cmF0aW9uIGJldHdlZW4gdXBkYXRlcyB0byB0aGUgZnJhbWVzLXBlci1zZWNvbmQgZXN0aW1hdGUuXHJcbiAgICAgICAgLy8gSGlnaGVyIHZhbHVlcyBpbmNyZWFzZSBhY2N1cmFjeSwgYnV0IHJlc3VsdCBpbiBzbG93ZXIgdXBkYXRlcy5cclxuICAgICAgICB0aGlzLmZwc1VwZGF0ZUludGVydmFsID0gMTAwMDtcclxuXHJcbiAgICAgICAgLy8gVGhlIHRpbWVzdGFtcCAoaW4gbWlsbGlzZWNvbmRzKSBvZiB0aGUgbGFzdCB0aW1lIHRoZSBgZnBzYCBtb3ZpbmdcclxuICAgICAgICAvLyBhdmVyYWdlIHdhcyB1cGRhdGVkLlxyXG4gICAgICAgIHRoaXMubGFzdEZwc1VwZGF0ZSA9IDA7XHJcblxyXG4gICAgICAgIC8vIFRoZSBudW1iZXIgb2YgZnJhbWVzIGRlbGl2ZXJlZCBzaW5jZSB0aGUgbGFzdCB0aW1lIHRoZSBgZnBzYCBtb3ZpbmdcclxuICAgICAgICAvLyBhdmVyYWdlIHdhcyB1cGRhdGVkIChpLmUuIHNpbmNlIGBsYXN0RnBzVXBkYXRlYCkuXHJcbiAgICAgICAgdGhpcy5mcmFtZXNTaW5jZUxhc3RGcHNVcGRhdGUgPSAwO1xyXG5cclxuICAgICAgICAvLyBUaGUgbnVtYmVyIG9mIHRpbWVzIHVwZGF0ZSgpIGlzIGNhbGxlZCBpbiBhIGdpdmVuIGZyYW1lLiBUaGlzIGlzIG9ubHlcclxuICAgICAgICAvLyByZWxldmFudCBpbnNpZGUgb2YgYW5pbWF0ZSgpLCBidXQgYSByZWZlcmVuY2UgaXMgaGVsZCBleHRlcm5hbGx5IHNvIHRoYXRcclxuICAgICAgICAvLyB0aGlzIHZhcmlhYmxlIGlzIG5vdCBtYXJrZWQgZm9yIGdhcmJhZ2UgY29sbGVjdGlvbiBldmVyeSB0aW1lIHRoZSBtYWluXHJcbiAgICAgICAgLy8gbG9vcCBydW5zLlxyXG4gICAgICAgIHRoaXMubnVtVXBkYXRlU3RlcHMgPSAwO1xyXG5cclxuICAgICAgICAvLyBUaGUgbWluaW11bSBhbW91bnQgb2YgdGltZSBpbiBtaWxsaXNlY29uZHMgdGhhdCBtdXN0IHBhc3Mgc2luY2UgdGhlIGxhc3RcclxuICAgICAgICAvLyBmcmFtZSB3YXMgZXhlY3V0ZWQgYmVmb3JlIGFub3RoZXIgZnJhbWUgY2FuIGJlIGV4ZWN1dGVkLiBUaGVcclxuICAgICAgICAvLyBtdWx0aXBsaWNhdGl2ZSBpbnZlcnNlIGNhcHMgdGhlIEZQUyAodGhlIGRlZmF1bHQgb2YgemVybyBtZWFucyB0aGVyZSBpc1xyXG4gICAgICAgIC8vIG5vIGNhcCkuXHJcbiAgICAgICAgdGhpcy5taW5GcmFtZURlbGF5ID0gMDtcclxuXHJcbiAgICAgICAgLy8gV2hldGhlciB0aGUgbWFpbiBsb29wIGlzIHJ1bm5pbmcuXHJcbiAgICAgICAgdGhpcy5ydW5uaW5nID0gZmFsc2U7XHJcblxyXG4gICAgICAgIC8vIGB0cnVlYCBpZiBgTWFpbkxvb3Auc3RhcnQoKWAgaGFzIGJlZW4gY2FsbGVkIGFuZCB0aGUgbW9zdCByZWNlbnQgdGltZSBpdFxyXG4gICAgICAgIC8vIHdhcyBjYWxsZWQgaGFzIG5vdCBiZWVuIGZvbGxvd2VkIGJ5IGEgY2FsbCB0byBgTWFpbkxvb3Auc3RvcCgpYC4gVGhpcyBpc1xyXG4gICAgICAgIC8vIGRpZmZlcmVudCB0aGFuIGBydW5uaW5nYCBiZWNhdXNlIHRoZXJlIGlzIGEgZGVsYXkgb2YgYSBmZXcgbWlsbGlzZWNvbmRzXHJcbiAgICAgICAgLy8gYWZ0ZXIgYE1haW5Mb29wLnN0YXJ0KClgIGlzIGNhbGxlZCBiZWZvcmUgdGhlIGFwcGxpY2F0aW9uIGlzIGNvbnNpZGVyZWRcclxuICAgICAgICAvLyBcInJ1bm5pbmcuXCIgVGhpcyBkZWxheSBpcyBkdWUgdG8gd2FpdGluZyBmb3IgdGhlIG5leHQgZnJhbWUuXHJcbiAgICAgICAgdGhpcy5zdGFydGVkID0gZmFsc2U7XHJcblxyXG4gICAgICAgIC8vIFdoZXRoZXIgdGhlIHNpbXVsYXRpb24gaGFzIGZhbGxlbiB0b28gZmFyIGJlaGluZCByZWFsIHRpbWUuXHJcbiAgICAgICAgLy8gU3BlY2lmaWNhbGx5LCBgcGFuaWNgIHdpbGwgYmUgc2V0IHRvIGB0cnVlYCBpZiB0b28gbWFueSB1cGRhdGVzIG9jY3VyIGluXHJcbiAgICAgICAgLy8gb25lIGZyYW1lLiBUaGlzIGlzIG9ubHkgcmVsZXZhbnQgaW5zaWRlIG9mIGFuaW1hdGUoKSwgYnV0IGEgcmVmZXJlbmNlIGlzXHJcbiAgICAgICAgLy8gaGVsZCBleHRlcm5hbGx5IHNvIHRoYXQgdGhpcyB2YXJpYWJsZSBpcyBub3QgbWFya2VkIGZvciBnYXJiYWdlXHJcbiAgICAgICAgLy8gY29sbGVjdGlvbiBldmVyeSB0aW1lIHRoZSBtYWluIGxvb3AgcnVucy5cclxuICAgICAgICB0aGlzLnBhbmljID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIGhvdyBtYW55IG1pbGxpc2Vjb25kcyBzaG91bGQgYmUgc2ltdWxhdGVkIGJ5IGV2ZXJ5IHJ1biBvZiB1cGRhdGUoKS5cclxuICAgICAqXHJcbiAgICAgKiBTZWUgYE1haW5Mb29wLnNldFNpbXVsYXRpb25UaW1lc3RlcCgpYCBmb3IgZGV0YWlscyBvbiB0aGlzIHZhbHVlLlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm4ge051bWJlcn1cclxuICAgICAqICAgVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdGhhdCBzaG91bGQgYmUgc2ltdWxhdGVkIGJ5IGV2ZXJ5IHJ1biBvZlxyXG4gICAgICogICB7QGxpbmsgI3NldFVwZGF0ZSB1cGRhdGV9KCkuXHJcbiAgICAgKi9cclxuICAgIGdldFNpbXVsYXRpb25UaW1lc3RlcCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNpbXVsYXRpb25UaW1lc3RlcDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldHMgaG93IG1hbnkgbWlsbGlzZWNvbmRzIHNob3VsZCBiZSBzaW11bGF0ZWQgYnkgZXZlcnkgcnVuIG9mIHVwZGF0ZSgpLlxyXG4gICAgICpcclxuICAgICAqIFRoZSBwZXJjZWl2ZWQgZnJhbWVzIHBlciBzZWNvbmQgKEZQUykgaXMgZWZmZWN0aXZlbHkgY2FwcGVkIGF0IHRoZVxyXG4gICAgICogbXVsdGlwbGljYXRpdmUgaW52ZXJzZSBvZiB0aGUgc2ltdWxhdGlvbiB0aW1lc3RlcC4gVGhhdCBpcywgaWYgdGhlXHJcbiAgICAgKiB0aW1lc3RlcCBpcyAxMDAwIC8gNjAgKHdoaWNoIGlzIHRoZSBkZWZhdWx0KSwgdGhlbiB0aGUgbWF4aW11bSBwZXJjZWl2ZWRcclxuICAgICAqIEZQUyBpcyBlZmZlY3RpdmVseSA2MC4gRGVjcmVhc2luZyB0aGUgdGltZXN0ZXAgaW5jcmVhc2VzIHRoZSBtYXhpbXVtXHJcbiAgICAgKiBwZXJjZWl2ZWQgRlBTIGF0IHRoZSBjb3N0IG9mIHJ1bm5pbmcge0BsaW5rICNzZXRVcGRhdGUgdXBkYXRlfSgpIG1vcmVcclxuICAgICAqIHRpbWVzIHBlciBmcmFtZSBhdCBsb3dlciBmcmFtZSByYXRlcy4gU2luY2UgcnVubmluZyB1cGRhdGUoKSBtb3JlIHRpbWVzXHJcbiAgICAgKiB0YWtlcyBtb3JlIHRpbWUgdG8gcHJvY2VzcywgdGhpcyBjYW4gYWN0dWFsbHkgc2xvdyBkb3duIHRoZSBmcmFtZSByYXRlLlxyXG4gICAgICogQWRkaXRpb25hbGx5LCBpZiB0aGUgYW1vdW50IG9mIHRpbWUgaXQgdGFrZXMgdG8gcnVuIHVwZGF0ZSgpIGV4Y2VlZHMgb3JcclxuICAgICAqIHZlcnkgbmVhcmx5IGV4Y2VlZHMgdGhlIHRpbWVzdGVwLCB0aGUgYXBwbGljYXRpb24gd2lsbCBmcmVlemUgYW5kIGNyYXNoXHJcbiAgICAgKiBpbiBhIHNwaXJhbCBvZiBkZWF0aCAodW5sZXNzIGl0IGlzIHJlc2N1ZWQ7IHNlZSBgTWFpbkxvb3Auc2V0RW5kKClgIGZvclxyXG4gICAgICogYW4gZXhwbGFuYXRpb24gb2Ygd2hhdCBjYW4gYmUgZG9uZSBpZiBhIHNwaXJhbCBvZiBkZWF0aCBpcyBvY2N1cnJpbmcpLlxyXG4gICAgICpcclxuICAgICAqIFRoZSBleGNlcHRpb24gdG8gdGhpcyBpcyB0aGF0IGludGVycG9sYXRpbmcgYmV0d2VlbiB1cGRhdGVzIGZvciBlYWNoXHJcbiAgICAgKiByZW5kZXIgY2FuIGluY3JlYXNlIHRoZSBwZXJjZWl2ZWQgZnJhbWUgcmF0ZSBhbmQgcmVkdWNlIHZpc3VhbFxyXG4gICAgICogc3R1dHRlcmluZy4gU2VlIGBNYWluTG9vcC5zZXREcmF3KClgIGZvciBhbiBleHBsYW5hdGlvbiBvZiBob3cgdG8gZG9cclxuICAgICAqIHRoaXMuXHJcbiAgICAgKlxyXG4gICAgICogSWYgeW91IGFyZSBjb25zaWRlcmluZyBkZWNyZWFzaW5nIHRoZSBzaW11bGF0aW9uIHRpbWVzdGVwIGluIG9yZGVyIHRvXHJcbiAgICAgKiByYWlzZSB0aGUgbWF4aW11bSBwZXJjZWl2ZWQgRlBTLCBrZWVwIGluIG1pbmQgdGhhdCBtb3N0IG1vbml0b3JzIGNhbid0XHJcbiAgICAgKiBkaXNwbGF5IG1vcmUgdGhhbiA2MCBGUFMuIFdoZXRoZXIgaHVtYW5zIGNhbiB0ZWxsIHRoZSBkaWZmZXJlbmNlIGFtb25nXHJcbiAgICAgKiBoaWdoIGZyYW1lIHJhdGVzIGRlcGVuZHMgb24gdGhlIGFwcGxpY2F0aW9uLCBidXQgZm9yIHJlZmVyZW5jZSwgZmlsbSBpc1xyXG4gICAgICogdXN1YWxseSBkaXNwbGF5ZWQgYXQgMjQgRlBTLCBvdGhlciB2aWRlb3MgYXQgMzAgRlBTLCBtb3N0IGdhbWVzIGFyZVxyXG4gICAgICogYWNjZXB0YWJsZSBhYm92ZSAzMCBGUFMsIGFuZCB2aXJ0dWFsIHJlYWxpdHkgbWlnaHQgcmVxdWlyZSA3NSBGUFMgdG9cclxuICAgICAqIGZlZWwgbmF0dXJhbC4gU29tZSBnYW1pbmcgbW9uaXRvcnMgZ28gdXAgdG8gMTQ0IEZQUy4gU2V0dGluZyB0aGVcclxuICAgICAqIHRpbWVzdGVwIGJlbG93IDEwMDAgLyAxNDQgaXMgZGlzY291cmFnZWQgYW5kIGJlbG93IDEwMDAgLyAyNDAgaXNcclxuICAgICAqIHN0cm9uZ2x5IGRpc2NvdXJhZ2VkLiBUaGUgZGVmYXVsdCBvZiAxMDAwIC8gNjAgaXMgZ29vZCBpbiBtb3N0IGNhc2VzLlxyXG4gICAgICpcclxuICAgICAqIFRoZSBzaW11bGF0aW9uIHRpbWVzdGVwIHNob3VsZCB0eXBpY2FsbHkgb25seSBiZSBjaGFuZ2VkIGF0XHJcbiAgICAgKiBkZXRlcm1pbmlzdGljIHRpbWVzIChlLmcuIGJlZm9yZSB0aGUgbWFpbiBsb29wIHN0YXJ0cyBmb3IgdGhlIGZpcnN0XHJcbiAgICAgKiB0aW1lLCBhbmQgbm90IGluIHJlc3BvbnNlIHRvIHVzZXIgaW5wdXQgb3Igc2xvdyBmcmFtZSByYXRlcykgdG8gYXZvaWRcclxuICAgICAqIGludHJvZHVjaW5nIG5vbi1kZXRlcm1pbmlzdGljIGJlaGF2aW9yLiBUaGUgdXBkYXRlIHRpbWVzdGVwIHNob3VsZCBiZVxyXG4gICAgICogdGhlIHNhbWUgZm9yIGFsbCBwbGF5ZXJzL3VzZXJzIGluIG11bHRpcGxheWVyL211bHRpLXVzZXIgYXBwbGljYXRpb25zLlxyXG4gICAgICpcclxuICAgICAqIFNlZSBhbHNvIGBNYWluTG9vcC5nZXRTaW11bGF0aW9uVGltZXN0ZXAoKWAuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHRpbWVzdGVwXHJcbiAgICAgKiAgIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRoYXQgc2hvdWxkIGJlIHNpbXVsYXRlZCBieSBldmVyeSBydW4gb2ZcclxuICAgICAqICAge0BsaW5rICNzZXRVcGRhdGUgdXBkYXRlfSgpLlxyXG4gICAgICovXHJcbiAgICBzZXRTaW11bGF0aW9uVGltZXN0ZXAodGltZXN0ZXA6IG51bWJlcik6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuc2ltdWxhdGlvblRpbWVzdGVwID0gdGltZXN0ZXA7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBleHBvbmVudGlhbCBtb3ZpbmcgYXZlcmFnZSBvZiB0aGUgZnJhbWVzIHBlciBzZWNvbmQuXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybiB7TnVtYmVyfVxyXG4gICAgICogICBUaGUgZXhwb25lbnRpYWwgbW92aW5nIGF2ZXJhZ2Ugb2YgdGhlIGZyYW1lcyBwZXIgc2Vjb25kLlxyXG4gICAgICovXHJcbiAgICBnZXRGUFMoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5mcHM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIHRoZSBtYXhpbXVtIGZyYW1lIHJhdGUuXHJcbiAgICAgKlxyXG4gICAgICogT3RoZXIgZmFjdG9ycyBhbHNvIGxpbWl0IHRoZSBGUFM7IHNlZSBgTWFpbkxvb3Auc2V0U2ltdWxhdGlvblRpbWVzdGVwYFxyXG4gICAgICogZm9yIGRldGFpbHMuXHJcbiAgICAgKlxyXG4gICAgICogU2VlIGFsc28gYE1haW5Mb29wLnNldE1heEFsbG93ZWRGUFMoKWAuXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybiB7TnVtYmVyfVxyXG4gICAgICogICBUaGUgbWF4aW11bSBudW1iZXIgb2YgZnJhbWVzIHBlciBzZWNvbmQgYWxsb3dlZC5cclxuICAgICAqL1xyXG4gICAgZ2V0TWF4QWxsb3dlZEZQUygpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiAxMDAwIC8gdGhpcy5taW5GcmFtZURlbGF5O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0cyBhIG1heGltdW0gZnJhbWUgcmF0ZS5cclxuICAgICAqXHJcbiAgICAgKiBTZWUgYWxzbyBgTWFpbkxvb3AuZ2V0TWF4QWxsb3dlZEZQUygpYC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2Zwcz1JbmZpbml0eV1cclxuICAgICAqICAgVGhlIG1heGltdW0gbnVtYmVyIG9mIGZyYW1lcyBwZXIgc2Vjb25kIHRvIGV4ZWN1dGUuIElmIEluZmluaXR5IG9yIG5vdFxyXG4gICAgICogICBwYXNzZWQsIHRoZXJlIHdpbGwgYmUgbm8gRlBTIGNhcCAoYWx0aG91Z2ggb3RoZXIgZmFjdG9ycyBkbyBsaW1pdCB0aGVcclxuICAgICAqICAgRlBTOyBzZWUgYE1haW5Mb29wLnNldFNpbXVsYXRpb25UaW1lc3RlcGAgZm9yIGRldGFpbHMpLiBJZiB6ZXJvLCB0aGlzXHJcbiAgICAgKiAgIHdpbGwgc3RvcCB0aGUgbG9vcCwgYW5kIHdoZW4gdGhlIGxvb3AgaXMgbmV4dCBzdGFydGVkLCBpdCB3aWxsIHJldHVyblxyXG4gICAgICogICB0byB0aGUgcHJldmlvdXMgbWF4aW11bSBmcmFtZSByYXRlLiBQYXNzaW5nIG5lZ2F0aXZlIHZhbHVlcyB3aWxsIHN0YWxsXHJcbiAgICAgKiAgIHRoZSBsb29wIHVudGlsIHRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIGFnYWluIHdpdGggYSBwb3NpdGl2ZSB2YWx1ZS5cclxuICAgICAqXHJcbiAgICAgKiBAY2hhaW5hYmxlXHJcbiAgICAgKi9cclxuICAgIHNldE1heEFsbG93ZWRGUFMoZnBzOiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICBpZiAodHlwZW9mIGZwcyA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgZnBzID0gSW5maW5pdHk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChmcHMgPT09IDApIHtcclxuICAgICAgICAgICAgdGhpcy5zdG9wKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBEaXZpZGluZyBieSBJbmZpbml0eSByZXR1cm5zIHplcm8uXHJcbiAgICAgICAgICAgIHRoaXMubWluRnJhbWVEZWxheSA9IDEwMDAgLyBmcHM7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVzZXQgdGhlIGFtb3VudCBvZiB0aW1lIHRoYXQgaGFzIG5vdCB5ZXQgYmVlbiBzaW11bGF0ZWQgdG8gemVyby5cclxuICAgICAqXHJcbiAgICAgKiBUaGlzIGludHJvZHVjZXMgbm9uLWRldGVybWluaXN0aWMgYmVoYXZpb3IgaWYgY2FsbGVkIGFmdGVyIHRoZVxyXG4gICAgICogYXBwbGljYXRpb24gaGFzIHN0YXJ0ZWQgcnVubmluZyAodW5sZXNzIGl0IGlzIGJlaW5nIHJlc2V0LCBpbiB3aGljaCBjYXNlXHJcbiAgICAgKiBpdCBkb2Vzbid0IG1hdHRlcikuIEhvd2V2ZXIsIHRoaXMgY2FuIGJlIHVzZWZ1bCBpbiBjYXNlcyB3aGVyZSB0aGVcclxuICAgICAqIGFtb3VudCBvZiB0aW1lIHRoYXQgaGFzIG5vdCB5ZXQgYmVlbiBzaW11bGF0ZWQgaGFzIGdyb3duIHZlcnkgbGFyZ2VcclxuICAgICAqIChmb3IgZXhhbXBsZSwgd2hlbiB0aGUgYXBwbGljYXRpb24ncyB0YWIgZ2V0cyBwdXQgaW4gdGhlIGJhY2tncm91bmQgYW5kXHJcbiAgICAgKiB0aGUgYnJvd3NlciB0aHJvdHRsZXMgdGhlIHRpbWVycyBhcyBhIHJlc3VsdCkuIEluIGFwcGxpY2F0aW9ucyB3aXRoXHJcbiAgICAgKiBsb2Nrc3RlcCB0aGUgcGxheWVyIHdvdWxkIGdldCBkcm9wcGVkLCBidXQgaW4gb3RoZXIgbmV0d29ya2VkXHJcbiAgICAgKiBhcHBsaWNhdGlvbnMgaXQgbWF5IGJlIG5lY2Vzc2FyeSB0byBzbmFwIG9yIGVhc2UgdGhlIHBsYXllci91c2VyIHRvIHRoZVxyXG4gICAgICogYXV0aG9yaXRhdGl2ZSBzdGF0ZSBhbmQgZGlzY2FyZCBwZW5kaW5nIHVwZGF0ZXMgaW4gdGhlIHByb2Nlc3MuIEluXHJcbiAgICAgKiBub24tbmV0d29ya2VkIGFwcGxpY2F0aW9ucyBpdCBtYXkgYWxzbyBiZSBhY2NlcHRhYmxlIHRvIHNpbXBseSByZXN1bWVcclxuICAgICAqIHRoZSBhcHBsaWNhdGlvbiB3aGVyZSBpdCBsYXN0IGxlZnQgb2ZmIGFuZCBpZ25vcmUgdGhlIGFjY3VtdWxhdGVkXHJcbiAgICAgKiB1bnNpbXVsYXRlZCB0aW1lLlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm4ge051bWJlcn1cclxuICAgICAqICAgVGhlIGN1bXVsYXRpdmUgYW1vdW50IG9mIGVsYXBzZWQgdGltZSBpbiBtaWxsaXNlY29uZHMgdGhhdCBoYXMgbm90IHlldFxyXG4gICAgICogICBiZWVuIHNpbXVsYXRlZCwgYnV0IGlzIGJlaW5nIGRpc2NhcmRlZCBhcyBhIHJlc3VsdCBvZiBjYWxsaW5nIHRoaXNcclxuICAgICAqICAgZnVuY3Rpb24uXHJcbiAgICAgKi9cclxuICAgIHJlc2V0RnJhbWVEZWx0YSgpIDogbnVtYmVyIHtcclxuICAgICAgICB2YXIgb2xkRnJhbWVEZWx0YSA9IHRoaXMuZnJhbWVEZWx0YTtcclxuICAgICAgICB0aGlzLmZyYW1lRGVsdGEgPSAwO1xyXG4gICAgICAgIHJldHVybiBvbGRGcmFtZURlbHRhO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU3RhcnRzIHRoZSBtYWluIGxvb3AuXHJcbiAgICAgKlxyXG4gICAgICogTm90ZSB0aGF0IHRoZSBhcHBsaWNhdGlvbiBpcyBub3QgY29uc2lkZXJlZCBcInJ1bm5pbmdcIiBpbW1lZGlhdGVseSBhZnRlclxyXG4gICAgICogdGhpcyBmdW5jdGlvbiByZXR1cm5zOyByYXRoZXIsIGl0IGlzIGNvbnNpZGVyZWQgXCJydW5uaW5nXCIgYWZ0ZXIgdGhlXHJcbiAgICAgKiBhcHBsaWNhdGlvbiBkcmF3cyBpdHMgZmlyc3QgZnJhbWUuIFRoZSBkaXN0aW5jdGlvbiBpcyB0aGF0IGV2ZW50XHJcbiAgICAgKiBoYW5kbGVycyBzaG91bGQgcmVtYWluIHBhdXNlZCB1bnRpbCB0aGUgYXBwbGljYXRpb24gaXMgcnVubmluZywgZXZlblxyXG4gICAgICogYWZ0ZXIgYE1haW5Mb29wLnN0YXJ0KClgIGlzIGNhbGxlZC4gQ2hlY2sgYE1haW5Mb29wLmlzUnVubmluZygpYCBmb3IgdGhlXHJcbiAgICAgKiBjdXJyZW50IHN0YXR1cy4gVG8gYWN0IGFmdGVyIHRoZSBhcHBsaWNhdGlvbiBzdGFydHMsIHJlZ2lzdGVyIGEgY2FsbGJhY2tcclxuICAgICAqIHdpdGggcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCkgYWZ0ZXIgY2FsbGluZyB0aGlzIGZ1bmN0aW9uIGFuZCBleGVjdXRlIHRoZVxyXG4gICAgICogYWN0aW9uIGluIHRoYXQgY2FsbGJhY2suIEl0IGlzIHNhZmUgdG8gY2FsbCBgTWFpbkxvb3Auc3RhcnQoKWAgbXVsdGlwbGVcclxuICAgICAqIHRpbWVzIGV2ZW4gYmVmb3JlIHRoZSBhcHBsaWNhdGlvbiBzdGFydHMgcnVubmluZyBhbmQgd2l0aG91dCBjYWxsaW5nXHJcbiAgICAgKiBgTWFpbkxvb3Auc3RvcCgpYCBpbiBiZXR3ZWVuLCBhbHRob3VnaCB0aGVyZSBpcyBubyByZWFzb24gdG8gZG8gdGhpcztcclxuICAgICAqIHRoZSBtYWluIGxvb3Agd2lsbCBvbmx5IHN0YXJ0IGlmIGl0IGlzIG5vdCBhbHJlYWR5IHN0YXJ0ZWQuXHJcbiAgICAgKlxyXG4gICAgICogU2VlIGFsc28gYE1haW5Mb29wLnN0b3AoKWAuXHJcbiAgICAgKi9cclxuICAgIHN0YXJ0KCk6IHZvaWQge1xyXG4gICAgICAgIGlmICghdGhpcy5zdGFydGVkKSB7XHJcbiAgICAgICAgICAgIC8vIFNpbmNlIHRoZSBhcHBsaWNhdGlvbiBkb2Vzbid0IHN0YXJ0IHJ1bm5pbmcgaW1tZWRpYXRlbHksIHRyYWNrXHJcbiAgICAgICAgICAgIC8vIHdoZXRoZXIgdGhpcyBmdW5jdGlvbiB3YXMgY2FsbGVkIGFuZCB1c2UgdGhhdCB0byBrZWVwIGl0IGZyb21cclxuICAgICAgICAgICAgLy8gc3RhcnRpbmcgdGhlIG1haW4gbG9vcCBtdWx0aXBsZSB0aW1lcy5cclxuICAgICAgICAgICAgdGhpcy5zdGFydGVkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIC8vIEluIHRoZSBtYWluIGxvb3AsIGRyYXcoKSBpcyBjYWxsZWQgYWZ0ZXIgdXBkYXRlKCksIHNvIGlmIHdlXHJcbiAgICAgICAgICAgIC8vIGVudGVyZWQgdGhlIG1haW4gbG9vcCBpbW1lZGlhdGVseSwgd2Ugd291bGQgbmV2ZXIgcmVuZGVyIHRoZVxyXG4gICAgICAgICAgICAvLyBpbml0aWFsIHN0YXRlIGJlZm9yZSBhbnkgdXBkYXRlcyBvY2N1ci4gSW5zdGVhZCwgd2UgcnVuIG9uZVxyXG4gICAgICAgICAgICAvLyBmcmFtZSB3aGVyZSBhbGwgd2UgZG8gaXMgZHJhdywgYW5kIHRoZW4gc3RhcnQgdGhlIG1haW4gbG9vcCB3aXRoXHJcbiAgICAgICAgICAgIC8vIHRoZSBuZXh0IGZyYW1lLlxyXG4gICAgICAgICAgICB0aGlzLnJhZiA9IHJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLnN0YXJ0TG9vcC5iaW5kKHRoaXMpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc3RhcnRMb29wKHRpbWVzdGFtcCA6IG51bWJlcik6IHZvaWQge1xyXG4gICAgICAgIC8vIFJlbmRlciB0aGUgaW5pdGlhbCBzdGF0ZSBiZWZvcmUgYW55IHVwZGF0ZXMgb2NjdXIuXHJcbiAgICAgICAgdGhpcy5kcmF3KDEpO1xyXG5cclxuICAgICAgICAvLyBUaGUgYXBwbGljYXRpb24gaXNuJ3QgY29uc2lkZXJlZCBcInJ1bm5pbmdcIiB1bnRpbCB0aGVcclxuICAgICAgICAvLyBhcHBsaWNhdGlvbiBzdGFydHMgZHJhd2luZy5cclxuICAgICAgICB0aGlzLnJ1bm5pbmcgPSB0cnVlO1xyXG5cclxuICAgICAgICAvLyBSZXNldCB2YXJpYWJsZXMgdGhhdCBhcmUgdXNlZCBmb3IgdHJhY2tpbmcgdGltZSBzbyB0aGF0IHdlXHJcbiAgICAgICAgLy8gZG9uJ3Qgc2ltdWxhdGUgdGltZSBwYXNzZWQgd2hpbGUgdGhlIGFwcGxpY2F0aW9uIHdhcyBwYXVzZWQuXHJcbiAgICAgICAgdGhpcy5sYXN0RnJhbWVUaW1lTXMgPSB0aW1lc3RhbXA7XHJcbiAgICAgICAgdGhpcy5sYXN0RnBzVXBkYXRlID0gdGltZXN0YW1wO1xyXG4gICAgICAgIHRoaXMuZnJhbWVzU2luY2VMYXN0RnBzVXBkYXRlID0gMDtcclxuXHJcbiAgICAgICAgLy8gU3RhcnQgdGhlIG1haW4gbG9vcC5cclxuICAgICAgICB0aGlzLnJhZiA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5hbmltYXRlLmJpbmQodGhpcykpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB3aGV0aGVyIHRoZSBtYWluIGxvb3AgaXMgY3VycmVudGx5IHJ1bm5pbmcuXHJcbiAgICAgKlxyXG4gICAgICogU2VlIGFsc28gYE1haW5Mb29wLnN0YXJ0KClgIGFuZCBgTWFpbkxvb3Auc3RvcCgpYC5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxyXG4gICAgICogICBXaGV0aGVyIHRoZSBtYWluIGxvb3AgaXMgY3VycmVudGx5IHJ1bm5pbmcuXHJcbiAgICAgKi9cclxuICAgIGlzUnVubmluZygpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5ydW5uaW5nO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU3RvcHMgdGhlIG1haW4gbG9vcC5cclxuICAgICAqXHJcbiAgICAgKiBFdmVudCBoYW5kbGluZyBhbmQgb3RoZXIgYmFja2dyb3VuZCB0YXNrcyBzaG91bGQgYWxzbyBiZSBwYXVzZWQgd2hlbiB0aGVcclxuICAgICAqIG1haW4gbG9vcCBpcyBwYXVzZWQuXHJcbiAgICAgKlxyXG4gICAgICogTm90ZSB0aGF0IHBhdXNpbmcgaW4gbXVsdGlwbGF5ZXIvbXVsdGktdXNlciBhcHBsaWNhdGlvbnMgd2lsbCBjYXVzZSB0aGVcclxuICAgICAqIHBsYXllcidzL3VzZXIncyBjbGllbnQgdG8gYmVjb21lIG91dCBvZiBzeW5jLiBJbiB0aGlzIGNhc2UgdGhlXHJcbiAgICAgKiBzaW11bGF0aW9uIHNob3VsZCBleGl0LCBvciB0aGUgcGxheWVyL3VzZXIgbmVlZHMgdG8gYmUgc25hcHBlZCB0byB0aGVpclxyXG4gICAgICogdXBkYXRlZCBwb3NpdGlvbiB3aGVuIHRoZSBtYWluIGxvb3AgaXMgc3RhcnRlZCBhZ2Fpbi5cclxuICAgICAqXHJcbiAgICAgKiBTZWUgYWxzbyBgTWFpbkxvb3Auc3RhcnQoKWAgYW5kIGBNYWluTG9vcC5pc1J1bm5pbmcoKWAuXHJcbiAgICAgKi9cclxuICAgIHN0b3AoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5ydW5uaW5nID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5zdGFydGVkID0gZmFsc2U7XHJcbiAgICAgICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMucmFmKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBtYWluIGxvb3AgdGhhdCBydW5zIHVwZGF0ZXMgYW5kIHJlbmRlcmluZy5cclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIHtET01IaWdoUmVzVGltZVN0YW1wfSB0aW1lc3RhbXBcclxuICAgICAqIFRoZSBjdXJyZW50IHRpbWVzdGFtcC4gSW4gcHJhY3RpY2UgdGhpcyBpcyBzdXBwbGllZCBieVxyXG4gICAgICogcmVxdWVzdEFuaW1hdGlvbkZyYW1lIGF0IHRoZSB0aW1lIHRoYXQgaXQgc3RhcnRzIHRvIGZpcmUgY2FsbGJhY2tzLiBUaGlzXHJcbiAgICAgKiBzaG91bGQgb25seSBiZSB1c2VkIGZvciBjb21wYXJpc29uIHRvIG90aGVyIHRpbWVzdGFtcHMgYmVjYXVzZSB0aGUgZXBvY2hcclxuICAgICAqIChpLmUuIHRoZSBcInplcm9cIiB0aW1lKSBkZXBlbmRzIG9uIHRoZSBlbmdpbmUgcnVubmluZyB0aGlzIGNvZGUuIEluIGVuZ2luZXNcclxuICAgICAqIHRoYXQgc3VwcG9ydCBgRE9NSGlnaFJlc1RpbWVTdGFtcGAgKGFsbCBtb2Rlcm4gYnJvd3NlcnMgZXhjZXB0IGlPUyBTYWZhcmlcclxuICAgICAqIDgpIHRoZSBlcG9jaCBpcyB0aGUgdGltZSB0aGUgcGFnZSBzdGFydGVkIGxvYWRpbmcsIHNwZWNpZmljYWxseVxyXG4gICAgICogYHBlcmZvcm1hbmNlLnRpbWluZy5uYXZpZ2F0aW9uU3RhcnRgLiBFdmVyeXdoZXJlIGVsc2UsIGluY2x1ZGluZyBub2RlLmpzLFxyXG4gICAgICogdGhlIGVwb2NoIGlzIHRoZSBVbml4IGVwb2NoICgxOTcwLTAxLTAxVDAwOjAwOjAwWikuXHJcbiAgICAgKiBcclxuICAgICAqIEBpZ25vcmVcclxuICAgICAqL1xyXG4gICAgYW5pbWF0ZSh0aW1lc3RhbXAgOiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICAvLyBSdW4gdGhlIGxvb3AgYWdhaW4gdGhlIG5leHQgdGltZSB0aGUgYnJvd3NlciBpcyByZWFkeSB0byByZW5kZXIuXHJcbiAgICAgICAgLy8gV2Ugc2V0IHJhZkhhbmRsZSBpbW1lZGlhdGVseSBzbyB0aGF0IHRoZSBuZXh0IGZyYW1lIGNhbiBiZSBjYW5jZWxlZFxyXG4gICAgICAgIC8vIGR1cmluZyB0aGUgY3VycmVudCBmcmFtZS5cclxuICAgICAgICB0aGlzLnJhZiA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5hbmltYXRlLmJpbmQodGhpcykpO1xyXG5cclxuICAgICAgICAvLyBUaHJvdHRsZSB0aGUgZnJhbWUgcmF0ZSAoaWYgbWluRnJhbWVEZWxheSBpcyBzZXQgdG8gYSBub24temVybyB2YWx1ZSBieVxyXG4gICAgICAgIC8vIGBNYWluTG9vcC5zZXRNYXhBbGxvd2VkRlBTKClgKS5cclxuICAgICAgICBpZiAodGltZXN0YW1wIDwgdGhpcy5sYXN0RnJhbWVUaW1lTXMgKyB0aGlzLm1pbkZyYW1lRGVsYXkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gZnJhbWVEZWx0YSBpcyB0aGUgY3VtdWxhdGl2ZSBhbW91bnQgb2YgaW4tYXBwIHRpbWUgdGhhdCBoYXNuJ3QgYmVlblxyXG4gICAgICAgIC8vIHNpbXVsYXRlZCB5ZXQuIEFkZCB0aGUgdGltZSBzaW5jZSB0aGUgbGFzdCBmcmFtZS4gV2UgbmVlZCB0byB0cmFjayB0b3RhbFxyXG4gICAgICAgIC8vIG5vdC15ZXQtc2ltdWxhdGVkIHRpbWUgKGFzIG9wcG9zZWQgdG8ganVzdCB0aGUgdGltZSBlbGFwc2VkIHNpbmNlIHRoZVxyXG4gICAgICAgIC8vIGxhc3QgZnJhbWUpIGJlY2F1c2Ugbm90IGFsbCBhY3R1YWxseSBlbGFwc2VkIHRpbWUgaXMgZ3VhcmFudGVlZCB0byBiZVxyXG4gICAgICAgIC8vIHNpbXVsYXRlZCBlYWNoIGZyYW1lLiBTZWUgdGhlIGNvbW1lbnRzIGJlbG93IGZvciBkZXRhaWxzLlxyXG4gICAgICAgIHRoaXMuZnJhbWVEZWx0YSArPSB0aW1lc3RhbXAgLSB0aGlzLmxhc3RGcmFtZVRpbWVNcztcclxuICAgICAgICB0aGlzLmxhc3RGcmFtZVRpbWVNcyA9IHRpbWVzdGFtcDtcclxuXHJcbiAgICAgICAgLy8gUnVuIGFueSB1cGRhdGVzIHRoYXQgYXJlIG5vdCBkZXBlbmRlbnQgb24gdGltZSBpbiB0aGUgc2ltdWxhdGlvbi4gU2VlXHJcbiAgICAgICAgLy8gYE1haW5Mb29wLnNldEJlZ2luKClgIGZvciBhZGRpdGlvbmFsIGRldGFpbHMgb24gaG93IHRvIHVzZSB0aGlzLlxyXG4gICAgICAgIHRoaXMuYmVnaW4odGltZXN0YW1wLCB0aGlzLmZyYW1lRGVsdGEpO1xyXG5cclxuICAgICAgICAvLyBVcGRhdGUgdGhlIGVzdGltYXRlIG9mIHRoZSBmcmFtZSByYXRlLCBgZnBzYC4gQXBwcm94aW1hdGVseSBldmVyeVxyXG4gICAgICAgIC8vIHNlY29uZCwgdGhlIG51bWJlciBvZiBmcmFtZXMgdGhhdCBvY2N1cnJlZCBpbiB0aGF0IHNlY29uZCBhcmUgaW5jbHVkZWRcclxuICAgICAgICAvLyBpbiBhbiBleHBvbmVudGlhbCBtb3ZpbmcgYXZlcmFnZSBvZiBhbGwgZnJhbWVzIHBlciBzZWNvbmQuIFRoaXMgbWVhbnNcclxuICAgICAgICAvLyB0aGF0IG1vcmUgcmVjZW50IHNlY29uZHMgYWZmZWN0IHRoZSBlc3RpbWF0ZWQgZnJhbWUgcmF0ZSBtb3JlIHRoYW4gb2xkZXJcclxuICAgICAgICAvLyBzZWNvbmRzLlxyXG4gICAgICAgIGlmICh0aW1lc3RhbXAgPiB0aGlzLmxhc3RGcHNVcGRhdGUgKyB0aGlzLmZwc1VwZGF0ZUludGVydmFsKSB7XHJcbiAgICAgICAgICAgIC8vIENvbXB1dGUgdGhlIG5ldyBleHBvbmVudGlhbCBtb3ZpbmcgYXZlcmFnZS5cclxuICAgICAgICAgICAgdGhpcy5mcHMgPVxyXG4gICAgICAgICAgICAgICAgLy8gRGl2aWRlIHRoZSBudW1iZXIgb2YgZnJhbWVzIHNpbmNlIHRoZSBsYXN0IEZQUyB1cGRhdGUgYnkgdGhlXHJcbiAgICAgICAgICAgICAgICAvLyBhbW91bnQgb2YgdGltZSB0aGF0IGhhcyBwYXNzZWQgdG8gZ2V0IHRoZSBtZWFuIGZyYW1lcyBwZXIgc2Vjb25kXHJcbiAgICAgICAgICAgICAgICAvLyBvdmVyIHRoYXQgcGVyaW9kLiBUaGlzIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHNsaWdodGx5IG1vcmUgdGhhbiBhXHJcbiAgICAgICAgICAgICAgICAvLyBzZWNvbmQgaGFzIGxpa2VseSBwYXNzZWQgc2luY2UgdGhlIGxhc3QgdXBkYXRlLlxyXG4gICAgICAgICAgICAgICAgdGhpcy5mcHNBbHBoYSAqIHRoaXMuZnJhbWVzU2luY2VMYXN0RnBzVXBkYXRlICogMTAwMCAvICh0aW1lc3RhbXAgLSB0aGlzLmxhc3RGcHNVcGRhdGUpICtcclxuICAgICAgICAgICAgICAgICgxIC0gdGhpcy5mcHNBbHBoYSkgKiB0aGlzLmZwcztcclxuXHJcbiAgICAgICAgICAgIC8vIFJlc2V0IHRoZSBmcmFtZSBjb3VudGVyIGFuZCBsYXN0LXVwZGF0ZWQgdGltZXN0YW1wIHNpbmNlIHRoZWlyXHJcbiAgICAgICAgICAgIC8vIGxhdGVzdCB2YWx1ZXMgaGF2ZSBub3cgYmVlbiBpbmNvcnBvcmF0ZWQgaW50byB0aGUgRlBTIGVzdGltYXRlLlxyXG4gICAgICAgICAgICB0aGlzLmxhc3RGcHNVcGRhdGUgPSB0aW1lc3RhbXA7XHJcbiAgICAgICAgICAgIHRoaXMuZnJhbWVzU2luY2VMYXN0RnBzVXBkYXRlID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gQ291bnQgdGhlIGN1cnJlbnQgZnJhbWUgaW4gdGhlIG5leHQgZnJhbWVzLXBlci1zZWNvbmQgdXBkYXRlLiBUaGlzXHJcbiAgICAgICAgLy8gaGFwcGVucyBhZnRlciB0aGUgcHJldmlvdXMgc2VjdGlvbiBiZWNhdXNlIHRoZSBwcmV2aW91cyBzZWN0aW9uXHJcbiAgICAgICAgLy8gY2FsY3VsYXRlcyB0aGUgZnJhbWVzIHRoYXQgb2NjdXIgdXAgdW50aWwgYHRpbWVzdGFtcGAsIGFuZCBgdGltZXN0YW1wYFxyXG4gICAgICAgIC8vIHJlZmVycyB0byBhIHRpbWUganVzdCBiZWZvcmUgdGhlIGN1cnJlbnQgZnJhbWUgd2FzIGRlbGl2ZXJlZC5cclxuICAgICAgICB0aGlzLmZyYW1lc1NpbmNlTGFzdEZwc1VwZGF0ZSsrO1xyXG5cclxuICAgICAgICAvKlxyXG4gICAgICAgICAqIEEgbmFpdmUgd2F5IHRvIG1vdmUgYW4gb2JqZWN0IGFsb25nIGl0cyBYLWF4aXMgbWlnaHQgYmUgdG8gd3JpdGUgYSBtYWluXHJcbiAgICAgICAgICogbG9vcCBjb250YWluaW5nIHRoZSBzdGF0ZW1lbnQgYG9iai54ICs9IDEwO2Agd2hpY2ggd291bGQgbW92ZSB0aGUgb2JqZWN0XHJcbiAgICAgICAgICogMTAgdW5pdHMgcGVyIGZyYW1lLiBUaGlzIGFwcHJvYWNoIHN1ZmZlcnMgZnJvbSB0aGUgaXNzdWUgdGhhdCBpdCBpc1xyXG4gICAgICAgICAqIGRlcGVuZGVudCBvbiB0aGUgZnJhbWUgcmF0ZS4gSW4gb3RoZXIgd29yZHMsIGlmIHlvdXIgYXBwbGljYXRpb24gaXNcclxuICAgICAgICAgKiBydW5uaW5nIHNsb3dseSAodGhhdCBpcywgZmV3ZXIgZnJhbWVzIHBlciBzZWNvbmQpLCB5b3VyIG9iamVjdCB3aWxsIGFsc29cclxuICAgICAgICAgKiBhcHBlYXIgdG8gbW92ZSBzbG93bHksIHdoZXJlYXMgaWYgeW91ciBhcHBsaWNhdGlvbiBpcyBydW5uaW5nIHF1aWNrbHlcclxuICAgICAgICAgKiAodGhhdCBpcywgbW9yZSBmcmFtZXMgcGVyIHNlY29uZCksIHlvdXIgb2JqZWN0IHdpbGwgYXBwZWFyIHRvIG1vdmVcclxuICAgICAgICAgKiBxdWlja2x5LiBUaGlzIGlzIHVuZGVzaXJhYmxlLCBlc3BlY2lhbGx5IGluIG11bHRpcGxheWVyL211bHRpLXVzZXJcclxuICAgICAgICAgKiBhcHBsaWNhdGlvbnMuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBPbmUgc29sdXRpb24gaXMgdG8gbXVsdGlwbHkgdGhlIHNwZWVkIGJ5IHRoZSBhbW91bnQgb2YgdGltZSB0aGF0IGhhc1xyXG4gICAgICAgICAqIHBhc3NlZCBiZXR3ZWVuIHJlbmRlcmluZyBmcmFtZXMuIEZvciBleGFtcGxlLCBpZiB5b3Ugd2FudCB5b3VyIG9iamVjdCB0b1xyXG4gICAgICAgICAqIG1vdmUgNjAwIHVuaXRzIHBlciBzZWNvbmQsIHlvdSBtaWdodCB3cml0ZSBgb2JqLnggKz0gNjAwICogZGVsdGFgLCB3aGVyZVxyXG4gICAgICAgICAqIGBkZWx0YWAgaXMgdGhlIHRpbWUgcGFzc2VkIHNpbmNlIHRoZSBsYXN0IGZyYW1lLiAoRm9yIGNvbnZlbmllbmNlLCBsZXQnc1xyXG4gICAgICAgICAqIG1vdmUgdGhpcyBzdGF0ZW1lbnQgdG8gYW4gdXBkYXRlKCkgZnVuY3Rpb24gdGhhdCB0YWtlcyBgZGVsdGFgIGFzIGFcclxuICAgICAgICAgKiBwYXJhbWV0ZXIuKSBUaGlzIHdheSwgeW91ciBvYmplY3Qgd2lsbCBtb3ZlIGEgY29uc3RhbnQgZGlzdGFuY2Ugb3ZlclxyXG4gICAgICAgICAqIHRpbWUuIEhvd2V2ZXIsIGF0IGxvdyBmcmFtZSByYXRlcyBhbmQgaGlnaCBzcGVlZHMsIHlvdXIgb2JqZWN0IHdpbGwgbW92ZVxyXG4gICAgICAgICAqIGxhcmdlIGRpc3RhbmNlcyBldmVyeSBmcmFtZSwgd2hpY2ggY2FuIGNhdXNlIGl0IHRvIGRvIHN0cmFuZ2UgdGhpbmdzXHJcbiAgICAgICAgICogc3VjaCBhcyBtb3ZlIHRocm91Z2ggd2FsbHMuIEFkZGl0aW9uYWxseSwgd2Ugd291bGQgbGlrZSBvdXIgcHJvZ3JhbSB0b1xyXG4gICAgICAgICAqIGJlIGRldGVybWluaXN0aWMuIFRoYXQgaXMsIGV2ZXJ5IHRpbWUgd2UgcnVuIHRoZSBhcHBsaWNhdGlvbiB3aXRoIHRoZVxyXG4gICAgICAgICAqIHNhbWUgaW5wdXQsIHdlIHdvdWxkIGxpa2UgZXhhY3RseSB0aGUgc2FtZSBvdXRwdXQuIElmIHRoZSB0aW1lIGJldHdlZW5cclxuICAgICAgICAgKiBmcmFtZXMgKHRoZSBgZGVsdGFgKSB2YXJpZXMsIG91ciBvdXRwdXQgd2lsbCBkaXZlcmdlIHRoZSBsb25nZXIgdGhlXHJcbiAgICAgICAgICogcHJvZ3JhbSBydW5zIGR1ZSB0byBhY2N1bXVsYXRlZCByb3VuZGluZyBlcnJvcnMsIGV2ZW4gYXQgbm9ybWFsIGZyYW1lXHJcbiAgICAgICAgICogcmF0ZXMuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBBIGJldHRlciBzb2x1dGlvbiBpcyB0byBzZXBhcmF0ZSB0aGUgYW1vdW50IG9mIHRpbWUgc2ltdWxhdGVkIGluIGVhY2hcclxuICAgICAgICAgKiB1cGRhdGUoKSBmcm9tIHRoZSBhbW91bnQgb2YgdGltZSBiZXR3ZWVuIGZyYW1lcy4gT3VyIHVwZGF0ZSgpIGZ1bmN0aW9uXHJcbiAgICAgICAgICogZG9lc24ndCBuZWVkIHRvIGNoYW5nZTsgd2UganVzdCBuZWVkIHRvIGNoYW5nZSB0aGUgZGVsdGEgd2UgcGFzcyB0byBpdFxyXG4gICAgICAgICAqIHNvIHRoYXQgZWFjaCB1cGRhdGUoKSBzaW11bGF0ZXMgYSBmaXhlZCBhbW91bnQgb2YgdGltZSAodGhhdCBpcywgYGRlbHRhYFxyXG4gICAgICAgICAqIHNob3VsZCBoYXZlIHRoZSBzYW1lIHZhbHVlIGVhY2ggdGltZSB1cGRhdGUoKSBpcyBjYWxsZWQpLiBUaGUgdXBkYXRlKClcclxuICAgICAgICAgKiBmdW5jdGlvbiBjYW4gYmUgcnVuIG11bHRpcGxlIHRpbWVzIHBlciBmcmFtZSBpZiBuZWVkZWQgdG8gc2ltdWxhdGUgdGhlXHJcbiAgICAgICAgICogdG90YWwgYW1vdW50IG9mIHRpbWUgcGFzc2VkIHNpbmNlIHRoZSBsYXN0IGZyYW1lLiAoSWYgdGhlIHRpbWUgdGhhdCBoYXNcclxuICAgICAgICAgKiBwYXNzZWQgc2luY2UgdGhlIGxhc3QgZnJhbWUgaXMgbGVzcyB0aGFuIHRoZSBmaXhlZCBzaW11bGF0aW9uIHRpbWUsIHdlXHJcbiAgICAgICAgICoganVzdCB3b24ndCBydW4gYW4gdXBkYXRlKCkgdW50aWwgdGhlIHRoZSBuZXh0IGZyYW1lLiBJZiB0aGVyZSBpc1xyXG4gICAgICAgICAqIHVuc2ltdWxhdGVkIHRpbWUgbGVmdCBvdmVyIHRoYXQgaXMgbGVzcyB0aGFuIG91ciB0aW1lc3RlcCwgd2UnbGwganVzdFxyXG4gICAgICAgICAqIGxlYXZlIGl0IHRvIGJlIHNpbXVsYXRlZCBkdXJpbmcgdGhlIG5leHQgZnJhbWUuKSBUaGlzIGFwcHJvYWNoIGF2b2lkc1xyXG4gICAgICAgICAqIGluY29uc2lzdGVudCByb3VuZGluZyBlcnJvcnMgYW5kIGVuc3VyZXMgdGhhdCB0aGVyZSBhcmUgbm8gZ2lhbnQgbGVhcHNcclxuICAgICAgICAgKiB0aHJvdWdoIHdhbGxzIGJldHdlZW4gZnJhbWVzLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogVGhhdCBpcyB3aGF0IGlzIGRvbmUgYmVsb3cuIEl0IGludHJvZHVjZXMgYSBuZXcgcHJvYmxlbSwgYnV0IGl0IGlzIGFcclxuICAgICAgICAgKiBtYW5hZ2VhYmxlIG9uZTogaWYgdGhlIGFtb3VudCBvZiB0aW1lIHNwZW50IHNpbXVsYXRpbmcgaXMgY29uc2lzdGVudGx5XHJcbiAgICAgICAgICogbG9uZ2VyIHRoYW4gdGhlIGFtb3VudCBvZiB0aW1lIGJldHdlZW4gZnJhbWVzLCB0aGUgYXBwbGljYXRpb24gY291bGRcclxuICAgICAgICAgKiBmcmVlemUgYW5kIGNyYXNoIGluIGEgc3BpcmFsIG9mIGRlYXRoLiBUaGlzIHdvbid0IGhhcHBlbiBhcyBsb25nIGFzIHRoZVxyXG4gICAgICAgICAqIGZpeGVkIHNpbXVsYXRpb24gdGltZSBpcyBzZXQgdG8gYSB2YWx1ZSB0aGF0IGlzIGhpZ2ggZW5vdWdoIHRoYXRcclxuICAgICAgICAgKiB1cGRhdGUoKSBjYWxscyB1c3VhbGx5IHRha2UgbGVzcyB0aW1lIHRoYW4gdGhlIGFtb3VudCBvZiB0aW1lIHRoZXkncmVcclxuICAgICAgICAgKiBzaW11bGF0aW5nLiBJZiBpdCBkb2VzIHN0YXJ0IHRvIGhhcHBlbiBhbnl3YXksIHNlZSBgTWFpbkxvb3Auc2V0RW5kKClgXHJcbiAgICAgICAgICogZm9yIGEgZGlzY3Vzc2lvbiBvZiB3YXlzIHRvIHN0b3AgaXQuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBBZGRpdGlvbmFsbHksIHNlZSBgTWFpbkxvb3Auc2V0VXBkYXRlKClgIGZvciBhIGRpc2N1c3Npb24gb2YgcGVyZm9ybWFuY2VcclxuICAgICAgICAgKiBjb25zaWRlcmF0aW9ucy5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEZ1cnRoZXIgcmVhZGluZyBmb3IgdGhvc2UgaW50ZXJlc3RlZDpcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIC0gaHR0cDovL2dhbWVwcm9ncmFtbWluZ3BhdHRlcm5zLmNvbS9nYW1lLWxvb3AuaHRtbFxyXG4gICAgICAgICAqIC0gaHR0cDovL2dhZmZlcm9uZ2FtZXMuY29tL2dhbWUtcGh5c2ljcy9maXgteW91ci10aW1lc3RlcC9cclxuICAgICAgICAgKiAtIGh0dHBzOi8vZ2FtZWFsY2hlbWlzdC53b3JkcHJlc3MuY29tLzIwMTMvMDMvMTYvdGhvdWdodHMtb24tdGhlLWphdmFzY3JpcHQtZ2FtZS1sb29wL1xyXG4gICAgICAgICAqIC0gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9HYW1lcy9BbmF0b215XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5udW1VcGRhdGVTdGVwcyA9IDA7XHJcbiAgICAgICAgd2hpbGUgKHRoaXMuZnJhbWVEZWx0YSA+PSB0aGlzLnNpbXVsYXRpb25UaW1lc3RlcCkge1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZSh0aGlzLnNpbXVsYXRpb25UaW1lc3RlcCk7XHJcbiAgICAgICAgICAgIHRoaXMuZnJhbWVEZWx0YSAtPSB0aGlzLnNpbXVsYXRpb25UaW1lc3RlcDtcclxuXHJcbiAgICAgICAgICAgIC8qXHJcbiAgICAgICAgICAgICAqIFNhbml0eSBjaGVjazogYmFpbCBpZiB3ZSBydW4gdGhlIGxvb3AgdG9vIG1hbnkgdGltZXMuXHJcbiAgICAgICAgICAgICAqXHJcbiAgICAgICAgICAgICAqIE9uZSB3YXkgdGhpcyBjb3VsZCBoYXBwZW4gaXMgaWYgdXBkYXRlKCkgdGFrZXMgbG9uZ2VyIHRvIHJ1biB0aGFuXHJcbiAgICAgICAgICAgICAqIHRoZSB0aW1lIGl0IHNpbXVsYXRlcywgdGhlcmVieSBjYXVzaW5nIGEgc3BpcmFsIG9mIGRlYXRoLiBGb3Igd2F5c1xyXG4gICAgICAgICAgICAgKiB0byBhdm9pZCB0aGlzLCBzZWUgYE1haW5Mb29wLnNldEVuZCgpYC4gQW5vdGhlciB3YXkgdGhpcyBjb3VsZFxyXG4gICAgICAgICAgICAgKiBoYXBwZW4gaXMgaWYgdGhlIGJyb3dzZXIgdGhyb3R0bGVzIHNlcnZpbmcgZnJhbWVzLCB3aGljaCB0eXBpY2FsbHlcclxuICAgICAgICAgICAgICogb2NjdXJzIHdoZW4gdGhlIHRhYiBpcyBpbiB0aGUgYmFja2dyb3VuZCBvciB0aGUgZGV2aWNlIGJhdHRlcnkgaXNcclxuICAgICAgICAgICAgICogbG93LiBBbiBldmVudCBvdXRzaWRlIG9mIHRoZSBtYWluIGxvb3Agc3VjaCBhcyBhdWRpbyBwcm9jZXNzaW5nIG9yXHJcbiAgICAgICAgICAgICAqIHN5bmNocm9ub3VzIHJlc291cmNlIHJlYWRzIGNvdWxkIGFsc28gY2F1c2UgdGhlIGFwcGxpY2F0aW9uIHRvIGhhbmdcclxuICAgICAgICAgICAgICogdGVtcG9yYXJpbHkgYW5kIGFjY3VtdWxhdGUgbm90LXlldC1zaW11bGF0ZWQgdGltZSBhcyBhIHJlc3VsdC5cclxuICAgICAgICAgICAgICpcclxuICAgICAgICAgICAgICogMjQwIGlzIGNob3NlbiBiZWNhdXNlLCBmb3IgYW55IHNhbmUgdmFsdWUgb2Ygc2ltdWxhdGlvblRpbWVzdGVwLCAyNDBcclxuICAgICAgICAgICAgICogdXBkYXRlcyB3aWxsIHNpbXVsYXRlIGF0IGxlYXN0IG9uZSBzZWNvbmQsIGFuZCBpdCB3aWxsIHNpbXVsYXRlIGZvdXJcclxuICAgICAgICAgICAgICogc2Vjb25kcyB3aXRoIHRoZSBkZWZhdWx0IHZhbHVlIG9mIHNpbXVsYXRpb25UaW1lc3RlcC4gKFNhZmFyaVxyXG4gICAgICAgICAgICAgKiBub3RpZmllcyB1c2VycyB0aGF0IHRoZSBzY3JpcHQgaXMgdGFraW5nIHRvbyBsb25nIHRvIHJ1biBpZiBpdCB0YWtlc1xyXG4gICAgICAgICAgICAgKiBtb3JlIHRoYW4gZml2ZSBzZWNvbmRzLilcclxuICAgICAgICAgICAgICpcclxuICAgICAgICAgICAgICogSWYgdGhlcmUgYXJlIG1vcmUgdXBkYXRlcyB0byBydW4gaW4gYSBmcmFtZSB0aGFuIHRoaXMsIHRoZVxyXG4gICAgICAgICAgICAgKiBhcHBsaWNhdGlvbiB3aWxsIGFwcGVhciB0byBzbG93IGRvd24gdG8gdGhlIHVzZXIgdW50aWwgaXQgY2F0Y2hlc1xyXG4gICAgICAgICAgICAgKiBiYWNrIHVwLiBJbiBuZXR3b3JrZWQgYXBwbGljYXRpb25zIHRoaXMgd2lsbCB1c3VhbGx5IGNhdXNlIHRoZSB1c2VyXHJcbiAgICAgICAgICAgICAqIHRvIGdldCBvdXQgb2Ygc3luYyB3aXRoIHRoZWlyIHBlZXJzLCBidXQgaWYgdGhlIHVwZGF0ZXMgYXJlIHRha2luZ1xyXG4gICAgICAgICAgICAgKiB0aGlzIGxvbmcgYWxyZWFkeSwgdGhleSdyZSBwcm9iYWJseSBhbHJlYWR5IG91dCBvZiBzeW5jLlxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgaWYgKCsrdGhpcy5udW1VcGRhdGVTdGVwcyA+PSAyNDApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucGFuaWMgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qXHJcbiAgICAgICAgICogUmVuZGVyIHRoZSBzY3JlZW4uIFdlIGRvIHRoaXMgcmVnYXJkbGVzcyBvZiB3aGV0aGVyIHVwZGF0ZSgpIGhhcyBydW5cclxuICAgICAgICAgKiBkdXJpbmcgdGhpcyBmcmFtZSBiZWNhdXNlIGl0IGlzIHBvc3NpYmxlIHRvIGludGVycG9sYXRlIGJldHdlZW4gdXBkYXRlc1xyXG4gICAgICAgICAqIHRvIG1ha2UgdGhlIGZyYW1lIHJhdGUgYXBwZWFyIGZhc3RlciB0aGFuIHVwZGF0ZXMgYXJlIGFjdHVhbGx5XHJcbiAgICAgICAgICogaGFwcGVuaW5nLiBTZWUgYE1haW5Mb29wLnNldERyYXcoKWAgZm9yIGFuIGV4cGxhbmF0aW9uIG9mIGhvdyB0byBkb1xyXG4gICAgICAgICAqIHRoYXQuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBXZSBkcmF3IGFmdGVyIHVwZGF0aW5nIGJlY2F1c2Ugd2Ugd2FudCB0aGUgc2NyZWVuIHRvIHJlZmxlY3QgYSBzdGF0ZSBvZlxyXG4gICAgICAgICAqIHRoZSBhcHBsaWNhdGlvbiB0aGF0IGlzIGFzIHVwLXRvLWRhdGUgYXMgcG9zc2libGUuIChgTWFpbkxvb3Auc3RhcnQoKWBcclxuICAgICAgICAgKiBkcmF3cyB0aGUgdmVyeSBmaXJzdCBmcmFtZSBpbiB0aGUgYXBwbGljYXRpb24ncyBpbml0aWFsIHN0YXRlLCBiZWZvcmVcclxuICAgICAgICAgKiBhbnkgdXBkYXRlcyBoYXZlIG9jY3VycmVkLikgU29tZSBzb3VyY2VzIHNwZWN1bGF0ZSB0aGF0IHJlbmRlcmluZ1xyXG4gICAgICAgICAqIGVhcmxpZXIgaW4gdGhlIHJlcXVlc3RBbmltYXRpb25GcmFtZSBjYWxsYmFjayBjYW4gZ2V0IHRoZSBzY3JlZW4gcGFpbnRlZFxyXG4gICAgICAgICAqIGZhc3RlcjsgdGhpcyBpcyBtb3N0bHkgbm90IHRydWUsIGFuZCBldmVuIHdoZW4gaXQgaXMsIGl0J3MgdXN1YWxseSBqdXN0XHJcbiAgICAgICAgICogYSB0cmFkZS1vZmYgYmV0d2VlbiByZW5kZXJpbmcgdGhlIGN1cnJlbnQgZnJhbWUgc29vbmVyIGFuZCByZW5kZXJpbmcgdGhlXHJcbiAgICAgICAgICogbmV4dCBmcmFtZSBsYXRlci5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIFNlZSBgTWFpbkxvb3Auc2V0RHJhdygpYCBmb3IgZGV0YWlscyBhYm91dCBkcmF3KCkgaXRzZWxmLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuZHJhdyh0aGlzLmZyYW1lRGVsdGEgLyB0aGlzLnNpbXVsYXRpb25UaW1lc3RlcCk7XHJcblxyXG4gICAgICAgIC8vIFJ1biBhbnkgdXBkYXRlcyB0aGF0IGFyZSBub3QgZGVwZW5kZW50IG9uIHRpbWUgaW4gdGhlIHNpbXVsYXRpb24uIFNlZVxyXG4gICAgICAgIC8vIGBNYWluTG9vcC5zZXRFbmQoKWAgZm9yIGFkZGl0aW9uYWwgZGV0YWlscyBvbiBob3cgdG8gdXNlIHRoaXMuXHJcbiAgICAgICAgdGhpcy5lbmQodGhpcy5mcHMsIHRoaXMucGFuaWMpO1xyXG5cclxuICAgICAgICB0aGlzLnBhbmljID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gU1VCQ0xBU1NFUyBNVVNUIE9WRVJSSURFIEZPVVIgUkVRVUlSRUQgTUVUSE9EUzpcclxuICAgICAgICAvLyBiZWdpblxyXG4gICAgICAgIC8vIHVwZGF0ZVxyXG4gICAgICAgIC8vIGRyYXdcclxuICAgICAgICAvLyBlbmRcclxuXHJcbiAgICAvKipcclxuICAgICAqIEEgZnVuY3Rpb24gdGhhdCBydW5zIGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIG1haW4gbG9vcC5cclxuICAgICAqXHJcbiAgICAgKiBUaGUgYmVnaW4oKSBmdW5jdGlvbiBpcyB0eXBpY2FsbHkgdXNlZCB0byBwcm9jZXNzIGlucHV0IGJlZm9yZSB0aGVcclxuICAgICAqIHVwZGF0ZXMgcnVuLiBQcm9jZXNzaW5nIGlucHV0IGhlcmUgKGluIGNodW5rcykgY2FuIHJlZHVjZSB0aGUgcnVubmluZ1xyXG4gICAgICogdGltZSBvZiBldmVudCBoYW5kbGVycywgd2hpY2ggaXMgdXNlZnVsIGJlY2F1c2UgbG9uZy1ydW5uaW5nIGV2ZW50XHJcbiAgICAgKiBoYW5kbGVycyBjYW4gc29tZXRpbWVzIGRlbGF5IGZyYW1lcy5cclxuICAgICAqXHJcbiAgICAgKiBVbmxpa2Uge0BsaW5rICNzZXRVcGRhdGUgdXBkYXRlfSgpLCB3aGljaCBjYW4gcnVuIHplcm8gb3IgbW9yZSB0aW1lcyBwZXJcclxuICAgICAqIGZyYW1lLCBiZWdpbigpIGFsd2F5cyBydW5zIGV4YWN0bHkgb25jZSBwZXIgZnJhbWUuIFRoaXMgbWFrZXMgaXQgdXNlZnVsXHJcbiAgICAgKiBmb3IgYW55IHVwZGF0ZXMgdGhhdCBhcmUgbm90IGRlcGVuZGVudCBvbiB0aW1lIGluIHRoZSBzaW11bGF0aW9uLlxyXG4gICAgICogRXhhbXBsZXMgaW5jbHVkZSBhZGp1c3RpbmcgSFVEIGNhbGN1bGF0aW9ucyBvciBwZXJmb3JtaW5nIGxvbmctcnVubmluZ1xyXG4gICAgICogdXBkYXRlcyBpbmNyZW1lbnRhbGx5LiBDb21wYXJlZCB0byB7QGxpbmsgI3NldEVuZCBlbmR9KCksIGdlbmVyYWxseVxyXG4gICAgICogYWN0aW9ucyBzaG91bGQgb2NjdXIgaW4gYmVnaW4oKSBpZiB0aGV5IGFmZmVjdCBhbnl0aGluZyB0aGF0XHJcbiAgICAgKiB7QGxpbmsgI3NldFVwZGF0ZSB1cGRhdGV9KCkgb3Ige0BsaW5rICNzZXREcmF3IGRyYXd9KCkgdXNlLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGJlZ2luXHJcbiAgICAgKiAgIFRoZSBiZWdpbigpIGZ1bmN0aW9uLlxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtiZWdpbi50aW1lc3RhbXBdXHJcbiAgICAgKiAgIFRoZSBjdXJyZW50IHRpbWVzdGFtcCAod2hlbiB0aGUgZnJhbWUgc3RhcnRlZCksIGluIG1pbGxpc2Vjb25kcy4gVGhpc1xyXG4gICAgICogICBzaG91bGQgb25seSBiZSB1c2VkIGZvciBjb21wYXJpc29uIHRvIG90aGVyIHRpbWVzdGFtcHMgYmVjYXVzZSB0aGVcclxuICAgICAqICAgZXBvY2ggKGkuZS4gdGhlIFwiemVyb1wiIHRpbWUpIGRlcGVuZHMgb24gdGhlIGVuZ2luZSBydW5uaW5nIHRoaXMgY29kZS5cclxuICAgICAqICAgSW4gZW5naW5lcyB0aGF0IHN1cHBvcnQgYERPTUhpZ2hSZXNUaW1lU3RhbXBgIChhbGwgbW9kZXJuIGJyb3dzZXJzXHJcbiAgICAgKiAgIGV4Y2VwdCBpT1MgU2FmYXJpIDgpIHRoZSBlcG9jaCBpcyB0aGUgdGltZSB0aGUgcGFnZSBzdGFydGVkIGxvYWRpbmcsXHJcbiAgICAgKiAgIHNwZWNpZmljYWxseSBgcGVyZm9ybWFuY2UudGltaW5nLm5hdmlnYXRpb25TdGFydGAuIEV2ZXJ5d2hlcmUgZWxzZSxcclxuICAgICAqICAgaW5jbHVkaW5nIG5vZGUuanMsIHRoZSBlcG9jaCBpcyB0aGUgVW5peCBlcG9jaCAoMTk3MC0wMS0wMVQwMDowMDowMFopLlxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtiZWdpbi5kZWx0YV1cclxuICAgICAqICAgVGhlIHRvdGFsIGVsYXBzZWQgdGltZSB0aGF0IGhhcyBub3QgeWV0IGJlZW4gc2ltdWxhdGVkLCBpblxyXG4gICAgICogICBtaWxsaXNlY29uZHMuXHJcbiAgICAgKi9cclxuICAgIGFic3RyYWN0IGJlZ2luKHRpbWVzdGFtcCA6IG51bWJlciwgZGVsdGEgOiBudW1iZXIpIDogdm9pZDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEEgZnVuY3Rpb24gdGhhdCBydW5zIHVwZGF0ZXMgKGkuZS4gQUkgYW5kIHBoeXNpY3MpLlxyXG4gICAgICpcclxuICAgICAqIFRoZSB1cGRhdGUoKSBmdW5jdGlvbiBzaG91bGQgc2ltdWxhdGUgYW55dGhpbmcgdGhhdCBpcyBhZmZlY3RlZCBieSB0aW1lLlxyXG4gICAgICogSXQgY2FuIGJlIGNhbGxlZCB6ZXJvIG9yIG1vcmUgdGltZXMgcGVyIGZyYW1lIGRlcGVuZGluZyBvbiB0aGUgZnJhbWVcclxuICAgICAqIHJhdGUuXHJcbiAgICAgKlxyXG4gICAgICogQXMgd2l0aCBldmVyeXRoaW5nIGluIHRoZSBtYWluIGxvb3AsIHRoZSBydW5uaW5nIHRpbWUgb2YgdXBkYXRlKClcclxuICAgICAqIGRpcmVjdGx5IGFmZmVjdHMgdGhlIGZyYW1lIHJhdGUuIElmIHVwZGF0ZSgpIHRha2VzIGxvbmcgZW5vdWdoIHRoYXQgdGhlXHJcbiAgICAgKiBmcmFtZSByYXRlIGRyb3BzIGJlbG93IHRoZSB0YXJnZXQgKFwiYnVkZ2V0ZWRcIikgZnJhbWUgcmF0ZSwgcGFydHMgb2YgdGhlXHJcbiAgICAgKiB1cGRhdGUoKSBmdW5jdGlvbiB0aGF0IGRvIG5vdCBuZWVkIHRvIGV4ZWN1dGUgYmV0d2VlbiBldmVyeSBmcmFtZSBjYW4gYmVcclxuICAgICAqIG1vdmVkIGludG8gV2ViIFdvcmtlcnMuIChWYXJpb3VzIHNvdXJjZXMgb24gdGhlIGludGVybmV0IHNvbWV0aW1lc1xyXG4gICAgICogc3VnZ2VzdCBvdGhlciBzY2hlZHVsaW5nIHBhdHRlcm5zIHVzaW5nIHNldFRpbWVvdXQoKSBvciBzZXRJbnRlcnZhbCgpLlxyXG4gICAgICogVGhlc2UgYXBwcm9hY2hlcyBzb21ldGltZXMgb2ZmZXIgbW9kZXN0IGltcHJvdmVtZW50cyB3aXRoIG1pbmltYWxcclxuICAgICAqIGNoYW5nZXMgdG8gZXhpc3RpbmcgY29kZSwgYnV0IGJlY2F1c2UgSmF2YVNjcmlwdCBpcyBzaW5nbGUtdGhyZWFkZWQsIHRoZVxyXG4gICAgICogdXBkYXRlcyB3aWxsIHN0aWxsIGJsb2NrIHJlbmRlcmluZyBhbmQgZHJhZyBkb3duIHRoZSBmcmFtZSByYXRlLiBXZWJcclxuICAgICAqIFdvcmtlcnMgZXhlY3V0ZSBpbiBzZXBhcmF0ZSB0aHJlYWRzLCBzbyB0aGV5IGZyZWUgdXAgbW9yZSB0aW1lIGluIHRoZVxyXG4gICAgICogbWFpbiBsb29wLilcclxuICAgICAqXHJcbiAgICAgKiBUaGlzIHNjcmlwdCBjYW4gYmUgaW1wb3J0ZWQgaW50byBhIFdlYiBXb3JrZXIgdXNpbmcgaW1wb3J0U2NyaXB0cygpIGFuZFxyXG4gICAgICogdXNlZCB0byBydW4gYSBzZWNvbmQgbWFpbiBsb29wIGluIHRoZSB3b3JrZXIuIFNvbWUgY29uc2lkZXJhdGlvbnM6XHJcbiAgICAgKlxyXG4gICAgICogLSBQcm9maWxlIHlvdXIgY29kZSBiZWZvcmUgZG9pbmcgdGhlIHdvcmsgdG8gbW92ZSBpdCBpbnRvIFdlYiBXb3JrZXJzLlxyXG4gICAgICogICBJdCBjb3VsZCBiZSB0aGUgcmVuZGVyaW5nIHRoYXQgaXMgdGhlIGJvdHRsZW5lY2ssIGluIHdoaWNoIGNhc2UgdGhlXHJcbiAgICAgKiAgIHNvbHV0aW9uIGlzIHRvIGRlY3JlYXNlIHRoZSB2aXN1YWwgY29tcGxleGl0eSBvZiB0aGUgc2NlbmUuXHJcbiAgICAgKiAtIEl0IGRvZXNuJ3QgbWFrZSBzZW5zZSB0byBtb3ZlIHRoZSAqZW50aXJlKiBjb250ZW50cyBvZiB1cGRhdGUoKSBpbnRvXHJcbiAgICAgKiAgIHdvcmtlcnMgdW5sZXNzIHtAbGluayAjc2V0RHJhdyBkcmF3fSgpIGNhbiBpbnRlcnBvbGF0ZSBiZXR3ZWVuIGZyYW1lcy5cclxuICAgICAqICAgVGhlIGxvd2VzdC1oYW5naW5nIGZydWl0IGlzIGJhY2tncm91bmQgdXBkYXRlcyAobGlrZSBjYWxjdWxhdGluZ1xyXG4gICAgICogICBjaXRpemVucycgaGFwcGluZXNzIGluIGEgY2l0eS1idWlsZGluZyBnYW1lKSwgcGh5c2ljcyB0aGF0IGRvZXNuJ3RcclxuICAgICAqICAgYWZmZWN0IHRoZSBzY2VuZSAobGlrZSBmbGFncyB3YXZpbmcgaW4gdGhlIHdpbmQpLCBhbmQgYW55dGhpbmcgdGhhdCBpc1xyXG4gICAgICogICBvY2NsdWRlZCBvciBoYXBwZW5pbmcgZmFyIG9mZiBzY3JlZW4uXHJcbiAgICAgKiAtIElmIGRyYXcoKSBuZWVkcyB0byBpbnRlcnBvbGF0ZSBwaHlzaWNzIGJhc2VkIG9uIGFjdGl2aXR5IHRoYXQgb2NjdXJzXHJcbiAgICAgKiAgIGluIGEgd29ya2VyLCB0aGUgd29ya2VyIG5lZWRzIHRvIHBhc3MgdGhlIGludGVycG9sYXRpb24gdmFsdWUgYmFjayB0b1xyXG4gICAgICogICB0aGUgbWFpbiB0aHJlYWQgc28gdGhhdCBpcyBpcyBhdmFpbGFibGUgdG8gZHJhdygpLlxyXG4gICAgICogLSBXZWIgV29ya2VycyBjYW4ndCBhY2Nlc3MgdGhlIHN0YXRlIG9mIHRoZSBtYWluIHRocmVhZCwgc28gdGhleSBjYW4ndFxyXG4gICAgICogICBkaXJlY3RseSBtb2RpZnkgb2JqZWN0cyBpbiB5b3VyIHNjZW5lLiBNb3ZpbmcgZGF0YSB0byBhbmQgZnJvbSBXZWJcclxuICAgICAqICAgV29ya2VycyBpcyBhIHBhaW4uIFRoZSBmYXN0ZXN0IHdheSB0byBkbyBpdCBpcyB3aXRoIFRyYW5zZmVyYWJsZVxyXG4gICAgICogICBPYmplY3RzOiBiYXNpY2FsbHksIHlvdSBjYW4gcGFzcyBhbiBBcnJheUJ1ZmZlciB0byBhIHdvcmtlcixcclxuICAgICAqICAgZGVzdHJveWluZyB0aGUgb3JpZ2luYWwgcmVmZXJlbmNlIGluIHRoZSBwcm9jZXNzLlxyXG4gICAgICpcclxuICAgICAqIFlvdSBjYW4gcmVhZCBtb3JlIGFib3V0IFdlYiBXb3JrZXJzIGFuZCBUcmFuc2ZlcmFibGUgT2JqZWN0cyBhdFxyXG4gICAgICogW0hUTUw1IFJvY2tzXShodHRwOi8vd3d3Lmh0bWw1cm9ja3MuY29tL2VuL3R1dG9yaWFscy93b3JrZXJzL2Jhc2ljcy8pLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHVwZGF0ZVxyXG4gICAgICogICBUaGUgdXBkYXRlKCkgZnVuY3Rpb24uXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3VwZGF0ZS5kZWx0YV1cclxuICAgICAqICAgVGhlIGFtb3VudCBvZiB0aW1lIGluIG1pbGxpc2Vjb25kcyB0byBzaW11bGF0ZSBpbiB0aGUgdXBkYXRlLiBJbiBtb3N0XHJcbiAgICAgKiAgIGNhc2VzIHRoaXMgdGltZXN0ZXAgbmV2ZXIgY2hhbmdlcyBpbiBvcmRlciB0byBlbnN1cmUgZGV0ZXJtaW5pc3RpY1xyXG4gICAgICogICB1cGRhdGVzLiBUaGUgdGltZXN0ZXAgaXMgdGhlIHNhbWUgYXMgdGhhdCByZXR1cm5lZCBieVxyXG4gICAgICogICBgTWFpbkxvb3AuZ2V0U2ltdWxhdGlvblRpbWVzdGVwKClgLlxyXG4gICAgICovXHJcbiAgICBhYnN0cmFjdCB1cGRhdGUodGltZVN0ZXAgOiBudW1iZXIpIDogdm9pZDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEEgZnVuY3Rpb24gdGhhdCBkcmF3cyB0aGluZ3Mgb24gdGhlIHNjcmVlbi5cclxuICAgICAqXHJcbiAgICAgKiBUaGUgZHJhdygpIGZ1bmN0aW9uIGdldHMgcGFzc2VkIHRoZSBwZXJjZW50IG9mIHRpbWUgdGhhdCB0aGUgbmV4dCBydW4gb2ZcclxuICAgICAqIHtAbGluayAjc2V0VXBkYXRlIHVwZGF0ZX0oKSB3aWxsIHNpbXVsYXRlIHRoYXQgaGFzIGFjdHVhbGx5IGVsYXBzZWQsIGFzXHJcbiAgICAgKiBhIGRlY2ltYWwuIEluIG90aGVyIHdvcmRzLCBkcmF3KCkgZ2V0cyBwYXNzZWQgaG93IGZhciBiZXR3ZWVuIHVwZGF0ZSgpXHJcbiAgICAgKiBjYWxscyBpdCBpcy4gVGhpcyBpcyB1c2VmdWwgYmVjYXVzZSB0aGUgdGltZSBzaW11bGF0ZWQgYnkgdXBkYXRlKCkgYW5kXHJcbiAgICAgKiB0aGUgdGltZSBiZXR3ZWVuIGRyYXcoKSBjYWxscyBpcyB1c3VhbGx5IGRpZmZlcmVudCwgc28gdGhlIHBhcmFtZXRlciB0b1xyXG4gICAgICogZHJhdygpIGNhbiBiZSB1c2VkIHRvIGludGVycG9sYXRlIG1vdGlvbiBiZXR3ZWVuIGZyYW1lcyB0byBtYWtlXHJcbiAgICAgKiByZW5kZXJpbmcgYXBwZWFyIHNtb290aGVyLiBUbyBpbGx1c3RyYXRlLCBpZiB1cGRhdGUoKSBhZHZhbmNlcyB0aGVcclxuICAgICAqIHNpbXVsYXRpb24gYXQgZWFjaCB2ZXJ0aWNhbCBiYXIgaW4gdGhlIGZpcnN0IHJvdyBiZWxvdywgYW5kIGRyYXcoKSBjYWxsc1xyXG4gICAgICogaGFwcGVuIGF0IGVhY2ggdmVydGljYWwgYmFyIGluIHRoZSBzZWNvbmQgcm93IGJlbG93LCB0aGVuIHNvbWUgZnJhbWVzXHJcbiAgICAgKiB3aWxsIGhhdmUgdGltZSBsZWZ0IG92ZXIgdGhhdCBpcyBub3QgeWV0IHNpbXVsYXRlZCBieSB1cGRhdGUoKSB3aGVuXHJcbiAgICAgKiByZW5kZXJpbmcgb2NjdXJzIGluIGRyYXcoKTpcclxuICAgICAqXHJcbiAgICAgKiAgICAgdXBkYXRlKCkgdGltZXN0ZXBzOiAgfCAgfCAgfCAgfCAgfCAgfCAgfCAgfCAgfFxyXG4gICAgICogICAgIGRyYXcoKSBjYWxsczogICAgICAgIHwgICB8ICAgfCAgIHwgICB8ICAgfCAgIHxcclxuICAgICAqXHJcbiAgICAgKiBUbyBpbnRlcnBvbGF0ZSBtb3Rpb24gZm9yIHJlbmRlcmluZyBwdXJwb3Nlcywgb2JqZWN0cycgc3RhdGUgYWZ0ZXIgdGhlXHJcbiAgICAgKiBsYXN0IHVwZGF0ZSgpIG11c3QgYmUgcmV0YWluZWQgYW5kIHVzZWQgdG8gY2FsY3VsYXRlIGFuIGludGVybWVkaWF0ZVxyXG4gICAgICogc3RhdGUuIE5vdGUgdGhhdCB0aGlzIG1lYW5zIHJlbmRlcnMgd2lsbCBiZSB1cCB0byBvbmUgdXBkYXRlKCkgYmVoaW5kLlxyXG4gICAgICogVGhpcyBpcyBzdGlsbCBiZXR0ZXIgdGhhbiBleHRyYXBvbGF0aW5nIChwcm9qZWN0aW5nIG9iamVjdHMnIHN0YXRlIGFmdGVyXHJcbiAgICAgKiBhIGZ1dHVyZSB1cGRhdGUoKSkgd2hpY2ggY2FuIHByb2R1Y2UgYml6YXJyZSByZXN1bHRzLiBTdG9yaW5nIG11bHRpcGxlXHJcbiAgICAgKiBzdGF0ZXMgY2FuIGJlIGRpZmZpY3VsdCB0byBzZXQgdXAsIGFuZCBrZWVwIGluIG1pbmQgdGhhdCBydW5uaW5nIHRoaXNcclxuICAgICAqIHByb2Nlc3MgdGFrZXMgdGltZSB0aGF0IGNvdWxkIHB1c2ggdGhlIGZyYW1lIHJhdGUgZG93biwgc28gaXQncyBvZnRlblxyXG4gICAgICogbm90IHdvcnRod2hpbGUgdW5sZXNzIHN0dXR0ZXJpbmcgaXMgdmlzaWJsZS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBkcmF3XHJcbiAgICAgKiAgIFRoZSBkcmF3KCkgZnVuY3Rpb24uXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2RyYXcuaW50ZXJwb2xhdGlvblBlcmNlbnRhZ2VdXHJcbiAgICAgKiAgIFRoZSBjdW11bGF0aXZlIGFtb3VudCBvZiB0aW1lIHRoYXQgaGFzbid0IGJlZW4gc2ltdWxhdGVkIHlldCwgZGl2aWRlZFxyXG4gICAgICogICBieSB0aGUgYW1vdW50IG9mIHRpbWUgdGhhdCB3aWxsIGJlIHNpbXVsYXRlZCB0aGUgbmV4dCB0aW1lIHVwZGF0ZSgpXHJcbiAgICAgKiAgIHJ1bnMuIFVzZWZ1bCBmb3IgaW50ZXJwb2xhdGluZyBmcmFtZXMuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBhYnN0cmFjdCBkcmF3KGludGVycG9sYXRpb25QZXJjZW50YWdlIDogbnVtYmVyKSA6IHZvaWQ7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBIGZ1bmN0aW9uIHRoYXQgcnVucyBhdCB0aGUgZW5kIG9mIHRoZSBtYWluIGxvb3AuXHJcbiAgICAgKlxyXG4gICAgICogVW5saWtlIHtAbGluayAjc2V0VXBkYXRlIHVwZGF0ZX0oKSwgd2hpY2ggY2FuIHJ1biB6ZXJvIG9yIG1vcmUgdGltZXMgcGVyXHJcbiAgICAgKiBmcmFtZSwgZW5kKCkgYWx3YXlzIHJ1bnMgZXhhY3RseSBvbmNlIHBlciBmcmFtZS4gVGhpcyBtYWtlcyBpdCB1c2VmdWxcclxuICAgICAqIGZvciBhbnkgdXBkYXRlcyB0aGF0IGFyZSBub3QgZGVwZW5kZW50IG9uIHRpbWUgaW4gdGhlIHNpbXVsYXRpb24uXHJcbiAgICAgKiBFeGFtcGxlcyBpbmNsdWRlIGNsZWFuaW5nIHVwIGFueSB0ZW1wb3Jhcnkgc3RhdGUgc2V0IHVwIGJ5XHJcbiAgICAgKiB7QGxpbmsgI3NldEJlZ2luIGJlZ2lufSgpLCBsb3dlcmluZyB0aGUgdmlzdWFsIHF1YWxpdHkgaWYgdGhlIGZyYW1lIHJhdGVcclxuICAgICAqIGlzIHRvbyBsb3csIG9yIHBlcmZvcm1pbmcgbG9uZy1ydW5uaW5nIHVwZGF0ZXMgaW5jcmVtZW50YWxseS4gQ29tcGFyZWRcclxuICAgICAqIHRvIGJlZ2luKCksIGdlbmVyYWxseSBhY3Rpb25zIHNob3VsZCBvY2N1ciBpbiBlbmQoKSBpZiB0aGV5IHVzZSBhbnl0aGluZ1xyXG4gICAgICogdGhhdCB1cGRhdGUoKSBvciB7QGxpbmsgI3NldERyYXcgZHJhd30oKSBhZmZlY3QuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZW5kXHJcbiAgICAgKiAgIFRoZSBlbmQoKSBmdW5jdGlvbi5cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbZW5kLmZwc11cclxuICAgICAqICAgVGhlIGV4cG9uZW50aWFsIG1vdmluZyBhdmVyYWdlIG9mIHRoZSBmcmFtZXMgcGVyIHNlY29uZC4gVGhpcyBpcyB0aGVcclxuICAgICAqICAgc2FtZSB2YWx1ZSByZXR1cm5lZCBieSBgTWFpbkxvb3AuZ2V0RlBTKClgLiBJdCBjYW4gYmUgdXNlZCB0byB0YWtlXHJcbiAgICAgKiAgIGFjdGlvbiB3aGVuIHRoZSBGUFMgaXMgdG9vIGxvdyAob3IgdG8gcmVzdG9yZSB0byBub3JtYWxjeSBpZiB0aGUgRlBTXHJcbiAgICAgKiAgIG1vdmVzIGJhY2sgdXApLiBFeGFtcGxlcyBvZiBhY3Rpb25zIHRvIHRha2UgaWYgdGhlIEZQUyBpcyB0b28gbG93XHJcbiAgICAgKiAgIGluY2x1ZGUgZXhpdGluZyB0aGUgYXBwbGljYXRpb24sIGxvd2VyaW5nIHRoZSB2aXN1YWwgcXVhbGl0eSwgc3RvcHBpbmdcclxuICAgICAqICAgb3IgcmVkdWNpbmcgYWN0aXZpdGllcyBvdXRzaWRlIG9mIHRoZSBtYWluIGxvb3AgbGlrZSBldmVudCBoYW5kbGVycyBvclxyXG4gICAgICogICBhdWRpbyBwbGF5YmFjaywgcGVyZm9ybWluZyBub24tY3JpdGljYWwgdXBkYXRlcyBsZXNzIGZyZXF1ZW50bHksIG9yXHJcbiAgICAgKiAgIGluY3JlYXNpbmcgdGhlIHNpbXVsYXRpb24gdGltZXN0ZXAgKGJ5IGNhbGxpbmdcclxuICAgICAqICAgYE1haW5Mb29wLnNldFNpbXVsYXRpb25UaW1lc3RlcCgpYCkuIE5vdGUgdGhhdCB0aGlzIGxhc3Qgb3B0aW9uXHJcbiAgICAgKiAgIHJlc3VsdHMgaW4gbW9yZSB0aW1lIGJlaW5nIHNpbXVsYXRlZCBwZXIgdXBkYXRlKCkgY2FsbCwgd2hpY2ggY2F1c2VzXHJcbiAgICAgKiAgIHRoZSBhcHBsaWNhdGlvbiB0byBiZWhhdmUgbm9uLWRldGVybWluaXN0aWNhbGx5LlxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbZW5kLnBhbmljPWZhbHNlXVxyXG4gICAgICogICBJbmRpY2F0ZXMgd2hldGhlciB0aGUgc2ltdWxhdGlvbiBoYXMgZmFsbGVuIHRvbyBmYXIgYmVoaW5kIHJlYWwgdGltZS5cclxuICAgICAqICAgU3BlY2lmaWNhbGx5LCBgcGFuaWNgIHdpbGwgYmUgYHRydWVgIGlmIHRvbyBtYW55IHVwZGF0ZXMgb2NjdXJyZWQgaW5cclxuICAgICAqICAgb25lIGZyYW1lLiBJbiBuZXR3b3JrZWQgbG9ja3N0ZXAgYXBwbGljYXRpb25zLCB0aGUgYXBwbGljYXRpb24gc2hvdWxkXHJcbiAgICAgKiAgIHdhaXQgZm9yIHNvbWUgYW1vdW50IG9mIHRpbWUgdG8gc2VlIGlmIHRoZSB1c2VyIGNhbiBjYXRjaCB1cCBiZWZvcmVcclxuICAgICAqICAgZHJvcHBpbmcgdGhlIHVzZXIuIEluIG5ldHdvcmtlZCBidXQgbm9uLWxvY2tzdGVwIGFwcGxpY2F0aW9ucywgdGhpc1xyXG4gICAgICogICB0eXBpY2FsbHkgaW5kaWNhdGVzIHRoYXQgdGhlIHVzZXIgbmVlZHMgdG8gYmUgc25hcHBlZCBvciBlYXNlZCB0byB0aGVcclxuICAgICAqICAgY3VycmVudCBhdXRob3JpdGF0aXZlIHN0YXRlLiBXaGVuIHRoaXMgaGFwcGVucywgaXQgbWF5IGJlIGNvbnZlbmllbnRcclxuICAgICAqICAgdG8gY2FsbCBgTWFpbkxvb3AucmVzZXRGcmFtZURlbHRhKClgIHRvIGRpc2NhcmQgYWNjdW11bGF0ZWQgcGVuZGluZ1xyXG4gICAgICogICB1cGRhdGVzLiBJbiBub24tbmV0d29ya2VkIGFwcGxpY2F0aW9ucywgaXQgbWF5IGJlIGFjY2VwdGFibGUgdG8gYWxsb3dcclxuICAgICAqICAgdGhlIGFwcGxpY2F0aW9uIHRvIGtlZXAgcnVubmluZyBmb3IgYXdoaWxlIHRvIHNlZSBpZiBpdCB3aWxsIGNhdGNoIHVwLlxyXG4gICAgICogICBIb3dldmVyLCB0aGlzIGNvdWxkIGFsc28gY2F1c2UgdGhlIGFwcGxpY2F0aW9uIHRvIGxvb2sgbGlrZSBpdCBpc1xyXG4gICAgICogICBydW5uaW5nIHZlcnkgcXVpY2tseSBmb3IgYSBmZXcgZnJhbWVzIGFzIGl0IHRyYW5zaXRpb25zIHRocm91Z2ggdGhlXHJcbiAgICAgKiAgIGludGVybWVkaWF0ZSBzdGF0ZXMuIEFuIGFsdGVybmF0aXZlIHRoYXQgbWF5IGJlIGFjY2VwdGFibGUgaXMgdG9cclxuICAgICAqICAgc2ltcGx5IGlnbm9yZSB0aGUgdW5zaW11bGF0ZWQgZWxhcHNlZCB0aW1lIGJ5IGNhbGxpbmdcclxuICAgICAqICAgYE1haW5Mb29wLnJlc2V0RnJhbWVEZWx0YSgpYCBldmVuIHRob3VnaCB0aGlzIGludHJvZHVjZXNcclxuICAgICAqICAgbm9uLWRldGVybWluaXN0aWMgYmVoYXZpb3IuIEluIGFsbCBjYXNlcywgaWYgdGhlIGFwcGxpY2F0aW9uIHBhbmljc1xyXG4gICAgICogICBmcmVxdWVudGx5LCB0aGlzIGlzIGFuIGluZGljYXRpb24gdGhhdCB0aGUgbWFpbiBsb29wIGlzIHJ1bm5pbmcgdG9vXHJcbiAgICAgKiAgIHNsb3dseS4gSG93ZXZlciwgbW9zdCBvZiB0aGUgdGltZSB0aGUgZHJvcCBpbiBmcmFtZSByYXRlIHdpbGwgcHJvYmFibHlcclxuICAgICAqICAgYmUgbm90aWNlYWJsZSBiZWZvcmUgYSBwYW5pYyBvY2N1cnMuIFRvIGhlbHAgdGhlIGFwcGxpY2F0aW9uIGNhdGNoIHVwXHJcbiAgICAgKiAgIGFmdGVyIGEgcGFuaWMgY2F1c2VkIGJ5IGEgc3BpcmFsIG9mIGRlYXRoLCB0aGUgc2FtZSBzdGVwcyBjYW4gYmUgdGFrZW5cclxuICAgICAqICAgdGhhdCBhcmUgc3VnZ2VzdGVkIGFib3ZlIGlmIHRoZSBGUFMgZHJvcHMgdG9vIGxvdy5cclxuICAgICAqL1xyXG4gICAgYWJzdHJhY3QgZW5kKGZwcyA6IG51bWJlciwgcGFuaWMgOiBib29sZWFuKSA6IHZvaWQ7XHJcbn0iLCIvKlxyXG4gKiBNYXRoVXRpbGl0aWVzIHByb3ZpZGVzIGEgbnVtYmVyIG9mIHNlcnZpY2VzIGZvciByZW5kZXJpbmcgdXNpbmcgNHg0IG1hdHJpY2VzLCBsaWtlXHJcbiAqIHRyYW5zZm9ybXRpbmcgKGkuZS4gdHJhbnNsYXRpb24sIHJvdGF0aW9uLCBhbmQgc2NhbGluZykgM2Qgb3IgMmQgcG9pbnRzIGZyb20gd29ybGRcclxuICogY29vcmRpbmF0ZSBzeXN0ZW1zIHRvIHNjcmVlbiBjb29yZGluYXRlIHN5c3RlbXMuXHJcbiAqL1xyXG5pbXBvcnQge01hdHJpeH0gZnJvbSAnLi9NYXRyaXgnXHJcbmltcG9ydCB7VmVjdG9yM30gZnJvbSAnLi9WZWN0b3IzJ1xyXG5cclxuZXhwb3J0IG5hbWVzcGFjZSBNYXRoVXRpbGl0aWVzIHtcclxuICAgIGV4cG9ydCBmdW5jdGlvbiBkZXRlcm1pbmFudDR4NChyZXN1bHQgOiBNYXRyaXgpIDogbnVtYmVyIHtcclxuICAgICAgICBsZXQgZGV0MCA9IHJlc3VsdC5nZXQoMCwgMCkgKiAoXHJcbiAgICAgICAgICAgIChyZXN1bHQuZ2V0KDEsIDEpICogKChyZXN1bHQuZ2V0KDIsIDIpICogcmVzdWx0LmdldCgzLCAzKSkgLSAocmVzdWx0LmdldCgyLCAzKSAqIHJlc3VsdC5nZXQoMywgMikpKSlcclxuICAgICAgICAgICAgLSAocmVzdWx0LmdldCgxLCAyKSAqICgocmVzdWx0LmdldCgyLCAxKSAqIHJlc3VsdC5nZXQoMywgMykpIC0gKHJlc3VsdC5nZXQoMiwgMykgKiByZXN1bHQuZ2V0KDMsIDEpKSkpXHJcbiAgICAgICAgICAgICsgKHJlc3VsdC5nZXQoMSwgMykgKiAoKHJlc3VsdC5nZXQoMiwgMSkgKiByZXN1bHQuZ2V0KDMsIDIpKSAtIChyZXN1bHQuZ2V0KDMsIDEpICogcmVzdWx0LmdldCgyLCAyKSkpKSk7XHJcbiAgICAgICAgbGV0IGRldDEgPSByZXN1bHQuZ2V0KDAsIDEpICogKFxyXG4gICAgICAgICAgICAocmVzdWx0LmdldCgxLCAwKSAqICgocmVzdWx0LmdldCgyLCAyKSAqIHJlc3VsdC5nZXQoMywgMykpIC0gKHJlc3VsdC5nZXQoMiwgMykgKiByZXN1bHQuZ2V0KDMsIDIpKSkpXHJcbiAgICAgICAgICAgIC0gKHJlc3VsdC5nZXQoMSwgMikgKiAoKHJlc3VsdC5nZXQoMiwgMCkgKiByZXN1bHQuZ2V0KDMsIDMpKSAtIChyZXN1bHQuZ2V0KDMsIDApICogcmVzdWx0LmdldCgyLCAzKSkpKVxyXG4gICAgICAgICAgICArIChyZXN1bHQuZ2V0KDEsIDMpICogKChyZXN1bHQuZ2V0KDIsIDApICogcmVzdWx0LmdldCgzLCAyKSkgLSAocmVzdWx0LmdldCgzLCAwKSAqIHJlc3VsdC5nZXQoMiwgMikpKSkpO1xyXG4gICAgICAgIGxldCBkZXQyID0gcmVzdWx0LmdldCgwLCAyKSAqIChcclxuICAgICAgICAgICAgKHJlc3VsdC5nZXQoMSwgMCkgKiAoKHJlc3VsdC5nZXQoMiwgMSkgKiByZXN1bHQuZ2V0KDMsIDMpKSAtIChyZXN1bHQuZ2V0KDIsIDMpICogcmVzdWx0LmdldCgzLCAxKSkpKVxyXG4gICAgICAgICAgICAtIChyZXN1bHQuZ2V0KDEsIDEpICogKChyZXN1bHQuZ2V0KDIsIDApICogcmVzdWx0LmdldCgzLCAzKSkgLSAocmVzdWx0LmdldCgyLCAzKSAqIHJlc3VsdC5nZXQoMywgMCkpKSlcclxuICAgICAgICAgICAgKyAocmVzdWx0LmdldCgxLCAzKSAqICgocmVzdWx0LmdldCgyLCAwKSAqIHJlc3VsdC5nZXQoMywgMSkpIC0gKHJlc3VsdC5nZXQoMiwgMSkgKiByZXN1bHQuZ2V0KDMsIDApKSkpKTtcclxuICAgICAgICBsZXQgZGV0MyA9IHJlc3VsdC5nZXQoMCwgMykgKiAoXHJcbiAgICAgICAgICAgIChyZXN1bHQuZ2V0KDEsIDApICogKChyZXN1bHQuZ2V0KDIsIDEpICogcmVzdWx0LmdldCgzLCAyKSkgLSAocmVzdWx0LmdldCgyLCAyKSAqIHJlc3VsdC5nZXQoMywgMSkpKSlcclxuICAgICAgICAgICAgLSAocmVzdWx0LmdldCgxLCAxKSAqICgocmVzdWx0LmdldCgyLCAwKSAqIHJlc3VsdC5nZXQoMywgMikpIC0gKHJlc3VsdC5nZXQoMiwgMikgKiByZXN1bHQuZ2V0KDMsIDApKSkpXHJcbiAgICAgICAgICAgICsgKHJlc3VsdC5nZXQoMSwgMikgKiAoKHJlc3VsdC5nZXQoMiwgMCkgKiByZXN1bHQuZ2V0KDMsIDEpKSAtIChyZXN1bHQuZ2V0KDIsIDEpICogcmVzdWx0LmdldCgzLCAwKSkpKSk7XHJcbiAgICAgICAgbGV0IGRldCA9IGRldDAgLSBkZXQxICsgZGV0MiAtIGRldDM7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJkZXQgPSBcIiArIGRldDAgKyBcIiArIFwiICsgZGV0MSArIFwiICsgXCIgKyBkZXQyICsgXCIgKyBcIiArIGRldDMpO1xyXG4gICAgICAgIHJldHVybiBkZXQ7XHJcbiAgICB9XHJcbiAgICBleHBvcnQgZnVuY3Rpb24gaWRlbnRpdHkocmVzdWx0IDogTWF0cml4KSA6IHZvaWQge1xyXG4gICAgICAgIGlmIChyZXN1bHQuZ2V0Um93cygpID09PSByZXN1bHQuZ2V0Q29sdW1ucygpKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVzdWx0LmdldFJvd3MoKTsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHJlc3VsdC5nZXRDb2x1bW5zKCk7IGorKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpID09PSBqKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQuc2V0KDEuMCwgaSwgaik7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQuc2V0KDAuMCwgaSwgaik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBleHBvcnQgZnVuY3Rpb24gaW52ZXJzZShyZXN1bHQgOiBNYXRyaXgsIG1hdCA6IE1hdHJpeCkgOiB2b2lkIHtcclxuICAgICAgICBsZXQgZGV0ID0gdGhpcy5kZXRlcm1pbmFudChtYXQpO1xyXG4gICAgICAgIGxldCBtMDAgPSBtYXQuZ2V0KDAsIDApOyBsZXQgbTAxID0gbWF0LmdldCgwLCAxKTsgbGV0IG0wMiA9IG1hdC5nZXQoMCwgMik7IGxldCBtMDMgPSBtYXQuZ2V0KDAsIDMpO1xyXG4gICAgICAgIGxldCBtMTAgPSBtYXQuZ2V0KDEsIDApOyBsZXQgbTExID0gbWF0LmdldCgxLCAxKTsgbGV0IG0xMiA9IG1hdC5nZXQoMSwgMik7IGxldCBtMTMgPSBtYXQuZ2V0KDEsIDMpO1xyXG4gICAgICAgIGxldCBtMjAgPSBtYXQuZ2V0KDIsIDApOyBsZXQgbTIxID0gbWF0LmdldCgyLCAxKTsgbGV0IG0yMiA9IG1hdC5nZXQoMiwgMik7IGxldCBtMjMgPSBtYXQuZ2V0KDIsIDMpO1xyXG4gICAgICAgIGxldCBtMzAgPSBtYXQuZ2V0KDMsIDApOyBsZXQgbTMxID0gbWF0LmdldCgzLCAxKTsgbGV0IG0zMiA9IG1hdC5nZXQoMywgMik7IGxldCBtMzMgPSBtYXQuZ2V0KDMsIDMpO1xyXG4gICAgICAgIGxldCB0ZW1wID0gbmV3IE1hdHJpeCg0LCA0KTtcclxuICAgICAgICB0ZW1wLnNldCgobTEyICogbTIzICogbTMxKSAtIChtMTMgKiBtMjIgKiBtMzEpICsgKG0xMyAqIG0yMSAqIG0zMikgLSAobTExICogbTIzICogbTMyKSAtIChtMTIgKiBtMjEgKiBtMzMpICsgKG0xMSAqIG0yMiAqIG0zMyksIDAsIDApO1xyXG4gICAgICAgIHRlbXAuc2V0KChtMDMgKiBtMjIgKiBtMzEpIC0gKG0wMiAqIG0yMyAqIG0zMSkgLSAobTAzICogbTIxICogbTMyKSArIChtMDEgKiBtMjMgKiBtMzIpICsgKG0wMiAqIG0yMSAqIG0zMykgLSAobTAxICogbTIyICogbTMzKSwgMCwgMSk7XHJcbiAgICAgICAgdGVtcC5zZXQoKG0wMiAqIG0xMyAqIG0zMSkgLSAobTAzICogbTEyICogbTMxKSArIChtMDMgKiBtMTEgKiBtMzIpIC0gKG0wMSAqIG0xMyAqIG0zMikgLSAobTAyICogbTExICogbTMzKSArIChtMDEgKiBtMTIgKiBtMzMpLCAwLCAyKTtcclxuICAgICAgICB0ZW1wLnNldCgobTAzICogbTEyICogbTIxKSAtIChtMDIgKiBtMTMgKiBtMjEpIC0gKG0wMyAqIG0xMSAqIG0yMikgKyAobTAxICogbTEzICogbTIyKSArIChtMDIgKiBtMTEgKiBtMjMpIC0gKG0wMSAqIG0xMiAqIG0yMyksIDAsIDMpO1xyXG4gICAgICAgIHRlbXAuc2V0KChtMTMgKiBtMjIgKiBtMzApIC0gKG0xMiAqIG0yMyAqIG0zMCkgLSAobTEzICogbTIwICogbTMyKSArIChtMTAgKiBtMjMgKiBtMzIpICsgKG0xMiAqIG0yMCAqIG0zMykgLSAobTEwICogbTIyICogbTMzKSwgMSwgMCk7XHJcbiAgICAgICAgdGVtcC5zZXQoKG0wMiAqIG0yMyAqIG0zMCkgLSAobTAzICogbTIyICogbTMwKSArIChtMDMgKiBtMjAgKiBtMzIpIC0gKG0wMCAqIG0yMyAqIG0zMikgLSAobTAyICogbTIwICogbTMzKSArIChtMDAgKiBtMjIgKiBtMzMpLCAxLCAxKTtcclxuICAgICAgICB0ZW1wLnNldCgobTAzICogbTEyICogbTMwKSAtIChtMDIgKiBtMTMgKiBtMzApIC0gKG0wMyAqIG0xMCAqIG0zMikgKyAobTAwICogbTEzICogbTMyKSArIChtMDIgKiBtMTAgKiBtMzMpIC0gKG0wMCAqIG0xMiAqIG0zMyksIDEsIDIpO1xyXG4gICAgICAgIHRlbXAuc2V0KChtMDIgKiBtMTMgKiBtMjApIC0gKG0wMyAqIG0xMiAqIG0yMCkgKyAobTAzICogbTEwICogbTIyKSAtIChtMDAgKiBtMTMgKiBtMjIpIC0gKG0wMiAqIG0xMCAqIG0yMykgKyAobTAwICogbTEyICogbTIzKSwgMSwgMyk7XHJcbiAgICAgICAgdGVtcC5zZXQoKG0xMSAqIG0yMyAqIG0zMCkgLSAobTEzICogbTIxICogbTMwKSArIChtMTMgKiBtMjAgKiBtMzEpIC0gKG0xMCAqIG0yMyAqIG0zMSkgLSAobTExICogbTIwICogbTMzKSArIChtMTAgKiBtMjEgKiBtMzMpLCAyLCAwKTtcclxuICAgICAgICB0ZW1wLnNldCgobTAzICogbTIxICogbTMwKSAtIChtMDEgKiBtMjMgKiBtMzApIC0gKG0wMyAqIG0yMCAqIG0zMSkgKyAobTAwICogbTIzICogbTMxKSArIChtMDEgKiBtMjAgKiBtMzMpIC0gKG0wMCAqIG0yMSAqIG0zMyksIDIsIDEpO1xyXG4gICAgICAgIHRlbXAuc2V0KChtMDEgKiBtMTMgKiBtMzApIC0gKG0wMyAqIG0xMSAqIG0zMCkgKyAobTAzICogbTEwICogbTMxKSAtIChtMDAgKiBtMTMgKiBtMzEpIC0gKG0wMSAqIG0xMCAqIG0zMykgKyAobTAwICogbTExICogbTMzKSwgMiwgMik7XHJcbiAgICAgICAgdGVtcC5zZXQoKG0wMyAqIG0xMSAqIG0yMCkgLSAobTAxICogbTEzICogbTIwKSAtIChtMDMgKiBtMTAgKiBtMjEpICsgKG0wMCAqIG0xMyAqIG0yMSkgKyAobTAxICogbTEwICogbTIzKSAtIChtMDAgKiBtMTEgKiBtMjMpLCAyLCAzKTtcclxuICAgICAgICB0ZW1wLnNldCgobTEyICogbTIxICogbTMwKSAtIChtMTEgKiBtMjIgKiBtMzApIC0gKG0xMiAqIG0yMCAqIG0zMSkgKyAobTEwICogbTIyICogbTMxKSArIChtMTEgKiBtMjAgKiBtMzIpIC0gKG0xMCAqIG0yMSAqIG0zMiksIDMsIDApO1xyXG4gICAgICAgIHRlbXAuc2V0KChtMDEgKiBtMjIgKiBtMzApIC0gKG0wMiAqIG0yMSAqIG0zMCkgKyAobTAyICogbTIwICogbTMxKSAtIChtMDAgKiBtMjIgKiBtMzEpIC0gKG0wMSAqIG0yMCAqIG0zMikgKyAobTAwICogbTIxICogbTMyKSwgMywgMSk7XHJcbiAgICAgICAgdGVtcC5zZXQoKG0wMiAqIG0xMSAqIG0zMCkgLSAobTAxICogbTEyICogbTMwKSAtIChtMDIgKiBtMTAgKiBtMzEpICsgKG0wMCAqIG0xMiAqIG0zMSkgKyAobTAxICogbTEwICogbTMyKSAtIChtMDAgKiBtMTEgKiBtMzIpLCAzLCAyKTtcclxuICAgICAgICB0ZW1wLnNldCgobTAxICogbTEyICogbTIwKSAtIChtMDIgKiBtMTEgKiBtMjApICsgKG0wMiAqIG0xMCAqIG0yMSkgLSAobTAwICogbTEyICogbTIxKSAtIChtMDEgKiBtMTAgKiBtMjIpICsgKG0wMCAqIG0xMSAqIG0yMiksIDMsIDMpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgNDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQuc2V0KHRlbXAuZ2V0KGksIGopIC8gZGV0LCBpLCBqKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGV4cG9ydCBmdW5jdGlvbiBtb2RlbChyZXN1bHQgOiBNYXRyaXgsIHRyYW5zbGF0aW9uIDogVmVjdG9yMywgcm90YXRpb24gOiBWZWN0b3IzLCBzY2FsZSA6IFZlY3RvcjMpIDogdm9pZCB7XHJcbiAgICAgICAgLy8gVFJBTlNMQVRJT04gTUFUUklYXHRcclxuICAgICAgICBsZXQgdHJhbnNsYXRpb25NYXRyaXggPSBuZXcgTWF0cml4KDQsIDQpO1xyXG4gICAgICAgIHRoaXMuaWRlbnRpdHkodHJhbnNsYXRpb25NYXRyaXgpO1xyXG4gICAgICAgIHRoaXMudHJhbnNsYXRlKHRyYW5zbGF0aW9uTWF0cml4LCB0cmFuc2xhdGlvbik7XHJcblxyXG4gICAgICAgIC8vIFJPVEFUSU9OIE1BVFJJWFxyXG4gICAgICAgIGxldCByb3RhdGlvbk1hdHJpeCA9IG5ldyBNYXRyaXgoNCwgNCk7XHJcbiAgICAgICAgdGhpcy5pZGVudGl0eShyb3RhdGlvbk1hdHJpeCk7XHJcbiAgICAgICAgdGhpcy5yb3RhdGUocm90YXRpb25NYXRyaXgsIHJvdGF0aW9uKTtcclxuXHJcbiAgICAgICAgLy8gU0NBTElORyBNQVRSSVhcclxuICAgICAgICBsZXQgc2NhbGVNYXRyaXggPSBuZXcgTWF0cml4KDQsIDQpO1xyXG4gICAgICAgIHRoaXMuaWRlbnRpdHkoc2NhbGVNYXRyaXgpO1xyXG4gICAgICAgIHRoaXMuc2NhbGUoc2NhbGVNYXRyaXgsIHNjYWxlKTtcclxuXHJcbiAgICAgICAgLy8gQU5EIE5PVyBNVUxUSVBMWSBUSEVNIFRPR0VUSEVSIElOIFRIRSBDT1JSRUNUIE9SREVSXHJcbiAgICAgICAgbGV0IHRlbXBNYXRyaXggPSBuZXcgTWF0cml4KDQsIDQpO1xyXG4gICAgICAgIHRoaXMubXVsdGlwbHkodGVtcE1hdHJpeCwgdHJhbnNsYXRpb25NYXRyaXgsIHJvdGF0aW9uTWF0cml4KTtcclxuICAgICAgICB0aGlzLm11bHRpcGx5KHJlc3VsdCwgdGVtcE1hdHJpeCwgc2NhbGVNYXRyaXgpO1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBmdW5jdGlvbiBtdWx0aXBseShyZXN1bHQgOiBNYXRyaXgsIG1hdDAgOiBNYXRyaXgsIG1hdDEgOiBNYXRyaXgpIDogdm9pZCB7XHJcbiAgICAgICAgLy8gcmVzdWx0IE1JR0hUIEJFIG1hdDAgT1IgbWF0MSBTTyBJVCdTIEJFU1QgSUYgV0VcclxuICAgICAgICAvLyBDQUxDVUxBVEUgVEVNUCBWQUxVRVMgRklSU1QgQkVGT1JFIEFTU0lHTk1FTlRcclxuICAgICAgICBsZXQgcjAwID0gKG1hdDAuZ2V0KDAsIDApICogbWF0MS5nZXQoMCwgMCkpXHJcbiAgICAgICAgICAgICsgKG1hdDAuZ2V0KDAsIDEpICogbWF0MS5nZXQoMSwgMCkpXHJcbiAgICAgICAgICAgICsgKG1hdDAuZ2V0KDAsIDIpICogbWF0MS5nZXQoMiwgMCkpXHJcbiAgICAgICAgICAgICsgKG1hdDAuZ2V0KDAsIDMpICogbWF0MS5nZXQoMywgMCkpO1xyXG4gICAgICAgIGxldCByMTAgPSAobWF0MC5nZXQoMSwgMCkgKiBtYXQxLmdldCgwLCAwKSlcclxuICAgICAgICAgICAgKyAobWF0MC5nZXQoMSwgMSkgKiBtYXQxLmdldCgxLCAwKSlcclxuICAgICAgICAgICAgKyAobWF0MC5nZXQoMSwgMikgKiBtYXQxLmdldCgyLCAwKSlcclxuICAgICAgICAgICAgKyAobWF0MC5nZXQoMSwgMykgKiBtYXQxLmdldCgzLCAwKSk7XHJcbiAgICAgICAgbGV0IHIyMCA9IChtYXQwLmdldCgyLCAwKSAqIG1hdDEuZ2V0KDAsIDApKVxyXG4gICAgICAgICAgICArIChtYXQwLmdldCgyLCAxKSAqIG1hdDEuZ2V0KDEsIDApKVxyXG4gICAgICAgICAgICArIChtYXQwLmdldCgyLCAyKSAqIG1hdDEuZ2V0KDIsIDApKVxyXG4gICAgICAgICAgICArIChtYXQwLmdldCgyLCAzKSAqIG1hdDEuZ2V0KDMsIDApKTtcclxuICAgICAgICBsZXQgcjMwID0gKG1hdDAuZ2V0KDMsIDApICogbWF0MS5nZXQoMCwgMCkpXHJcbiAgICAgICAgICAgICsgKG1hdDAuZ2V0KDMsIDEpICogbWF0MS5nZXQoMSwgMCkpXHJcbiAgICAgICAgICAgICsgKG1hdDAuZ2V0KDMsIDIpICogbWF0MS5nZXQoMiwgMCkpXHJcbiAgICAgICAgICAgICsgKG1hdDAuZ2V0KDMsIDMpICogbWF0MS5nZXQoMywgMCkpO1xyXG4gICAgICAgIGxldCByMDEgPSAobWF0MC5nZXQoMCwgMCkgKiBtYXQxLmdldCgwLCAxKSlcclxuICAgICAgICAgICAgKyAobWF0MC5nZXQoMCwgMSkgKiBtYXQxLmdldCgxLCAxKSlcclxuICAgICAgICAgICAgKyAobWF0MC5nZXQoMCwgMikgKiBtYXQxLmdldCgyLCAxKSlcclxuICAgICAgICAgICAgKyAobWF0MC5nZXQoMCwgMykgKiBtYXQxLmdldCgzLCAxKSk7XHJcbiAgICAgICAgbGV0IHIxMSA9IChtYXQwLmdldCgxLCAwKSAqIG1hdDEuZ2V0KDAsIDEpKVxyXG4gICAgICAgICAgICArIChtYXQwLmdldCgxLCAxKSAqIG1hdDEuZ2V0KDEsIDEpKVxyXG4gICAgICAgICAgICArIChtYXQwLmdldCgxLCAyKSAqIG1hdDEuZ2V0KDIsIDEpKVxyXG4gICAgICAgICAgICArIChtYXQwLmdldCgxLCAzKSAqIG1hdDEuZ2V0KDMsIDEpKTtcclxuICAgICAgICBsZXQgcjIxID0gKG1hdDAuZ2V0KDIsIDApICogbWF0MS5nZXQoMCwgMSkpXHJcbiAgICAgICAgICAgICsgKG1hdDAuZ2V0KDIsIDEpICogbWF0MS5nZXQoMSwgMSkpXHJcbiAgICAgICAgICAgICsgKG1hdDAuZ2V0KDIsIDIpICogbWF0MS5nZXQoMiwgMSkpXHJcbiAgICAgICAgICAgICsgKG1hdDAuZ2V0KDIsIDMpICogbWF0MS5nZXQoMywgMSkpO1xyXG4gICAgICAgIGxldCByMzEgPSAobWF0MC5nZXQoMywgMCkgKiBtYXQxLmdldCgwLCAxKSlcclxuICAgICAgICAgICAgKyAobWF0MC5nZXQoMywgMSkgKiBtYXQxLmdldCgxLCAxKSlcclxuICAgICAgICAgICAgKyAobWF0MC5nZXQoMywgMikgKiBtYXQxLmdldCgyLCAxKSlcclxuICAgICAgICAgICAgKyAobWF0MC5nZXQoMywgMykgKiBtYXQxLmdldCgzLCAxKSk7XHJcbiAgICAgICAgbGV0IHIwMiA9IChtYXQwLmdldCgwLCAwKSAqIG1hdDEuZ2V0KDAsIDIpKVxyXG4gICAgICAgICAgICArIChtYXQwLmdldCgwLCAxKSAqIG1hdDEuZ2V0KDEsIDIpKVxyXG4gICAgICAgICAgICArIChtYXQwLmdldCgwLCAyKSAqIG1hdDEuZ2V0KDIsIDIpKVxyXG4gICAgICAgICAgICArIChtYXQwLmdldCgwLCAzKSAqIG1hdDEuZ2V0KDMsIDIpKTtcclxuICAgICAgICBsZXQgcjEyID0gKG1hdDAuZ2V0KDEsIDApICogbWF0MS5nZXQoMCwgMikpXHJcbiAgICAgICAgICAgICsgKG1hdDAuZ2V0KDEsIDEpICogbWF0MS5nZXQoMSwgMikpXHJcbiAgICAgICAgICAgICsgKG1hdDAuZ2V0KDEsIDIpICogbWF0MS5nZXQoMiwgMikpXHJcbiAgICAgICAgICAgICsgKG1hdDAuZ2V0KDEsIDMpICogbWF0MS5nZXQoMywgMikpO1xyXG4gICAgICAgIGxldCByMjIgPSAobWF0MC5nZXQoMiwgMCkgKiBtYXQxLmdldCgwLCAyKSlcclxuICAgICAgICAgICAgKyAobWF0MC5nZXQoMiwgMSkgKiBtYXQxLmdldCgxLCAyKSlcclxuICAgICAgICAgICAgKyAobWF0MC5nZXQoMiwgMikgKiBtYXQxLmdldCgyLCAyKSlcclxuICAgICAgICAgICAgKyAobWF0MC5nZXQoMiwgMykgKiBtYXQxLmdldCgzLCAyKSk7XHJcbiAgICAgICAgbGV0IHIzMiA9IChtYXQwLmdldCgzLCAwKSAqIG1hdDEuZ2V0KDAsIDIpKVxyXG4gICAgICAgICAgICArIChtYXQwLmdldCgzLCAxKSAqIG1hdDEuZ2V0KDEsIDIpKVxyXG4gICAgICAgICAgICArIChtYXQwLmdldCgzLCAyKSAqIG1hdDEuZ2V0KDIsIDIpKVxyXG4gICAgICAgICAgICArIChtYXQwLmdldCgzLCAzKSAqIG1hdDEuZ2V0KDMsIDIpKTtcclxuICAgICAgICBsZXQgcjAzID0gKG1hdDAuZ2V0KDAsIDApICogbWF0MS5nZXQoMCwgMykpXHJcbiAgICAgICAgICAgICsgKG1hdDAuZ2V0KDAsIDEpICogbWF0MS5nZXQoMSwgMykpXHJcbiAgICAgICAgICAgICsgKG1hdDAuZ2V0KDAsIDIpICogbWF0MS5nZXQoMiwgMykpXHJcbiAgICAgICAgICAgICsgKG1hdDAuZ2V0KDAsIDMpICogbWF0MS5nZXQoMywgMykpO1xyXG4gICAgICAgIGxldCByMTMgPSAobWF0MC5nZXQoMSwgMCkgKiBtYXQxLmdldCgwLCAzKSlcclxuICAgICAgICAgICAgKyAobWF0MC5nZXQoMSwgMSkgKiBtYXQxLmdldCgxLCAzKSlcclxuICAgICAgICAgICAgKyAobWF0MC5nZXQoMSwgMikgKiBtYXQxLmdldCgyLCAzKSlcclxuICAgICAgICAgICAgKyAobWF0MC5nZXQoMSwgMykgKiBtYXQxLmdldCgzLCAzKSk7XHJcbiAgICAgICAgbGV0IHIyMyA9IChtYXQwLmdldCgyLCAwKSAqIG1hdDEuZ2V0KDAsIDMpKVxyXG4gICAgICAgICAgICArIChtYXQwLmdldCgyLCAxKSAqIG1hdDEuZ2V0KDEsIDMpKVxyXG4gICAgICAgICAgICArIChtYXQwLmdldCgyLCAyKSAqIG1hdDEuZ2V0KDIsIDMpKVxyXG4gICAgICAgICAgICArIChtYXQwLmdldCgyLCAzKSAqIG1hdDEuZ2V0KDMsIDMpKTtcclxuICAgICAgICBsZXQgcjMzID0gKG1hdDAuZ2V0KDMsIDApICogbWF0MS5nZXQoMCwgMykpXHJcbiAgICAgICAgICAgICsgKG1hdDAuZ2V0KDMsIDEpICogbWF0MS5nZXQoMSwgMykpXHJcbiAgICAgICAgICAgICsgKG1hdDAuZ2V0KDMsIDIpICogbWF0MS5nZXQoMiwgMykpXHJcbiAgICAgICAgICAgICsgKG1hdDAuZ2V0KDMsIDMpICogbWF0MS5nZXQoMywgMykpO1xyXG5cclxuICAgICAgICAvLyBOT1cgUFVUIEFMTCBUSEUgQ0FMQ1VMQVRFRCBWQUxVRVMgSU4gVEhFIHJlc3VsdCBNQVRSSVhcclxuICAgICAgICByZXN1bHQuc2V0KHIwMCwgMCwgMCk7XHJcbiAgICAgICAgcmVzdWx0LnNldChyMTAsIDEsIDApO1xyXG4gICAgICAgIHJlc3VsdC5zZXQocjIwLCAyLCAwKTtcclxuICAgICAgICByZXN1bHQuc2V0KHIzMCwgMywgMCk7XHJcbiAgICAgICAgcmVzdWx0LnNldChyMDEsIDAsIDEpO1xyXG4gICAgICAgIHJlc3VsdC5zZXQocjExLCAxLCAxKTtcclxuICAgICAgICByZXN1bHQuc2V0KHIyMSwgMiwgMSk7XHJcbiAgICAgICAgcmVzdWx0LnNldChyMzEsIDMsIDEpO1xyXG4gICAgICAgIHJlc3VsdC5zZXQocjAyLCAwLCAyKTtcclxuICAgICAgICByZXN1bHQuc2V0KHIxMiwgMSwgMik7XHJcbiAgICAgICAgcmVzdWx0LnNldChyMjIsIDIsIDIpO1xyXG4gICAgICAgIHJlc3VsdC5zZXQocjMyLCAzLCAyKTtcclxuICAgICAgICByZXN1bHQuc2V0KHIwMywgMCwgMyk7XHJcbiAgICAgICAgcmVzdWx0LnNldChyMTMsIDEsIDMpO1xyXG4gICAgICAgIHJlc3VsdC5zZXQocjIzLCAyLCAzKTtcclxuICAgICAgICByZXN1bHQuc2V0KHIzMywgMywgMyk7XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHByb2plY3Rpb24ocmVzdWx0IDogTWF0cml4LCBuZWFyWiA6IG51bWJlciwgZmFyWiA6IG51bWJlciwgdmlld3BvcnRXaWR0aCA6IG51bWJlciwgdmlld3BvcnRIZWlnaHQgOiBudW1iZXIsIGZvdlkgOiBudW1iZXIpIDogdm9pZCB7XHJcbiAgICAgICAgbGV0IGFzcGVjdFJhdGlvID0gdmlld3BvcnRXaWR0aCAvIHZpZXdwb3J0SGVpZ2h0O1xyXG4gICAgICAgIGxldCBmaWVsZE9mVmlld1kgPSB0aGlzLm1hdGguZGVncmVlc1RvUmFkaWFucyhmb3ZZKTtcclxuICAgICAgICBsZXQgZmllbGRPZlZpZXdYID0gMiAqIE1hdGguYXRhbihNYXRoLnRhbihmaWVsZE9mVmlld1kgLyAyKSAqIGFzcGVjdFJhdGlvKTtcclxuXHJcbiAgICAgICAgLy8gV0UnTEwgVVNFIFRIRVNFIEFTIFNIT1JUSEFORCBGT1IgTE9BRElORyBPVVIgTUFUUklYXHJcbiAgICAgICAgbGV0IG4gPSBuZWFyWjtcclxuICAgICAgICBsZXQgZiA9IGZhclo7XHJcbiAgICAgICAgbGV0IHIgPSBNYXRoLnRhbihmaWVsZE9mVmlld1ggLyAyKSAqIG47XHJcbiAgICAgICAgbGV0IHQgPSBNYXRoLnRhbihmaWVsZE9mVmlld1kgLyAyKSAqIG47XHJcblxyXG4gICAgICAgIC8vIDAtM1xyXG4gICAgICAgIHJlc3VsdC5zZXQobiAvIHIsIDAsIDApO1xyXG4gICAgICAgIHJlc3VsdC5zZXQoMC4wLCAwLCAxKTtcclxuICAgICAgICByZXN1bHQuc2V0KDAuMCwgMCwgMik7XHJcbiAgICAgICAgcmVzdWx0LnNldCgwLjAsIDAsIDMpO1xyXG4gICAgICAgIC8vIDQtN1xyXG4gICAgICAgIHJlc3VsdC5zZXQoMC4wLCAxLCAwKTtcclxuICAgICAgICByZXN1bHQuc2V0KG4gLyB0LCAxLCAxKTtcclxuICAgICAgICByZXN1bHQuc2V0KDAuMCwgMSwgMik7XHJcbiAgICAgICAgcmVzdWx0LnNldCgwLjAsIDEsIDMpO1xyXG4gICAgICAgIC8vIDgtMTFcclxuICAgICAgICByZXN1bHQuc2V0KDAuMCwgMiwgMCk7XHJcbiAgICAgICAgcmVzdWx0LnNldCgwLjAsIDIsIDEpO1xyXG4gICAgICAgIHJlc3VsdC5zZXQoKC0oZiArIG4pKSAvIChmIC0gbiksIDIsIDIpO1xyXG4gICAgICAgIHJlc3VsdC5zZXQoKC0yICogZiAqIG4pIC8gKGYgLSBuKSwgMiwgMyk7XHJcbiAgICAgICAgLy8gMTItMTUgXHJcbiAgICAgICAgcmVzdWx0LnNldCgwLjAsIDMsIDApO1xyXG4gICAgICAgIHJlc3VsdC5zZXQoMC4wLCAzLCAxKTtcclxuICAgICAgICByZXN1bHQuc2V0KC0xLjAsIDMsIDIpO1xyXG4gICAgICAgIHJlc3VsdC5zZXQoMC4wLCAzLCAzKTtcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgZnVuY3Rpb24gcm90YXRlKHJlc3VsdCA6IE1hdHJpeCwgcm90YXRpb25WZWN0b3IgOiBWZWN0b3IzKSA6IHZvaWQge1xyXG4gICAgICAgIC8vIFNUQVJUIFdJVEggVEhFIFgtQVhJUyBST1RBVElPTlxyXG4gICAgICAgIGxldCB4Um90YXRpb25NYXRyaXggPSBuZXcgTWF0cml4KDQsIDQpO1xyXG4gICAgICAgIHRoaXMuaWRlbnRpdHkoeFJvdGF0aW9uTWF0cml4KTtcclxuICAgICAgICBsZXQgdGhldGFYID0gcm90YXRpb25WZWN0b3IuZ2V0VGhldGFYKCk7XHJcbiAgICAgICAgeFJvdGF0aW9uTWF0cml4LnNldChNYXRoLmNvcyh0aGV0YVgpLCAxLCAxKTtcclxuICAgICAgICB4Um90YXRpb25NYXRyaXguc2V0KE1hdGguc2luKHRoZXRhWCksIDIsIDEpO1xyXG4gICAgICAgIHhSb3RhdGlvbk1hdHJpeC5zZXQoLTEgKiBNYXRoLnNpbih0aGV0YVgpLCAxLCAyKTtcclxuICAgICAgICB4Um90YXRpb25NYXRyaXguc2V0KE1hdGguY29zKHRoZXRhWCksIDIsIDIpO1xyXG5cclxuICAgICAgICAvLyBTVEFSVCBXSVRIIFRIRSBZLUFYSVMgUk9UQVRJT05cclxuICAgICAgICBsZXQgeVJvdGF0aW9uTWF0cml4ID0gbmV3IE1hdHJpeCg0LCA0KTtcclxuICAgICAgICB0aGlzLmlkZW50aXR5KHlSb3RhdGlvbk1hdHJpeCk7XHJcbiAgICAgICAgbGV0IHRoZXRhWSA9IHJvdGF0aW9uVmVjdG9yLmdldFRoZXRhWSgpO1xyXG4gICAgICAgIHlSb3RhdGlvbk1hdHJpeC5zZXQoTWF0aC5jb3ModGhldGFZKSwgMCwgMCk7XHJcbiAgICAgICAgeVJvdGF0aW9uTWF0cml4LnNldCgtMSAqIE1hdGguc2luKHRoZXRhWSksIDIsIDApO1xyXG4gICAgICAgIHlSb3RhdGlvbk1hdHJpeC5zZXQoTWF0aC5zaW4odGhldGFZKSwgMCwgMik7XHJcbiAgICAgICAgeVJvdGF0aW9uTWF0cml4LnNldChNYXRoLmNvcyh0aGV0YVkpLCAyLCAyKTtcclxuXHJcbiAgICAgICAgLy8gU1RBUlQgV0lUSCBUSEUgWi1BWElTIFJPVEFUSU9OXHJcbiAgICAgICAgbGV0IHpSb3RhdGlvbk1hdHJpeCA9IG5ldyBNYXRyaXgoNCwgNCk7XHJcbiAgICAgICAgdGhpcy5pZGVudGl0eSh6Um90YXRpb25NYXRyaXgpO1xyXG4gICAgICAgIGxldCB0aGV0YVogPSByb3RhdGlvblZlY3Rvci5nZXRUaGV0YVooKTtcclxuICAgICAgICB6Um90YXRpb25NYXRyaXguc2V0KE1hdGguY29zKHRoZXRhWiksIDAsIDApO1xyXG4gICAgICAgIHpSb3RhdGlvbk1hdHJpeC5zZXQoTWF0aC5zaW4odGhldGFaKSwgMSwgMCk7XHJcbiAgICAgICAgelJvdGF0aW9uTWF0cml4LnNldCgtMSAqIE1hdGguc2luKHRoZXRhWiksIDAsIDEpO1xyXG4gICAgICAgIHpSb3RhdGlvbk1hdHJpeC5zZXQoTWF0aC5jb3ModGhldGFaKSwgMSwgMSk7XHJcblxyXG4gICAgICAgIC8vIFNUQVJUIFdJVEggVEhFIFgtQVhJUyBST1RBVElPTlxyXG4gICAgICAgIGxldCB0ZW1wTWF0cml4ID0gbmV3IE1hdHJpeCg0LCA0KTtcclxuICAgICAgICB0aGlzLmlkZW50aXR5KHRlbXBNYXRyaXgpO1xyXG4gICAgICAgIHRoaXMubXVsdGlwbHkodGVtcE1hdHJpeCwgeFJvdGF0aW9uTWF0cml4LCB5Um90YXRpb25NYXRyaXgpO1xyXG4gICAgICAgIHRoaXMubXVsdGlwbHkocmVzdWx0LCB0ZW1wTWF0cml4LCB6Um90YXRpb25NYXRyaXgpO1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBmdW5jdGlvbiBzY2FsZShyZXN1bHQgOiBNYXRyaXgsIHNjYWxlVmVjdG9yIDogVmVjdG9yMykgOiB2b2lkIHtcclxuICAgICAgICAvLyBTVEFSVCBXSVRIIFRIRSBJREVOVElUWSBNQVRSSVhcclxuICAgICAgICB0aGlzLmlkZW50aXR5KHJlc3VsdCwgc2NhbGVWZWN0b3IpO1xyXG5cclxuICAgICAgICAvLyBBTkQgVEhFTiBMT0FEIElOIFRIRSBUUkFOU0xBVElPTiBWQUxVRVNcclxuICAgICAgICByZXN1bHQuc2V0KHNjYWxlVmVjdG9yLmdldFgoKSwgMCwgMCk7XHJcbiAgICAgICAgcmVzdWx0LnNldChzY2FsZVZlY3Rvci5nZXRZKCksIDEsIDEpO1xyXG4gICAgICAgIHJlc3VsdC5zZXQoc2NhbGVWZWN0b3IuZ2V0WigpLCAyLCAyKTtcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtKHJlc3VsdCA6IFZlY3RvcjMsIG1hdCA6IE1hdHJpeCwgdmVjIDogVmVjdG9yMykgOiB2b2lkIHtcclxuICAgICAgICByZXN1bHQuc2V0WCgobWF0LmdldCgwLCAwKSAqIHZlYy5nZXRYKCkpICsgKG1hdC5nZXQoMCwgMSkgKiB2ZWMuZ2V0WSgpKSArIChtYXQuZ2V0KDAsIDIpICogdmVjLmdldFooKSkgKyAobWF0LmdldCgwLCAzKSAqIHZlYy5nZXRXKCkpKTtcclxuICAgICAgICByZXN1bHQuc2V0WSgobWF0LmdldCgxLCAwKSAqIHZlYy5nZXRYKCkpICsgKG1hdC5nZXQoMSwgMSkgKiB2ZWMuZ2V0WSgpKSArIChtYXQuZ2V0KDEsIDIpICogdmVjLmdldFooKSkgKyAobWF0LmdldCgxLCAzKSAqIHZlYy5nZXRXKCkpKTtcclxuICAgICAgICByZXN1bHQuc2V0WigobWF0LmdldCgyLCAwKSAqIHZlYy5nZXRYKCkpICsgKG1hdC5nZXQoMiwgMSkgKiB2ZWMuZ2V0WSgpKSArIChtYXQuZ2V0KDIsIDIpICogdmVjLmdldFooKSkgKyAobWF0LmdldCgyLCAzKSAqIHZlYy5nZXRXKCkpKTtcclxuICAgICAgICByZXN1bHQuc2V0VygobWF0LmdldCgzLCAwKSAqIHZlYy5nZXRYKCkpICsgKG1hdC5nZXQoMywgMSkgKiB2ZWMuZ2V0WSgpKSArIChtYXQuZ2V0KDMsIDIpICogdmVjLmdldFooKSkgKyAobWF0LmdldCgzLCAzKSAqIHZlYy5nZXRXKCkpKTtcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgZnVuY3Rpb24gdHJhbnNsYXRlKHJlc3VsdCA6IE1hdHJpeCwgdHJhbnNsYXRpb25WZWN0b3IgOiBWZWN0b3IzKSA6IHZvaWQge1xyXG4gICAgICAgIC8vIFNUQVJUIFdJVEggVEhFIElERU5USVRZIE1BVFJJWFxyXG4gICAgICAgIHRoaXMuaWRlbnRpdHkocmVzdWx0KTtcclxuXHJcbiAgICAgICAgLy8gQU5EIFRIRU4gTE9BRCBJTiBUSEUgVFJBTlNMQVRJT04gVkFMVUVTXHJcbiAgICAgICAgcmVzdWx0LnNldCh0cmFuc2xhdGlvblZlY3Rvci5nZXRYKCksIDAsIDMpO1xyXG4gICAgICAgIHJlc3VsdC5zZXQodHJhbnNsYXRpb25WZWN0b3IuZ2V0WSgpLCAxLCAzKTtcclxuICAgICAgICByZXN1bHQuc2V0KHRyYW5zbGF0aW9uVmVjdG9yLmdldFooKSwgMiwgMyk7XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHRyYW5zcG9zZShyZXN1bHQgOiBNYXRyaXgsIG1hdCA6IE1hdHJpeCkgOiB2b2lkIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDQ7IGkrKykge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IDQ7IGorKykge1xyXG4gICAgICAgICAgICAgICAgbGV0IHRlbXAgPSBtYXQuZ2V0KGksIGopO1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0LnNldCh0ZW1wLCBqLCBpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgZnVuY3Rpb24gdmlldyhyZXN1bHQgOiBNYXRyaXgsIGNhbWVyYVBvc2l0aW9uIDogVmVjdG9yMywgY2FtZXJhT3JpZW50YXRpb24gOiBWZWN0b3IzKSA6IHZvaWQge1xyXG4gICAgICAgIGxldCBwaXRjaCA9IHRoaXMubWF0aC5kZWdyZWVzVG9SYWRpYW5zKGNhbWVyYU9yaWVudGF0aW9uLmdldFRoZXRhWCgpKTtcclxuICAgICAgICBsZXQgeWF3ID0gdGhpcy5tYXRoLmRlZ3JlZXNUb1JhZGlhbnMoY2FtZXJhT3JpZW50YXRpb24uZ2V0VGhldGFZKCkpO1xyXG4gICAgICAgIGxldCByb2xsID0gdGhpcy5tYXRoLmRlZ3JlZXNUb1JhZGlhbnMoY2FtZXJhT3JpZW50YXRpb24uZ2V0VGhldGFaKCkpO1xyXG5cclxuICAgICAgICAvLyBUTyBUUkFOU0xBVEVcclxuICAgICAgICBsZXQgdHJhbnNsYXRlVmVjdG9yID0gdGhpcy5tYXRoLnZlY3Rvck1hdGguY3JlYXRlUG9zaXRpb25WZWN0b3IoKTtcclxuICAgICAgICB0cmFuc2xhdGVWZWN0b3Iuc2V0KC1jYW1lcmFQb3NpdGlvbi5nZXRYKCksIC1jYW1lcmFQb3NpdGlvbi5nZXRZKCksIC1jYW1lcmFQb3NpdGlvbi5nZXRaKCkpO1xyXG4gICAgICAgIGxldCB0cmFuc2xhdGVNYXRyaXggPSBuZXcgTWF0cml4KDQsIDQpO1xyXG4gICAgICAgIHRoaXMuaWRlbnRpdHkodHJhbnNsYXRlTWF0cml4KTtcclxuICAgICAgICB0aGlzLnRyYW5zbGF0ZSh0cmFuc2xhdGVNYXRyaXgsIHRyYW5zbGF0ZVZlY3Rvcik7XHJcblxyXG4gICAgICAgIC8vIFRPIFJPVEFURVxyXG4gICAgICAgIGxldCByb3RhdGVWZWN0b3IgPSB0aGlzLm1hdGgudmVjdG9yTWF0aC5jcmVhdGVSb3RhdGlvblZlY3RvcigpO1xyXG4gICAgICAgIHJvdGF0ZVZlY3Rvci5zZXQoLXBpdGNoLCAteWF3LCAtcm9sbCk7XHJcbiAgICAgICAgbGV0IHJvdGF0ZU1hdHJpeCA9IG5ldyBNYXRyaXgoNCwgNCk7XHJcbiAgICAgICAgdGhpcy5yb3RhdGUocm90YXRlTWF0cml4LCByb3RhdGVWZWN0b3IpO1xyXG5cclxuICAgICAgICAvLyBOT1cgQ09NQklORSBUSEUgMiBNQVRSSUNFU1xyXG4gICAgICAgIHRoaXMubXVsdGlwbHkocmVzdWx0LCByb3RhdGVNYXRyaXgsIHRyYW5zbGF0ZU1hdHJpeCk7XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGFkZFZlY3RvcnMocmVzdWx0IDogVmVjdG9yMywgdmVjMCA6IFZlY3RvcjMsIHZlYzEgOiBWZWN0b3IzKSA6IHZvaWQge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmVjMC5nZXRTaXplKCk7IGkrKykge1xyXG4gICAgICAgICAgICBsZXQgdG90YWwgPSB2ZWMwLmdldEF0KGkpICsgdmVjMS5nZXRBdChpKTtcclxuICAgICAgICAgICAgcmVzdWx0LnNldEF0KGksIHRvdGFsKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGNyb3NzUHJvZHVjdChyZXN1bHQgOiBWZWN0b3IzLCB2ZWMwIDogVmVjdG9yMywgdmVjMSA6IFZlY3RvcjMpIDogdm9pZCB7XHJcbiAgICAgICAgbGV0IHJlc3VsdDAgPSAodmVjMC5nZXRZKCkgKiB2ZWMxLmdldFooKSlcclxuICAgICAgICAgICAgLSAodmVjMS5nZXRZKCkgKiB2ZWMwLmdldFooKSk7XHJcbiAgICAgICAgbGV0IHJlc3VsdDEgPSAodmVjMC5nZXRaKCkgKiB2ZWMxLmdldFgoKSlcclxuICAgICAgICAgICAgLSAodmVjMS5nZXRaKCkgKiB2ZWMwLmdldFgoKSk7XHJcbiAgICAgICAgbGV0IHJlc3VsdDIgPSAodmVjMC5nZXRYKCkgKiB2ZWMxLmdldFkoKSlcclxuICAgICAgICAgICAgLSAodmVjMS5nZXRYKCkgKiB2ZWMwLmdldFkoKSk7XHJcbiAgICAgICAgcmVzdWx0LnNldFgocmVzdWx0MCk7XHJcbiAgICAgICAgcmVzdWx0LnNldFkocmVzdWx0MSk7XHJcbiAgICAgICAgcmVzdWx0LnNldFoocmVzdWx0Mik7XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGRvdFByb2R1Y3QodmVjMCA6IFZlY3RvcjMsIHZlYzEgOiBWZWN0b3IzKSA6IG51bWJlciB7XHJcbiAgICAgICAgbGV0IHJlc3VsdFggPSB2ZWMwLmdldFgoKSAqIHZlYzEuZ2V0WCgpO1xyXG4gICAgICAgIGxldCByZXN1bHRZID0gdmVjMC5nZXRZKCkgKiB2ZWMxLmdldFkoKTtcclxuICAgICAgICBsZXQgcmVzdWx0WiA9IHZlYzAuZ2V0WigpICogdmVjMS5nZXRaKCk7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdFggKyByZXN1bHRZICsgcmVzdWx0WjtcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgZnVuY3Rpb24gbXVsdGlwbHlWZWN0b3JzKHJlc3VsdCA6IFZlY3RvcjMsIHZlYyA6IFZlY3RvcjMsIHNjYWxhciA6IG51bWJlcikgOiB2b2lkIHtcclxuICAgICAgICBsZXQgdmVjWCA9IHZlYy5nZXRYKCkgKiBzY2FsYXI7XHJcbiAgICAgICAgbGV0IHZlY1kgPSB2ZWMuZ2V0WSgpICogc2NhbGFyO1xyXG4gICAgICAgIGxldCB2ZWNaID0gdmVjLmdldFooKSAqIHNjYWxhcjtcclxuICAgICAgICByZXN1bHQuc2V0WCh2ZWNYKTtcclxuICAgICAgICByZXN1bHQuc2V0WSh2ZWNZKTtcclxuICAgICAgICByZXN1bHQuc2V0Wih2ZWNaKTtcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplKHJlc3VsdCA6IFZlY3RvcjMsIHZlYyA6IFZlY3RvcjMpIDogdm9pZCB7XHJcbiAgICAgICAgbGV0IHhTcXVhcmVkID0gdmVjLmdldFgoKSAqIHZlYy5nZXRYKCk7XHJcbiAgICAgICAgbGV0IHlTcXVhcmVkID0gdmVjLmdldFkoKSAqIHZlYy5nZXRZKCk7XHJcbiAgICAgICAgbGV0IHpTcXVhcmVkID0gdmVjLmdldFooKSAqIHZlYy5nZXRaKCk7XHJcbiAgICAgICAgbGV0IGRpc3RhbmNlID0gTWF0aC5zcXJ0KHhTcXVhcmVkICsgeVNxdWFyZWQgKyB6U3F1YXJlZCk7XHJcbiAgICAgICAgcmVzdWx0LnNldFgodmVjLmdldFgoKSAvIGRpc3RhbmNlKTtcclxuICAgICAgICByZXN1bHQuc2V0WSh2ZWMuZ2V0WSgpIC8gZGlzdGFuY2UpO1xyXG4gICAgICAgIHJlc3VsdC5zZXRaKHZlYy5nZXRaKCkgLyBkaXN0YW5jZSk7XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHN1YnRyYWN0VmVjdG9ycyhyZXN1bHQgOiBWZWN0b3IzLCB2ZWMwIDogVmVjdG9yMywgdmVjMSA6IFZlY3RvcjMpIDogdm9pZCB7XHJcbiAgICAgICAgbGV0IHJlc3VsdFggPSB2ZWMwLmdldFgoKSAtIHZlYzEuZ2V0WCgpO1xyXG4gICAgICAgIGxldCByZXN1bHRZID0gdmVjMC5nZXRZKCkgLSB2ZWMxLmdldFkoKTtcclxuICAgICAgICBsZXQgcmVzdWx0WiA9IHZlYzAuZ2V0WigpIC0gdmVjMS5nZXRaKCk7XHJcbiAgICAgICAgcmVzdWx0LnNldFgocmVzdWx0WCk7XHJcbiAgICAgICAgcmVzdWx0LnNldFkocmVzdWx0WSk7XHJcbiAgICAgICAgcmVzdWx0LnNldFoocmVzdWx0Wik7XHJcbiAgICB9XHJcbn0iLCIvKlxyXG4gKiBBIE1hdHJpeCBpcyB1c2VkIGZvciB0cmFuc2Zvcm1pbmcgcG9pbnRzIGZyb20gbG9jYWxcclxuICogY29vcmRpbmF0ZXMgdG8gd29ybGQgY29vcmRpbmF0ZXMuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTWF0cml4IHtcclxuICAgIHByaXZhdGUgbWF0IDogRmxvYXQzMkFycmF5O1xyXG4gICAgcHJpdmF0ZSByb3dzIDogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBjb2x1bW5zIDogbnVtYmVyO1xyXG5cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcihyb3dzIDogbnVtYmVyLCBjb2x1bW5zIDogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5yb3dzID0gcm93cztcclxuICAgICAgICB0aGlzLmNvbHVtbnMgPSBjb2x1bW5zO1xyXG4gICAgICAgIHRoaXMubWF0ID0gbmV3IEZsb2F0MzJBcnJheShyb3dzICogY29sdW1ucyk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAocm93cyAqIGNvbHVtbnMpOyBpKyspXHJcbiAgICAgICAgICAgIHRoaXMubWF0W2ldID0gMC4wO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXREYXRhKCkgOiBGbG9hdDMyQXJyYXkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm1hdDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0Um93cygpIDogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yb3dzO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRDb2x1bW5zKCkgOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbHVtbnM7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldEluZGV4IChyb3dzIDogbnVtYmVyLCBjb2x1bW5zIDogbnVtYmVyKSA6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuICh0aGlzLnJvd3MgKiBjb2x1bW5zKSArIHJvd3M7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHB1YmxpYyBnZXQgKHJvdyA6IG51bWJlciwgY29sdW1uIDogbnVtYmVyKSA6IG51bWJlciB7XHJcbiAgICAgICAgbGV0IGluZGV4ID0gdGhpcy5nZXRJbmRleChyb3csIGNvbHVtbik7XHJcbiAgICAgICAgbGV0IHZhbHVlVG9SZXR1cm4gPSB0aGlzLm1hdFtpbmRleF07XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlVG9SZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCAodmFsdWUgOiBudW1iZXIsIHJvdyA6IG51bWJlciwgY29sdW1uIDogbnVtYmVyKSB7XHJcbiAgICAgICAgbGV0IGluZGV4ID0gdGhpcy5nZXRJbmRleChyb3csIGNvbHVtbik7XHJcbiAgICAgICAgdGhpcy5tYXRbaW5kZXhdID0gdmFsdWU7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHB1YmxpYyBwcmludCAoKSA6IHZvaWQge1xyXG4gICAgICAgIGxldCBtYXhXaWR0aCA9IDA7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA0OyBpKyspIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCA0OyBqKyspIHtcclxuICAgICAgICAgICAgICAgIGxldCB0ZXN0TnVtID0gdGhpcy5nZXQoaiwgaSkgKyBcIlwiO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRlc3ROdW0ubGVuZ3RoID4gbWF4V2lkdGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBtYXhXaWR0aCA9IHRlc3ROdW0ubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCB0ZXh0ID0gXCJbIFwiO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5yb3dzOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGkgPiAwKVxyXG4gICAgICAgICAgICAgICAgdGV4dCArPSBcIiAgXCI7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdGhpcy5jb2x1bW5zOyBqKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBudW1UZXh0ID0gdGhpcy5nZXQoaSwgaikgKyBcIlwiO1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKG51bVRleHQubGVuZ3RoIDwgbWF4V2lkdGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBudW1UZXh0ID0gXCIgXCIgKyBudW1UZXh0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGV4dCArPSBudW1UZXh0O1xyXG4gICAgICAgICAgICAgICAgaWYgKGogPCAodGhpcy5jb2x1bW5zIC0gMSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0ICs9IFwiLFwiO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGV4dCArPSBcIiBcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoaSA8ICh0aGlzLnJvd3MgLSAxKSkge1xyXG4gICAgICAgICAgICAgICAgdGV4dCArPSBcIlxcblwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRleHQgKz0gXCJdXCI7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHRleHQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIi8qKlxyXG4gKiBWZWN0b3IzXHJcbiAqIFxyXG4gKiBUaGUgVmVjdG9yMyBjbGFzcyBjYW4gYmUgdXNlZCBmb3IgYW55IDJkIG9yIDNkIHBvaW50LCB2ZWN0b3IsIFxyXG4gKiBvciByb3RhdGlvbiAoaS5lLiBhbmdsZXMgb2Ygb3JpZW50YXRpb24pLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFZlY3RvcjMge1xyXG4gICAgcHJpdmF0ZSB2ZWMgOiBGbG9hdDMyQXJyYXk7XHJcbiAgICBwcml2YXRlIHNpemUgOiBudW1iZXI7XHJcblxyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMudmVjID0gbmV3IEZsb2F0MzJBcnJheSg0KTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDQ7IGkrKylcclxuICAgICAgICAgICAgdGhpcy52ZWNbaV0gPSAwLjA7XHJcbiAgICAgICAgdGhpcy5zaXplID0gNDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0U2l6ZSgpIDogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zaXplO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRBdChpbmRleCA6IG51bWJlcikgOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnZlY1tpbmRleF07XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldFgoKSA6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudmVjWzBdO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRZKCkgOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnZlY1sxXTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0WigpIDogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy52ZWNbMl07XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldFcoKSA6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudmVjWzNdO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRUaGV0YVgoKSA6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudmVjWzBdO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRUaGV0YVkoKSA6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudmVjWzFdO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRUaGV0YVooKSA6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudmVjWzJdO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQoaW5pdDAgOiBudW1iZXIsIGluaXQxIDogbnVtYmVyLCBpbml0MiA6IG51bWJlciwgaW5pdDMgOiBudW1iZXIpIDogdm9pZCB7XHJcbiAgICAgICAgdGhpcy52ZWNbMF0gPSBpbml0MDtcclxuICAgICAgICB0aGlzLnZlY1sxXSA9IGluaXQxO1xyXG4gICAgICAgIHRoaXMudmVjWzJdID0gaW5pdDI7XHJcbiAgICAgICAgdGhpcy52ZWNbM10gPSBpbml0MztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0QXQoaW5kZXggOiBudW1iZXIsIHZhbHVlIDogbnVtYmVyKSA6IHZvaWQge1xyXG4gICAgICAgIHRoaXMudmVjW2luZGV4XSA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXRYKGluaXRYIDogbnVtYmVyKSA6IHZvaWQge1xyXG4gICAgICAgIHRoaXMudmVjWzBdID0gaW5pdFg7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldFkoaW5pdFkgOiBudW1iZXIpIDogdm9pZCB7XHJcbiAgICAgICAgdGhpcy52ZWNbMV0gPSBpbml0WTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0Wihpbml0WiA6IG51bWJlcikgOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnZlY1syXSA9IGluaXRaO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXRXKGluaXRXIDogbnVtYmVyKSA6IHZvaWQge1xyXG4gICAgICAgIHRoaXMudmVjWzNdID0gaW5pdFc7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldFRoZXRhWChpbml0VGhldGFYIDogbnVtYmVyKSA6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuc2V0WChpbml0VGhldGFYKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0VGhldGFZKGluaXRUaGV0YVkgOiBudW1iZXIpIDogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5zZXRZKGluaXRUaGV0YVkpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXRUaGV0YVooaW5pdFRoZXRhWiA6IG51bWJlcikgOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnNldFooaW5pdFRoZXRhWik7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHByaW50KCkgOiB2b2lkIHtcclxuICAgICAgICBsZXQgdGV4dCA9IFwiW1wiO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zaXplOyBpKyspIHtcclxuICAgICAgICAgICAgdGV4dCArPSB0aGlzLnZlY1tpXTtcclxuICAgICAgICAgICAgaWYgKGkgPCAodGhpcy5zaXplIC0gMSkpIHtcclxuICAgICAgICAgICAgICAgIHRleHQgKz0gXCIsIFwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRleHQgKz0gXCJdXCI7XHJcbiAgICAgICAgY29uc29sZS5sb2codGV4dCk7XHJcbiAgICB9XHJcbn0iLCIvKlxyXG4gKiBUaGlzIGNsYXNzIHJlbmRlcnMgdGV4dCB0byBhIGNhbnZhcywgdXBkYXRlZCBlYWNoIGZyYW1lLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFRleHRUb1JlbmRlciB7XHJcbiAgICBwdWJsaWMgaWQgOiBzdHJpbmc7XHJcbiAgICBwdWJsaWMgdGV4dCA6IHN0cmluZztcclxuICAgIHB1YmxpYyB4IDogbnVtYmVyO1xyXG4gICAgcHVibGljIHkgOiBudW1iZXI7XHJcbiAgICBwdWJsaWMgdXBkYXRlIDogRnVuY3Rpb247XHJcbiAgICBwdWJsaWMgZm9udEZhbWlseSA6IHN0cmluZztcclxuICAgIHB1YmxpYyBmb250U2l6ZSA6IG51bWJlcjtcclxuICAgIHB1YmxpYyBmb250Q29sb3IgOiBzdHJpbmc7XHJcbiAgICBwdWJsaWMgcHJvcGVydGllcyA6IE1hcDxzdHJpbmcsIG9iamVjdD47XHJcblxyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKGluaXRJZCA6IHN0cmluZywgaW5pdFRleHQgOiBzdHJpbmcsIGluaXRYIDogbnVtYmVyLCBpbml0WSA6IG51bWJlciwgaW5pdFVwZGF0ZSA6IEZ1bmN0aW9uKSB7XHJcbiAgICAgICAgdGhpcy5pZCA9IGluaXRJZDtcclxuICAgICAgICB0aGlzLnRleHQgPSBpbml0VGV4dDtcclxuICAgICAgICB0aGlzLnggPSBpbml0WDtcclxuICAgICAgICB0aGlzLnkgPSBpbml0WTtcclxuICAgICAgICB0aGlzLnVwZGF0ZSA9IGluaXRVcGRhdGU7XHJcbiAgICAgICAgdGhpcy5mb250RmFtaWx5ID0gXCJcIjtcclxuICAgICAgICB0aGlzLmZvbnRTaXplID0gMDtcclxuICAgICAgICB0aGlzLmZvbnRDb2xvciA9IFwiXCI7XHJcbiAgICAgICAgdGhpcy5wcm9wZXJ0aWVzID0gbmV3IE1hcCgpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgVGV4dFJlbmRlcmVyIHtcclxuICAgIHByaXZhdGUgdGV4dFRvUmVuZGVyIDogQXJyYXk8VGV4dFRvUmVuZGVyPjtcclxuICAgIHByaXZhdGUgdGV4dENhbnZhcyA6IEhUTUxDYW52YXNFbGVtZW50O1xyXG4gICAgcHJpdmF0ZSB0ZXh0Q2FudmFzV2lkdGggOiBudW1iZXI7XHJcbiAgICBwcml2YXRlIHRleHRDYW52YXNIZWlnaHQgOiBudW1iZXI7XHJcbiAgICBwcml2YXRlIHRleHRDdHggOiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQ7XHJcbiAgICBwcml2YXRlIGRlZmF1bHRGb250RmFtaWx5IDogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSBkZWZhdWx0Rm9udFNpemUgOiBudW1iZXI7XHJcbiAgICBwcml2YXRlIGRlZmF1bHRGb250Q29sb3IgOiBzdHJpbmc7XHJcblxyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHRleHRDYW52YXNJZCA6IHN0cmluZywgaW5pdEZvbnRGYW1pbHkgOiBzdHJpbmcsIGluaXRGb250U2l6ZSA6IG51bWJlciwgaW5pdEZvbnRDb2xvciA6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMudGV4dFRvUmVuZGVyID0gbmV3IEFycmF5KCk7XHJcbiAgICAgICAgdGhpcy50ZXh0Q2FudmFzID0gPEhUTUxDYW52YXNFbGVtZW50PmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRleHRDYW52YXNJZCk7XHJcbiAgICAgICAgdGhpcy50ZXh0Q2FudmFzLndpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XHJcbiAgICAgICAgdGhpcy50ZXh0Q2FudmFzLmhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcclxuICAgICAgICB0aGlzLnRleHRDYW52YXNXaWR0aCA9IHRoaXMudGV4dENhbnZhcy53aWR0aDtcclxuICAgICAgICB0aGlzLnRleHRDYW52YXNIZWlnaHQgPSB0aGlzLnRleHRDYW52YXMuaGVpZ2h0O1xyXG4gICAgICAgIHRoaXMudGV4dEN0eCA9IHRoaXMudGV4dENhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XHJcbiAgICAgICAgdGhpcy5kZWZhdWx0Rm9udEZhbWlseSA9IGluaXRGb250RmFtaWx5O1xyXG4gICAgICAgIHRoaXMuZGVmYXVsdEZvbnRTaXplID0gaW5pdEZvbnRTaXplO1xyXG4gICAgICAgIHRoaXMuZGVmYXVsdEZvbnRDb2xvciA9IGluaXRGb250Q29sb3I7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHB1YmxpYyBhZGRUZXh0VG9SZW5kZXIodGV4dFRvQWRkIDogVGV4dFRvUmVuZGVyKSA6IHZvaWQge1xyXG4gICAgICAgIHRleHRUb0FkZC5mb250RmFtaWx5ID0gdGhpcy5kZWZhdWx0Rm9udEZhbWlseTtcclxuICAgICAgICB0ZXh0VG9BZGQuZm9udFNpemUgPSB0aGlzLmRlZmF1bHRGb250U2l6ZTtcclxuICAgICAgICB0ZXh0VG9BZGQuZm9udENvbG9yID0gdGhpcy5kZWZhdWx0Rm9udENvbG9yO1xyXG4gICAgICAgIHRoaXMudGV4dFRvUmVuZGVyLnB1c2godGV4dFRvQWRkKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY2xlYXIoKSA6IHZvaWQge1xyXG4gICAgICAgIHRoaXMudGV4dFRvUmVuZGVyID0gW107XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldENhbnZhc1dpZHRoKCkgOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnRleHRDYW52YXNXaWR0aDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0Q2FudmFzSGVpZ2h0KCkgOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnRleHRDYW52YXNIZWlnaHQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHJlbmRlcigpIDogdm9pZCB7XHJcbiAgICAgICAgdGhpcy50ZXh0Q3R4LmNsZWFyUmVjdCgwLCAwLCB0aGlzLnRleHRDYW52YXMud2lkdGgsIHRoaXMudGV4dENhbnZhcy5oZWlnaHQpO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy50ZXh0VG9SZW5kZXIubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdmFyIHRleHRUb1JlbmRlciA9IHRoaXMudGV4dFRvUmVuZGVyW2ldO1xyXG4gICAgICAgICAgICB0ZXh0VG9SZW5kZXIudXBkYXRlKCk7XHJcbiAgICAgICAgICAgIHRoaXMudGV4dEN0eC5mb250ID0gXCJcIiArIHRleHRUb1JlbmRlci5mb250U2l6ZSArIFwicHggXCIgKyB0ZXh0VG9SZW5kZXIuZm9udEZhbWlseTtcclxuICAgICAgICAgICAgdGhpcy50ZXh0Q3R4LmZpbGxTdHlsZSA9IHRleHRUb1JlbmRlci5mb250Q29sb3I7XHJcbiAgICAgICAgICAgIHRoaXMudGV4dEN0eC5maWxsVGV4dCh0ZXh0VG9SZW5kZXIudGV4dCwgdGV4dFRvUmVuZGVyLngsIHRleHRUb1JlbmRlci55KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBXZWJHTEdhbWVTaGFkZXIgfSBmcm9tICcuL1dlYkdMR2FtZVNoYWRlcidcclxuaW1wb3J0IHsgTWF0cml4IH0gZnJvbSAnLi4vbWF0aC9NYXRyaXgnXHJcbmltcG9ydCB7IFZlY3RvcjMgfSBmcm9tICcuLi9tYXRoL1ZlY3RvcjMnXHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgV2ViR0xHYW1lUmVuZGVyaW5nQ29tcG9uZW50IHtcclxuICAgIHByb3RlY3RlZCByZWFkb25seSBBX1BPU0lUSU9OID0gXCJhX1Bvc2l0aW9uXCI7XHJcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgQV9URVhfQ09PUkQgPSBcImFfVGV4Q29vcmRcIjtcclxuICAgIHByb3RlY3RlZCByZWFkb25seSBVX01FU0hfVFJBTlNGT1JNID0gXCJ1X01lc2hUcmFuc2Zvcm1cIjtcclxuICAgIHByb3RlY3RlZCByZWFkb25seSBVX1RFWF9DT09SRF9GQUNUT1IgPSBcInVfVGV4Q29vcmRGYWN0b3JcIjtcclxuICAgIHByb3RlY3RlZCByZWFkb25seSBVX1RFWF9DT09SRF9TSElGVCA9IFwidV9UZXhDb29yZFNoaWZ0XCI7XHJcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgVV9TQU1QTEVSID0gXCJ1X1NhbXBsZXJcIjtcclxuICAgIHByb3RlY3RlZCByZWFkb25seSBOVU1fVkVSVElDRVMgPSA0O1xyXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IEZMT0FUU19QRVJfVkVSVEVYID0gMjtcclxuICAgIHByb3RlY3RlZCByZWFkb25seSBGTE9BVFNfUEVSX1RFWFRVUkVfQ09PUkRJTkFURSA9IDI7XHJcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgVE9UQUxfQllURVMgPSAxNjtcclxuICAgIHByb3RlY3RlZCByZWFkb25seSBWRVJURVhfUE9TSVRJT05fT0ZGU0VUID0gMDtcclxuICAgIHByb3RlY3RlZCByZWFkb25seSBURVhUVVJFX0NPT1JESU5BVEVfT0ZGU0VUID0gODtcclxuICAgIHByb3RlY3RlZCByZWFkb25seSBJTkRFWF9PRl9GSVJTVF9WRVJURVggPSAwO1xyXG5cclxuICAgIC8vIFRIRVNFIFdJTEwgQkUgUFJPVklERUQgQ1VTVE9NTFkgQUZURVIgQ09OU1RSVUNUSU9OIERVUklORyBpbml0XHJcbiAgICBwcm90ZWN0ZWQgc2hhZGVyOiBXZWJHTEdhbWVTaGFkZXI7XHJcbiAgICBwcm90ZWN0ZWQgdmVydGV4RGF0YUJ1ZmZlcjogV2ViR0xCdWZmZXI7XHJcbiAgICBwcm90ZWN0ZWQgd2ViR0xBdHRyaWJ1dGVMb2NhdGlvbnM6IE1hcDxzdHJpbmcsIEdMdWludD47XHJcbiAgICBwcm90ZWN0ZWQgd2ViR0xVbmlmb3JtTG9jYXRpb25zOiBNYXA8c3RyaW5nLCBXZWJHTFVuaWZvcm1Mb2NhdGlvbj47XHJcblxyXG4gICAgLy8gV0UnTEwgVVNFIFRIRVNFIEZPUiBUUkFOU09GTVJJTkcgT0JKRUNUUyBXSEVOIFdFIERSQVcgVEhFTVxyXG4gICAgcHJvdGVjdGVkIG1lc2hUcmFuc2Zvcm06IE1hdHJpeDtcclxuICAgIHByb3RlY3RlZCBtZXNoVHJhbnNsYXRlOiBWZWN0b3IzO1xyXG4gICAgcHJvdGVjdGVkIG1lc2hSb3RhdGU6IFZlY3RvcjM7XHJcbiAgICBwcm90ZWN0ZWQgbWVzaFNjYWxlOiBWZWN0b3IzO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIC8vIFdFJ0xMIE1BTkFHRSBUSEVTRSBGT1IgT1VSIFdlYkdMIFNIQURFUlNcclxuICAgICAgICB0aGlzLndlYkdMQXR0cmlidXRlTG9jYXRpb25zID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIHRoaXMud2ViR0xVbmlmb3JtTG9jYXRpb25zID0gbmV3IE1hcCgpO1xyXG5cclxuICAgICAgICAvLyBXRSdMTCBVU0UgVEhFU0UgRk9SIFRSQU5TTEFUSU5HLCBST1RBVElORywgQU5EIFNDQUxJTkcgVEhFIE1FU0hcclxuICAgICAgICB0aGlzLm1lc2hUcmFuc2Zvcm0gPSBuZXcgTWF0cml4KDQsIDQpO1xyXG4gICAgICAgIHRoaXMubWVzaFRyYW5zbGF0ZSA9IG5ldyBWZWN0b3IzKCk7XHJcbiAgICAgICAgdGhpcy5tZXNoUm90YXRlID0gbmV3IFZlY3RvcjMoKTtcclxuICAgICAgICB0aGlzLm1lc2hTY2FsZSA9IG5ldyBWZWN0b3IzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGluaXQod2ViR0w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCxcclxuICAgICAgICAgICAgICAgIHZlcnRleFNoYWRlclNvdXJjZTogc3RyaW5nLFxyXG4gICAgICAgICAgICAgICAgZnJhZ21lbnRTaGFkZXJTb3VyY2U6IHN0cmluZyxcclxuICAgICAgICAgICAgICAgIHJlbmRlclNldHVwRGF0YTogb2JqZWN0KTogdm9pZCB7XHJcbiAgICAgICAgLy8gRklSU1QgV0UgTkVFRCBUTyBNQUtFIFRIRSBTSEFERVJcclxuICAgICAgICB0aGlzLnNoYWRlciA9IG5ldyBXZWJHTEdhbWVTaGFkZXIoKTtcclxuICAgICAgICB0aGlzLnNoYWRlci5pbml0KHdlYkdMLCB2ZXJ0ZXhTaGFkZXJTb3VyY2UsIGZyYWdtZW50U2hhZGVyU291cmNlKTtcclxuXHJcbiAgICAgICAgLy8gQ1JFQVRFIFRIRSBCVUZGRVIgT04gVEhFIEdQVVxyXG4gICAgICAgIHRoaXMudmVydGV4RGF0YUJ1ZmZlciA9IHdlYkdMLmNyZWF0ZUJ1ZmZlcigpO1xyXG5cclxuICAgICAgICAvLyBCSU5EIFRIRSBCVUZGRVIgVE8gQkUgVkVSVEVYIERBVEFcclxuICAgICAgICB3ZWJHTC5iaW5kQnVmZmVyKHdlYkdMLkFSUkFZX0JVRkZFUiwgdGhpcy52ZXJ0ZXhEYXRhQnVmZmVyKTtcclxuXHJcbiAgICAgICAgLy8gTUFLRSBUSEUgTUVTSCBEQVRBIE9VUlNFTFZFUyBJTiBBIENISUxEIENMQVNTXHJcbiAgICAgICAgbGV0IG1lc2hWZXJ0ZXhEYXRhIDogRmxvYXQzMkFycmF5ID0gdGhpcy5nZXRWZXJ0ZXhEYXRhKHJlbmRlclNldHVwRGF0YSk7XHJcblxyXG4gICAgICAgIC8vIEFORCBTRU5EIFRIRSBEQVRBIFRPIFRIRSBCVUZGRVIgV0UgQ1JFQVRFRCBPTiBUSEUgR1BVXHJcbiAgICAgICAgd2ViR0wuYnVmZmVyRGF0YSh3ZWJHTC5BUlJBWV9CVUZGRVIsIG1lc2hWZXJ0ZXhEYXRhLCB3ZWJHTC5TVEFUSUNfRFJBVyk7XHJcblxyXG4gICAgICAgIC8vIFNFVFVQIFRIRSBTSEFERVIgQVRUUklCVVRFUyBBTkQgVU5JRk9STVNcclxuICAgICAgICB0aGlzLmxvYWRBdHRyaWJ1dGVMb2NhdGlvbnMod2ViR0wsIHRoaXMuZ2V0U2hhZGVyQXR0cmlidXRlTmFtZXMoKSk7XHJcbiAgICAgICAgdGhpcy5sb2FkVW5pZm9ybUxvY2F0aW9ucyh3ZWJHTCwgdGhpcy5nZXRTaGFkZXJVbmlmb3JtTmFtZXMoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFic3RyYWN0IGdldFZlcnRleERhdGEocmVuZGVyRGF0YSA6IG9iamVjdCkgOiBGbG9hdDMyQXJyYXk7XHJcbiAgICBwdWJsaWMgYWJzdHJhY3QgZ2V0U2hhZGVyQXR0cmlidXRlTmFtZXMoKTogc3RyaW5nW107XHJcbiAgICBwdWJsaWMgYWJzdHJhY3QgZ2V0U2hhZGVyVW5pZm9ybU5hbWVzKCk6IHN0cmluZ1tdO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhpcyBmdW5jdGlvbiBsb2FkcyBhbGwgdGhlIGF0dHJpYnV0ZSBkYXRhIHZhbHVlcyBzbyB0aGF0IHdlIGNhblxyXG4gICAgICogcmV0cmlldmUgdGhlbSBsYXRlciB3aGVuIGl0IGlzIHRpbWUgdG8gcmVuZGVyLiBOb3RlIHRoYXQgdGhpcyBmdW5jdGlvblxyXG4gICAgICogY2FuIG9ubHkgYmUgY2FsbGVkIGFmdGVyIHRoZSBzaGFkZXIgcHJvZ3JhbSBoYXMgYmVlbiBjcmVhdGVkLlxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgbG9hZEF0dHJpYnV0ZUxvY2F0aW9ucyh3ZWJHTDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LCBhdHRyaWJ1dGVMb2NhdGlvbk5hbWVzOiBBcnJheTxzdHJpbmc+KSB7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhdHRyaWJ1dGVMb2NhdGlvbk5hbWVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxldCBsb2NhdGlvbk5hbWU6IHN0cmluZyA9IGF0dHJpYnV0ZUxvY2F0aW9uTmFtZXNbaV07XHJcbiAgICAgICAgICAgIGxldCBsb2NhdGlvbjogR0x1aW50ID0gd2ViR0wuZ2V0QXR0cmliTG9jYXRpb24odGhpcy5zaGFkZXIuZ2V0UHJvZ3JhbSgpLCBsb2NhdGlvbk5hbWUpO1xyXG4gICAgICAgICAgICB0aGlzLndlYkdMQXR0cmlidXRlTG9jYXRpb25zLnNldChsb2NhdGlvbk5hbWUsIGxvY2F0aW9uKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGxvYWRzIGFsbCB0aGUgdW5pZm9ybSBkYXRhIHZhbHVlcyBzbyB0aGF0IHdlIGNhblxyXG4gICAgICogcmV0cmlldmUgdGhlbSBsYXRlciB3aGVuIGl0IGlzIHRpbWUgdG8gcmVuZGVyLiBOb3RlIHRoYXQgdGhpcyBmdW5jdGlvblxyXG4gICAgICogY2FuIG9ubHkgYmUgY2FsbGVkIGFmdGVyIHRoZSBzaGFkZXIgcHJvZ3JhbSBoYXMgYmVlbiBjcmVhdGVkLlxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgbG9hZFVuaWZvcm1Mb2NhdGlvbnMod2ViR0w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCwgdW5pZm9ybUxvY2F0aW9uTmFtZXM6IEFycmF5PHN0cmluZz4pIHtcclxuICAgICAgICBmb3IgKGxldCBpOiBudW1iZXIgPSAwOyBpIDwgdW5pZm9ybUxvY2F0aW9uTmFtZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgbGV0IGxvY2F0aW9uTmFtZTogc3RyaW5nID0gdW5pZm9ybUxvY2F0aW9uTmFtZXNbaV07XHJcbiAgICAgICAgICAgIGxldCBsb2NhdGlvbjogV2ViR0xVbmlmb3JtTG9jYXRpb24gPSB3ZWJHTC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5zaGFkZXIuZ2V0UHJvZ3JhbSgpLCBsb2NhdGlvbk5hbWUpO1xyXG4gICAgICAgICAgICB0aGlzLndlYkdMVW5pZm9ybUxvY2F0aW9ucy5zZXQobG9jYXRpb25OYW1lLCBsb2NhdGlvbik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwiLypcclxuICogVGhpcyBzZXJ2ZXMgYXMgdGhlIHN1YnN5c3RlbSB0aGF0IG1hbmFnZXMgYWxsIGdhbWUgcmVuZGVyaW5nLlxyXG4gKi9cclxuaW1wb3J0IHsgVGV4dFJlbmRlcmVyIH0gZnJvbSAnLi9UZXh0UmVuZGVyZXInXHJcbmltcG9ydCB7IFdlYkdMR2FtZVRpbGVkTGF5ZXJSZW5kZXJlciB9IGZyb20gJy4vV2ViR0xHYW1lVGlsZWRMYXllclJlbmRlcmVyJ1xyXG5pbXBvcnQgeyBXZWJHTEdhbWVTcHJpdGVSZW5kZXJlciB9IGZyb20gJy4vV2ViR0xHYW1lU3ByaXRlUmVuZGVyZXInXHJcbmltcG9ydCB7IFdlYkdMR2FtZVRleHR1cmUgfSBmcm9tICcuL1dlYkdMR2FtZVRleHR1cmUnO1xyXG5pbXBvcnQgeyBBbmltYXRlZFNwcml0ZSB9IGZyb20gJy4uL3NjZW5lL3Nwcml0ZS9BbmltYXRlZFNwcml0ZSdcclxuaW1wb3J0IHsgVGlsZWRMYXllciB9IGZyb20gJy4uL3NjZW5lL3RpbGVzL1RpbGVkTGF5ZXInXHJcbmltcG9ydCB7IFZpZXdwb3J0IH0gZnJvbSAnLi4vc2NlbmUvVmlld3BvcnQnXHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIFdlYkdMR2FtZVJlbmRlcmluZ1N5c3RlbSB7XHJcbiAgICBwcml2YXRlIHJlbmRlcmluZ0NhbnZhczogSFRNTENhbnZhc0VsZW1lbnQ7XHJcbiAgICBwcml2YXRlIHdlYkdMOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQ7XHJcbiAgICBwcml2YXRlIGNhbnZhc1dpZHRoOiBudW1iZXI7XHJcbiAgICBwcml2YXRlIGNhbnZhc0hlaWdodDogbnVtYmVyO1xyXG5cclxuICAgIC8vIE9VUiBHQU1FUyBSRU5ERVIgVEhSRUUgRElGRkVSRU5UIFRZUEVTIE9GIFRISU5HU1xyXG4gICAgcHJpdmF0ZSB0aWxlZExheWVyUmVuZGVyZXI6IFdlYkdMR2FtZVRpbGVkTGF5ZXJSZW5kZXJlcjtcclxuICAgIHByaXZhdGUgc3ByaXRlUmVuZGVyZXI6IFdlYkdMR2FtZVNwcml0ZVJlbmRlcmVyO1xyXG4gICAgcHJpdmF0ZSB0ZXh0UmVuZGVyZXI6IFRleHRSZW5kZXJlcjtcclxuXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoIHJlbmRlcmluZ0NhbnZhc0lkOiBzdHJpbmcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHRDYW52YXNJZDogc3RyaW5nKSB7XHJcbiAgICAgICAgLy8gRklSU1QgU0VUVVAgd2ViR0xcclxuICAgICAgICB0aGlzLnJlbmRlcmluZ0NhbnZhcyA9IDxIVE1MQ2FudmFzRWxlbWVudD5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChyZW5kZXJpbmdDYW52YXNJZCk7XHJcbiAgICAgICAgdGhpcy5yZW5kZXJpbmdDYW52YXMud2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcclxuICAgICAgICB0aGlzLnJlbmRlcmluZ0NhbnZhcy5oZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XHJcbiAgICAgICAgdGhpcy5jYW52YXNXaWR0aCA9IHRoaXMucmVuZGVyaW5nQ2FudmFzLndpZHRoO1xyXG4gICAgICAgIHRoaXMuY2FudmFzSGVpZ2h0ID0gdGhpcy5yZW5kZXJpbmdDYW52YXMuaGVpZ2h0O1xyXG4gICAgICAgIHRoaXMud2ViR0wgPSB0aGlzLnJlbmRlcmluZ0NhbnZhcy5nZXRDb250ZXh0KFwid2ViZ2xcIik7XHJcblxyXG4gICAgICAgIC8vIElGIFRIRSBVU0VSJ1MgTUFDSElORS9CUk9XU0VSIERPRVNOJ1QgU1VQUE9SVFxyXG4gICAgICAgIC8vIFdlYkdMIFRIRU4gVEhFUkUnUyBOTyBQT0lOVCBPRiBHT0lORyBPTlxyXG4gICAgICAgIGlmICghdGhpcy53ZWJHTCkge1xyXG4gICAgICAgICAgICAvLyBQUk9WSURFIFNPTUUgRkVFREJBQ0sgVEhBVCBXZWJHTCBXT04nVCBXT1JLIEJFQ0FVU0VcclxuICAgICAgICAgICAgLy8gVEhFIFVTRVInUycgR1JBUEhJQ1MgQ0FSRCBJUyBGT1IgVEhFIEJJUkRTXHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJXZWJHTCBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoaXMgZGV2aWNlXCIpO1xyXG5cclxuICAgICAgICAgICAgLy8gQU5EIEVORCBJTklUSUFMSVpBVElPTlxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBXZWJHTCBJUyBTVVBQT1JURUQsIFNPIElOSVQgRVZFUllUSElORyBUSEFUIFVTRVMgSVRcclxuXHJcbiAgICAgICAgLy8gTUFLRSBUSEUgQ0xFQVIgQ09MT1IgQkxBQ0tcclxuICAgICAgICB0aGlzLnNldENsZWFyQ29sb3IoMC4wLCAwLjAsIDAuMCwgMS4wKTtcclxuXHJcbiAgICAgICAgLy8gRU5BQkxFIERFUFRIIFRFU1RJTkdcclxuICAgICAgICB0aGlzLndlYkdMLmRpc2FibGUodGhpcy53ZWJHTC5ERVBUSF9URVNUKTtcclxuICAgICAgICB0aGlzLndlYkdMLmVuYWJsZSh0aGlzLndlYkdMLkJMRU5EKTtcclxuICAgICAgICB0aGlzLndlYkdMLmJsZW5kRnVuYyh0aGlzLndlYkdMLlNSQ19BTFBIQSwgdGhpcy53ZWJHTC5PTkVfTUlOVVNfU1JDX0FMUEhBKTtcclxuXHJcbiAgICAgICAgLy8gVFVSTiBPTiBCQUNLRkFDRSBDVUxMSU5HXHJcbiAgICAgICAgdGhpcy53ZWJHTC5lbmFibGUodGhpcy53ZWJHTC5DVUxMX0ZBQ0UpO1xyXG5cclxuICAgICAgICAvLyBUSElTIFNQRUNJRklFUyBUSEFUIFdFJ1JFIFVTSU5HIFRIRSBFTlRJUkUgQ0FOVkFTXHJcbiAgICAgICAgdGhpcy53ZWJHTC52aWV3cG9ydCgwLCAwLCB0aGlzLmNhbnZhc1dpZHRoLCB0aGlzLmNhbnZhc0hlaWdodCk7XHJcblxyXG4gICAgICAgIC8vIE1BS0UgVEhFIFRJTEVEIExBWUVSIFJFTkRFUkVSXHJcbiAgICAgICAgdGhpcy50aWxlZExheWVyUmVuZGVyZXIgPSBuZXcgV2ViR0xHYW1lVGlsZWRMYXllclJlbmRlcmVyKCk7XHJcblxyXG4gICAgICAgIC8vIE1BS0UgVEhFIFNQUklURSBSRU5ERVJFUlxyXG4gICAgICAgIHRoaXMuc3ByaXRlUmVuZGVyZXIgPSBuZXcgV2ViR0xHYW1lU3ByaXRlUmVuZGVyZXIoKTtcclxuXHJcbiAgICAgICAgLy8gVEhJUyBXSUxMIFNUT1JFIE9VUiBURVhUXHJcbiAgICAgICAgdGhpcy50ZXh0UmVuZGVyZXIgPSBuZXcgVGV4dFJlbmRlcmVyKHRleHRDYW52YXNJZCwgXCJzZXJpZlwiLCAxOCwgXCIjRkZGRjAwXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRUZXh0dXJlQ29uc3RhbnQoaWQ6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICAgICAgLy8gV0UgT05MWSBBTExPVyBGT1IgMTAgVEVYVFVSRVMgVE8gQkUgUFVUIE9OIFRIRSBHUFVcclxuICAgICAgICBzd2l0Y2ggKGlkKSB7XHJcbiAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIHRoaXMud2ViR0wuVEVYVFVSRTA7XHJcbiAgICAgICAgICAgIGNhc2UgMTogcmV0dXJuIHRoaXMud2ViR0wuVEVYVFVSRTE7XHJcbiAgICAgICAgICAgIGNhc2UgMjogcmV0dXJuIHRoaXMud2ViR0wuVEVYVFVSRTI7XHJcbiAgICAgICAgICAgIGNhc2UgMzogcmV0dXJuIHRoaXMud2ViR0wuVEVYVFVSRTM7XHJcbiAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIHRoaXMud2ViR0wuVEVYVFVSRTQ7XHJcbiAgICAgICAgICAgIGNhc2UgNTogcmV0dXJuIHRoaXMud2ViR0wuVEVYVFVSRTU7XHJcbiAgICAgICAgICAgIGNhc2UgNjogcmV0dXJuIHRoaXMud2ViR0wuVEVYVFVSRTY7XHJcbiAgICAgICAgICAgIGNhc2UgNzogcmV0dXJuIHRoaXMud2ViR0wuVEVYVFVSRTc7XHJcbiAgICAgICAgICAgIGNhc2UgODogcmV0dXJuIHRoaXMud2ViR0wuVEVYVFVSRTg7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6IHJldHVybiB0aGlzLndlYkdMLlRFWFRVUkU5O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0V2ViR0woKTogV2ViR0xSZW5kZXJpbmdDb250ZXh0IHtcclxuICAgICAgICByZXR1cm4gdGhpcy53ZWJHTDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0VGlsZWRMYXllclJlbmRlcmVyKCk6IFdlYkdMR2FtZVRpbGVkTGF5ZXJSZW5kZXJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudGlsZWRMYXllclJlbmRlcmVyO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRTcHJpdGVSZW5kZXJlcigpOiBXZWJHTEdhbWVTcHJpdGVSZW5kZXJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3ByaXRlUmVuZGVyZXI7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldFRleHRSZW5kZXJlcigpOiBUZXh0UmVuZGVyZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnRleHRSZW5kZXJlcjtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgaW5pdFdlYkdMVGV4dHVyZSh0ZXh0dXJlVG9Jbml0OiBXZWJHTEdhbWVUZXh0dXJlLCB0ZXh0dXJlSWQ6IG51bWJlciwgaW1hZ2U6IEhUTUxJbWFnZUVsZW1lbnQsIGNhbGxiYWNrOiBGdW5jdGlvbik6IHZvaWQge1xyXG4gICAgICAgIHRleHR1cmVUb0luaXQud2lkdGggPSBpbWFnZS53aWR0aDtcclxuICAgICAgICB0ZXh0dXJlVG9Jbml0LmhlaWdodCA9IGltYWdlLmhlaWdodDtcclxuXHJcbiAgICAgICAgLy8gQ1JFQVRFIEEgV2ViR0wgVEVYVFVSRSBPTiBUSEUgR1BVXHJcbiAgICAgICAgdGV4dHVyZVRvSW5pdC53ZWJHTFRleHR1cmUgPSB0aGlzLndlYkdMLmNyZWF0ZVRleHR1cmUoKTtcclxuICAgICAgICB0ZXh0dXJlVG9Jbml0LndlYkdMVGV4dHVyZUlkID0gdGV4dHVyZUlkO1xyXG5cclxuICAgICAgICAvLyBGTElQIFRIRSBJTUFHRSdTIHktQVhJU1xyXG4gICAgICAgIC8vd2ViR0wucGl4ZWxTdG9yZWkod2ViR0wuVU5QQUNLX0ZMSVBfWV9XRUJHTCwgMSk7XHJcblxyXG4gICAgICAgIC8vIEFDVElWQVRFIFRIRSBXZWJHTCBURVhUVVJFIE9OIFRIRSBHUFVcclxuICAgICAgICAvL2xldCB0ZXh0dXJlTnVtTmFtZSA6IHN0cmluZyA9IFwiVEVYVFVSRVwiICsgdGV4dHVyZUlkO1xyXG4gICAgICAgIGxldCB0ZXh0dXJlTmFtZUNvbnN0YW50OiBudW1iZXIgPSB0aGlzLmdldFRleHR1cmVDb25zdGFudCh0ZXh0dXJlSWQpO1xyXG4gICAgICAgIHRoaXMud2ViR0wuYWN0aXZlVGV4dHVyZSh0ZXh0dXJlTmFtZUNvbnN0YW50KTtcclxuXHJcbiAgICAgICAgLy8gQklORCBUSEUgVEVYVFVSRSBUTyBBIDJEIFRZUEVcclxuICAgICAgICB0aGlzLndlYkdMLmJpbmRUZXh0dXJlKHRoaXMud2ViR0wuVEVYVFVSRV8yRCwgdGV4dHVyZVRvSW5pdC53ZWJHTFRleHR1cmUpO1xyXG5cclxuICAgICAgICAvLyBTUEVDSUZZIFJFTkRFUklORyBTRVRUSU5HU1xyXG4gICAgICAgIHRoaXMud2ViR0wudGV4UGFyYW1ldGVyaSh0aGlzLndlYkdMLlRFWFRVUkVfMkQsIHRoaXMud2ViR0wuVEVYVFVSRV9NSU5fRklMVEVSLCB0aGlzLndlYkdMLkxJTkVBUik7XHJcblxyXG4gICAgICAgIC8vIFNFVCBUSEUgSU1BR0UgRk9SIFRIRSBURVhUVVJFXHJcbiAgICAgICAgdGhpcy53ZWJHTC50ZXhJbWFnZTJEKHRoaXMud2ViR0wuVEVYVFVSRV8yRCwgMCwgdGhpcy53ZWJHTC5SR0JBLCB0aGlzLndlYkdMLlJHQkEsIHRoaXMud2ViR0wuVU5TSUdORURfQllURSwgaW1hZ2UpO1xyXG5cclxuICAgICAgICAvLyBLRUVQIElUIEZPUiBXSEVOIFdFIFJFTkRFUlxyXG4gICAgICAgIGNhbGxiYWNrKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldENsZWFyQ29sb3IocjogbnVtYmVyLCBnOiBudW1iZXIsIGI6IG51bWJlciwgYTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy53ZWJHTC5jbGVhckNvbG9yKHIsIGcsIGIsIGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyByZW5kZXIoICB2aWV3cG9ydCA6IFZpZXdwb3J0LFxyXG4gICAgICAgICAgICAgICAgICAgIHRpbGVkTGF5ZXJzOiBBcnJheTxUaWxlZExheWVyPixcclxuICAgICAgICAgICAgICAgICAgICB2aXNpYmxlU3ByaXRlczogQXJyYXk8QW5pbWF0ZWRTcHJpdGU+KTogdm9pZCB7XHJcbiAgICAgICAgLy8gQ0xFQVIgVEhFIENBTlZBU1xyXG4gICAgICAgIHRoaXMud2ViR0wuY2xlYXIodGhpcy53ZWJHTC5DT0xPUl9CVUZGRVJfQklUIHwgdGhpcy53ZWJHTC5ERVBUSF9CVUZGRVJfQklUKTtcclxuXHJcbiAgICAgICAgLy8gUkVOREVSIFRIRSBUSUxFRCBMQVlFUiBGSVJTVFxyXG4gICAgICAgIHRoaXMudGlsZWRMYXllclJlbmRlcmVyLnJlbmRlcih0aGlzLndlYkdMLCB2aWV3cG9ydCwgdGlsZWRMYXllcnMpO1xyXG5cclxuICAgICAgICAvLyBSRU5ERVIgVEhFIFNQUklURVMgT04gT05FIENBTlZBU1xyXG4gICAgICAgIHRoaXMuc3ByaXRlUmVuZGVyZXIucmVuZGVyKHRoaXMud2ViR0wsIHZpZXdwb3J0LCB2aXNpYmxlU3ByaXRlcyk7XHJcblxyXG4gICAgICAgIC8vIFRIRU4gVEhFIFRFWFQgT04gQU5PVEhFUiBPVkVSTEFQUElORyBDQU5WQVNcclxuICAgICAgICB0aGlzLnRleHRSZW5kZXJlci5yZW5kZXIoKTtcclxuICAgIH1cclxufSIsIi8qXHJcbiAqIFRoaXMgaXMgYSB3cmFwcGVyIGNsYXNzIGZvciBhIFdlYkdMUHJvZ3JhbSwgaS5lLiBhIHNoYWRlciBmb3IgY3VzdG9tIHJlbmRlcmluZ1xyXG4gKiB1c2luZyBXZWJHTCdzIHByb2dyYW1tYWJsZSBwaXBlbGluZS5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBXZWJHTEdhbWVTaGFkZXIge1xyXG4gICAgcHJpdmF0ZSBwcm9ncmFtIDogV2ViR0xQcm9ncmFtO1xyXG4gICAgcHJpdmF0ZSB2ZXJ0ZXhTaGFkZXIgOiBXZWJHTFNoYWRlcjtcclxuICAgIHByaXZhdGUgZnJhZ21lbnRTaGFkZXIgOiBXZWJHTFNoYWRlcjtcclxuXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoKSB7fVxyXG5cclxuICAgIHB1YmxpYyBnZXRQcm9ncmFtKCkgOiBXZWJHTFByb2dyYW0ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnByb2dyYW07XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGluaXQod2ViR0wgOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsIHZTb3VyY2UgOiBzdHJpbmcsIGZTb3VyY2UgOiBzdHJpbmcpIDogdm9pZCB7XHJcbiAgICAgICAgdGhpcy52ZXJ0ZXhTaGFkZXIgPSA8V2ViR0xTaGFkZXI+dGhpcy5jcmVhdGVTaGFkZXIod2ViR0wsIHdlYkdMLlZFUlRFWF9TSEFERVIsIHZTb3VyY2UpO1xyXG4gICAgICAgIHRoaXMuZnJhZ21lbnRTaGFkZXIgPSA8V2ViR0xTaGFkZXI+dGhpcy5jcmVhdGVTaGFkZXIod2ViR0wsIHdlYkdMLkZSQUdNRU5UX1NIQURFUiwgZlNvdXJjZSk7XHJcbiAgICAgICAgdGhpcy5wcm9ncmFtID0gdGhpcy5jcmVhdGVTaGFkZXJQcm9ncmFtKHdlYkdMLCB0aGlzLnZlcnRleFNoYWRlciwgdGhpcy5mcmFnbWVudFNoYWRlcik7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNyZWF0ZVNoYWRlcih3ZWJHTCA6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCwgdHlwZSA6IG51bWJlciwgc291cmNlIDogc3RyaW5nKSA6IFdlYkdMU2hhZGVyIHtcclxuICAgICAgICAvLyBNQUtFIEEgTkVXIFNIQURFUiBPQkpFQ1QsIExPQUQgSVQnUyBTT1VSQ0UsIEFORCBDT01QSUxFIElUXHJcbiAgICAgICAgdmFyIHNoYWRlciA9IHdlYkdMLmNyZWF0ZVNoYWRlcih0eXBlKTtcclxuICAgICAgICB3ZWJHTC5zaGFkZXJTb3VyY2Uoc2hhZGVyLCBzb3VyY2UpO1xyXG4gICAgICAgIHdlYkdMLmNvbXBpbGVTaGFkZXIoc2hhZGVyKTtcclxuXHJcbiAgICAgICAgLy8gRElEIElUIENPTVBJTEU/XHJcbiAgICAgICAgdmFyIHN1Y2Nlc3MgPSB3ZWJHTC5nZXRTaGFkZXJQYXJhbWV0ZXIoc2hhZGVyLCB3ZWJHTC5DT01QSUxFX1NUQVRVUyk7XHJcbiAgICAgICAgaWYgKHN1Y2Nlc3MpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHNoYWRlcjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIERJU0FTVEVSXHJcbiAgICAgICAgY29uc29sZS5sb2cod2ViR0wuZ2V0U2hhZGVySW5mb0xvZyhzaGFkZXIpKTtcclxuICAgICAgICB3ZWJHTC5kZWxldGVTaGFkZXIoc2hhZGVyKTtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY3JlYXRlU2hhZGVyUHJvZ3JhbSh3ZWJHTCA6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCwgdlNoYWRlciA6IFdlYkdMU2hhZGVyLCBmU2hhZGVyIDogV2ViR0xTaGFkZXIpIDogV2ViR0xQcm9ncmFtIHtcclxuICAgICAgICAvLyBNQUtFIFRIRSBHTFNMIFNIQURFUiBQUk9HUkFNXHJcbiAgICAgICAgbGV0IHByb2dyYW1Ub0NyZWF0ZSA9IHdlYkdMLmNyZWF0ZVByb2dyYW0oKTtcclxuXHJcbiAgICAgICAgLy8gTElOSyBUSEUgVkVSVCBBTkQgRlJBR1xyXG4gICAgICAgIHdlYkdMLmF0dGFjaFNoYWRlcihwcm9ncmFtVG9DcmVhdGUsIHZTaGFkZXIpO1xyXG4gICAgICAgIHdlYkdMLmF0dGFjaFNoYWRlcihwcm9ncmFtVG9DcmVhdGUsIGZTaGFkZXIpO1xyXG5cclxuICAgICAgICAvLyBOT1cgV0UgQ0FOIExJTksgVEhFIFNIQURFUiBQUk9HUkFNXHJcbiAgICAgICAgd2ViR0wubGlua1Byb2dyYW0ocHJvZ3JhbVRvQ3JlYXRlKTtcclxuICAgICAgICBsZXQgbGlua2VkIDogYm9vbGVhbiA9IHdlYkdMLmdldFByb2dyYW1QYXJhbWV0ZXIocHJvZ3JhbVRvQ3JlYXRlLCB3ZWJHTC5MSU5LX1NUQVRVUyk7XHJcblxyXG4gICAgICAgIC8vIElTIElUIExJTktFRD9cclxuICAgICAgICBpZiAoIWxpbmtlZCkge1xyXG4gICAgICAgICAgICAvLyBESVNBU1RFUlxyXG4gICAgICAgICAgICBsZXQgZXJyb3JGZWVkYmFjayA6IHN0cmluZyA9IHdlYkdMLmdldFByb2dyYW1JbmZvTG9nKHByb2dyYW1Ub0NyZWF0ZSk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yRmVlZGJhY2spO1xyXG5cclxuICAgICAgICAgICAgLy8gRElTQVNURVJcclxuICAgICAgICAgICAgY29uc29sZS5sb2cod2ViR0wuZ2V0UHJvZ3JhbUluZm9Mb2cocHJvZ3JhbVRvQ3JlYXRlKSk7XHJcbiAgICAgICAgICAgIHdlYkdMLmRlbGV0ZVByb2dyYW0ocHJvZ3JhbVRvQ3JlYXRlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHByb2dyYW1Ub0NyZWF0ZTtcclxuICAgIH1cclxufSIsImltcG9ydCB7V2ViR0xHYW1lUmVuZGVyaW5nQ29tcG9uZW50fSBmcm9tICcuL1dlYkdMR2FtZVJlbmRlcmluZ0NvbXBvbmVudCdcclxuaW1wb3J0IHtNYXRoVXRpbGl0aWVzfSBmcm9tICcuLi9tYXRoL01hdGhVdGlsaXRpZXMnXHJcbmltcG9ydCB7QW5pbWF0ZWRTcHJpdGV9IGZyb20gJy4uL3NjZW5lL3Nwcml0ZS9BbmltYXRlZFNwcml0ZSdcclxuaW1wb3J0IHtBbmltYXRlZFNwcml0ZVR5cGV9IGZyb20gJy4uL3NjZW5lL3Nwcml0ZS9BbmltYXRlZFNwcml0ZVR5cGUnXHJcbmltcG9ydCB7V2ViR0xHYW1lVGV4dHVyZX0gZnJvbSAnLi9XZWJHTEdhbWVUZXh0dXJlJ1xyXG5pbXBvcnQge1ZpZXdwb3J0fSBmcm9tICcuLi9zY2VuZS9WaWV3cG9ydCdcclxuXHJcbmV4cG9ydCBjbGFzcyBXZWJHTEdhbWVTcHJpdGVSZW5kZXJlciBleHRlbmRzIFdlYkdMR2FtZVJlbmRlcmluZ0NvbXBvbmVudCB7XHJcblxyXG4gICAgcHJpdmF0ZSByb3RhdGlvbiA6IEFycmF5PG51bWJlcj4gPSBbMC4wLCAwLjAsIDAuMCwgMS4wLCAxLjAsIDAuMCwgMS4wLCAxLjBdO1xyXG4gICAgcHJpdmF0ZSBzcHJpdGVSb3RhdGlvbiA6IG51bWJlcjsgXHJcblxyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldFZlcnRleERhdGEoKSA6IEZsb2F0MzJBcnJheSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBGbG9hdDMyQXJyYXkoW1xyXG4gICAgICAgICAgICAtMC41LCAgMC41LCB0aGlzLnJvdGF0aW9uWzBdLCB0aGlzLnJvdGF0aW9uWzFdLFxyXG4gICAgICAgICAgICAtMC41LCAtMC41LCB0aGlzLnJvdGF0aW9uWzJdLCB0aGlzLnJvdGF0aW9uWzNdLFxyXG4gICAgICAgICAgICAgMC41LCAgMC41LCB0aGlzLnJvdGF0aW9uWzRdLCB0aGlzLnJvdGF0aW9uWzVdLFxyXG4gICAgICAgICAgICAgMC41LCAtMC41LCB0aGlzLnJvdGF0aW9uWzZdLCB0aGlzLnJvdGF0aW9uWzddXHJcbiAgICAgICAgXSk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgZ2V0U2hhZGVyQXR0cmlidXRlTmFtZXMoKSA6IHN0cmluZ1tdIHtcclxuICAgICAgICByZXR1cm4gW3RoaXMuQV9QT1NJVElPTiwgdGhpcy5BX1RFWF9DT09SRF07XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgZ2V0U2hhZGVyVW5pZm9ybU5hbWVzKCkgOiBzdHJpbmdbXSB7XHJcbiAgICAgICAgcmV0dXJuIFt0aGlzLlVfTUVTSF9UUkFOU0ZPUk0sIHRoaXMuVV9TQU1QTEVSLCB0aGlzLlVfVEVYX0NPT1JEX0ZBQ1RPUiwgdGhpcy5VX1RFWF9DT09SRF9TSElGVF07XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHJlbmRlciggIHdlYkdMIDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LFxyXG4gICAgICAgICAgICAgICAgICAgIHZpZXdwb3J0IDogVmlld3BvcnQsXHJcbiAgICAgICAgICAgICAgICAgICAgdmlzaWJsZVNwcml0ZXMgOiBBcnJheTxBbmltYXRlZFNwcml0ZT4pIDogdm9pZCB7XHJcbiAgICAgICAgLy8gU0VMRUNUIFRIRSBBTklNQVRFRCBTUFJJVEUgUkVOREVSSU5HIFNIQURFUiBQUk9HUkFNIEZPUiBVU0VcclxuICAgICAgICBsZXQgc2hhZGVyUHJvZ3JhbVRvVXNlID0gdGhpcy5zaGFkZXIuZ2V0UHJvZ3JhbSgpO1xyXG4gICAgICAgIHdlYkdMLnVzZVByb2dyYW0oc2hhZGVyUHJvZ3JhbVRvVXNlKTtcclxuXHJcbiAgICAgICAvLyBBTkQgVEhFTiBSRU5ERVIgRUFDSCBPTkVcclxuICAgICAgIGZvciAobGV0IHNwcml0ZSBvZiB2aXNpYmxlU3ByaXRlcykge1xyXG4gICAgICAgICAgICB0aGlzLnJlbmRlckFuaW1hdGVkU3ByaXRlKHdlYkdMLCB2aWV3cG9ydCwgc3ByaXRlKTsgICAgICAgIFxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHJlbmRlckFuaW1hdGVkU3ByaXRlKCAgIHdlYkdMIDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWV3cG9ydCA6IFZpZXdwb3J0LCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ByaXRlIDogQW5pbWF0ZWRTcHJpdGUpIDogdm9pZCB7XHJcbiAgICAgICAgLy8gWU9VJ0xMIE5FRUQgVE8gVVBEQVRFIFRISVMgTUVUSE9EIFRPIE1BS0UgU1VSRSBTUFJJVEVTIFNDUk9MTCBBTkQgUk9UQVRFXHJcbiAgICAgICAgXHJcbiAgICAgICAgbGV0IGNhbnZhc1dpZHRoIDogbnVtYmVyID0gd2ViR0wuY2FudmFzLndpZHRoO1xyXG4gICAgICAgIGxldCBjYW52YXNIZWlnaHQgOiBudW1iZXIgPSB3ZWJHTC5jYW52YXMuaGVpZ2h0O1xyXG4gICAgICAgIGxldCBzcHJpdGVUeXBlIDogQW5pbWF0ZWRTcHJpdGVUeXBlID0gc3ByaXRlLmdldFNwcml0ZVR5cGUoKTtcclxuICAgICAgICBsZXQgdGV4dHVyZSA6IFdlYkdMR2FtZVRleHR1cmUgPSBzcHJpdGVUeXBlLmdldFNwcml0ZVNoZWV0VGV4dHVyZSgpO1xyXG5cclxuICAgICAgICAvLyBSb3RhdGlvblxyXG4gICAgICAgIHRoaXMuc3ByaXRlUm90YXRpb24gPSBzcHJpdGUuZ2V0RGlyZWN0aW9uKCk7XHJcbiAgICAgICAgaWYodGhpcy5zcHJpdGVSb3RhdGlvbiA9PSAxKSB7XHJcbiAgICAgICAgICAgIHRoaXMucm90YXRpb24gPSBbMC4wLCAwLjAsIDAuMCwgMS4wLCAxLjAsIDAuMCwgMS4wLCAxLjBdO1xyXG4gICAgICAgIH0gZWxzZSBpZih0aGlzLnNwcml0ZVJvdGF0aW9uID09IDIpIHtcclxuICAgICAgICAgICAgdGhpcy5yb3RhdGlvbiA9IFswLjAsIDEuMCwgMS4wLCAxLjAsIDAuMCwgMC4wLCAxLjAsIDAuMF07XHJcbiAgICAgICAgfSBlbHNlIGlmKHRoaXMuc3ByaXRlUm90YXRpb24gPT0gMykge1xyXG4gICAgICAgICAgICB0aGlzLnJvdGF0aW9uID0gWzAuMCwgMS4wLCAwLjAsIDAuMCwgMS4wLCAxLjAsIDEuMCwgMC4wXTtcclxuICAgICAgICB9IGVsc2UgaWYodGhpcy5zcHJpdGVSb3RhdGlvbiA9PSA0KSB7XHJcbiAgICAgICAgICAgIHRoaXMucm90YXRpb24gPSBbMS4wLCAwLjAsIDAuMCwgMC4wLCAxLjAsIDEuMCwgMC4wLCAxLjBdO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMucm90YXRpb24gPSBbMC4wLCAwLjAsIDAuMCwgMS4wLCAxLjAsIDAuMCwgMS4wLCAxLjBdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQ0FMQ1VMQVRFIEhPVyBNVUNIIFRPIFRSQU5TTEFURSBUSEUgUVVBRCBQRVIgVEhFIFNQUklURSBQT1NJVElPTlxyXG4gICAgICAgIGxldCBzcHJpdGVXaWR0aCA6IG51bWJlciA9IHNwcml0ZVR5cGUuZ2V0U3ByaXRlV2lkdGgoKTtcclxuICAgICAgICBsZXQgc3ByaXRlSGVpZ2h0IDogbnVtYmVyID0gc3ByaXRlVHlwZS5nZXRTcHJpdGVIZWlnaHQoKTtcclxuICAgICAgICBsZXQgc3ByaXRlWEluUGl4ZWxzIDogbnVtYmVyID0gc3ByaXRlLmdldFBvc2l0aW9uKCkuZ2V0WCgpICsgKHNwcml0ZVdpZHRoLzIpIC0gdmlld3BvcnQuZ2V0WCgpO1xyXG4gICAgICAgIGxldCBzcHJpdGVZSW5QaXhlbHMgOiBudW1iZXIgPSBzcHJpdGUuZ2V0UG9zaXRpb24oKS5nZXRZKCkgKyAoc3ByaXRlSGVpZ2h0LzIpIC0gdmlld3BvcnQuZ2V0WSgpO1xyXG4gICAgICAgIGxldCBzcHJpdGVYVHJhbnNsYXRlIDogbnVtYmVyID0gKHNwcml0ZVhJblBpeGVscyAtIChjYW52YXNXaWR0aC8yKSkvKGNhbnZhc1dpZHRoLzIpO1xyXG4gICAgICAgIGxldCBzcHJpdGVZVHJhbnNsYXRlIDogbnVtYmVyID0gKHNwcml0ZVlJblBpeGVscyAtIChjYW52YXNIZWlnaHQvMikpLyhjYW52YXNIZWlnaHQvMik7XHJcbiAgICAgICAgdGhpcy5tZXNoVHJhbnNsYXRlLnNldFgoc3ByaXRlWFRyYW5zbGF0ZSk7XHJcbiAgICAgICAgdGhpcy5tZXNoVHJhbnNsYXRlLnNldFkoLXNwcml0ZVlUcmFuc2xhdGUpO1xyXG5cclxuICAgICAgICAvLyBDQUxDVUxBVEUgSE9XIE1VQ0ggVE8gU0NBTEUgVEhFIFFVQUQgUEVSIFRIRSBTUFJJVEUgU0laRVxyXG4gICAgICAgIGxldCBkZWZhdWx0V2lkdGggOiBudW1iZXIgPSBjYW52YXNXaWR0aDtcclxuICAgICAgICBsZXQgZGVmYXVsdEhlaWdodCA6IG51bWJlciA9IGNhbnZhc0hlaWdodDtcclxuICAgICAgICBsZXQgc2NhbGVYIDogbnVtYmVyID0gMipzcHJpdGVXaWR0aC9kZWZhdWx0V2lkdGg7XHJcbiAgICAgICAgbGV0IHNjYWxlWSA6IG51bWJlciA9IDIqc3ByaXRlSGVpZ2h0L2RlZmF1bHRIZWlnaHQ7XHJcbiAgICAgICAgdGhpcy5tZXNoU2NhbGUuc2V0KHNjYWxlWCwgc2NhbGVZLCAwLjAsIDAuMCk7Ly8xLjAsIDEuMCk7XHJcblxyXG4gICAgICAgIC8vIEB0b2RvIC0gQ09NQklORSBUSElTIFdJVEggVEhFIFJPVEFURSBBTkQgU0NBTEUgVkFMVUVTIEZST00gVEhFIFNQUklURVxyXG4gICAgICAgIE1hdGhVdGlsaXRpZXMuaWRlbnRpdHkodGhpcy5tZXNoVHJhbnNmb3JtKTtcclxuICAgICAgICBNYXRoVXRpbGl0aWVzLm1vZGVsKHRoaXMubWVzaFRyYW5zZm9ybSwgdGhpcy5tZXNoVHJhbnNsYXRlLCB0aGlzLm1lc2hSb3RhdGUsIHRoaXMubWVzaFNjYWxlKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBGSUdVUkUgT1VUIFRIRSBURVhUVVJFIENPT1JESU5BVEUgRkFDVE9SIEFORCBTSElGVFxyXG4gICAgICAgIGxldCB0ZXhDb29yZEZhY3RvclggOiBudW1iZXIgPSBzcHJpdGVXaWR0aC90ZXh0dXJlLndpZHRoO1xyXG4gICAgICAgIGxldCB0ZXhDb29yZEZhY3RvclkgOiBudW1iZXIgPSBzcHJpdGVIZWlnaHQvdGV4dHVyZS5oZWlnaHQ7XHJcbiAgICAgICAgbGV0IHNwcml0ZUxlZnQgOiBudW1iZXIgPSBzcHJpdGUuZ2V0TGVmdCgpO1xyXG4gICAgICAgIGxldCBzcHJpdGVUb3AgOiBudW1iZXIgPSBzcHJpdGUuZ2V0VG9wKCk7XHJcbiAgICAgICAgbGV0IHRleENvb3JkU2hpZnRYIDogbnVtYmVyID0gc3ByaXRlTGVmdC90ZXh0dXJlLndpZHRoO1xyXG4gICAgICAgIGxldCB0ZXhDb29yZFNoaWZ0WSA6IG51bWJlciA9IHNwcml0ZVRvcC90ZXh0dXJlLmhlaWdodDtcclxuXHJcbiAgICAgICAgLy8gVVNFIFRIRSBBVFRSSUJVVEVTXHJcbiAgICAgICAgd2ViR0wuYmluZEJ1ZmZlcih3ZWJHTC5BUlJBWV9CVUZGRVIsIHRoaXMudmVydGV4RGF0YUJ1ZmZlcik7XHJcbiAgICAgICAgd2ViR0wuYmluZFRleHR1cmUod2ViR0wuVEVYVFVSRV8yRCwgdGV4dHVyZS53ZWJHTFRleHR1cmUpO1xyXG5cclxuICAgICAgICAvLyBIT09LIFVQIFRIRSBBVFRSSUJVVEVTXHJcbiAgICAgICAgbGV0IGFfUG9zaXRpb25Mb2NhdGlvbiA6IEdMdWludCA9IHRoaXMud2ViR0xBdHRyaWJ1dGVMb2NhdGlvbnMuZ2V0KHRoaXMuQV9QT1NJVElPTik7XHJcbiAgICAgICAgd2ViR0wudmVydGV4QXR0cmliUG9pbnRlcihhX1Bvc2l0aW9uTG9jYXRpb24sIHRoaXMuRkxPQVRTX1BFUl9URVhUVVJFX0NPT1JESU5BVEUsIHdlYkdMLkZMT0FULCBmYWxzZSwgdGhpcy5UT1RBTF9CWVRFUywgdGhpcy5WRVJURVhfUE9TSVRJT05fT0ZGU0VUKTtcclxuICAgICAgICB3ZWJHTC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShhX1Bvc2l0aW9uTG9jYXRpb24pO1xyXG4gICAgICAgIGxldCBhX1RleENvb3JkTG9jYXRpb24gOiBHTHVpbnQgPSB0aGlzLndlYkdMQXR0cmlidXRlTG9jYXRpb25zLmdldCh0aGlzLkFfVEVYX0NPT1JEKTtcclxuICAgICAgICB3ZWJHTC52ZXJ0ZXhBdHRyaWJQb2ludGVyKGFfVGV4Q29vcmRMb2NhdGlvbiwgdGhpcy5GTE9BVFNfUEVSX1RFWFRVUkVfQ09PUkRJTkFURSwgd2ViR0wuRkxPQVQsIGZhbHNlLCB0aGlzLlRPVEFMX0JZVEVTLCB0aGlzLlRFWFRVUkVfQ09PUkRJTkFURV9PRkZTRVQpO1xyXG4gICAgICAgIHdlYkdMLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KGFfVGV4Q29vcmRMb2NhdGlvbik7XHJcblxyXG4gICAgICAgIC8vIFVTRSBUSEUgVU5JRk9STVNcclxuICAgICAgICBsZXQgdV9NZXNoVHJhbnNmb3JtTG9jYXRpb24gOiBXZWJHTFVuaWZvcm1Mb2NhdGlvbiA9IHRoaXMud2ViR0xVbmlmb3JtTG9jYXRpb25zLmdldCh0aGlzLlVfTUVTSF9UUkFOU0ZPUk0pO1xyXG4gICAgICAgIHdlYkdMLnVuaWZvcm1NYXRyaXg0ZnYodV9NZXNoVHJhbnNmb3JtTG9jYXRpb24sIGZhbHNlLCB0aGlzLm1lc2hUcmFuc2Zvcm0uZ2V0RGF0YSgpKTtcclxuICAgICAgICBsZXQgdV9TYW1wbGVyTG9jYXRpb24gOiBXZWJHTFVuaWZvcm1Mb2NhdGlvbiA9IHRoaXMud2ViR0xVbmlmb3JtTG9jYXRpb25zLmdldCh0aGlzLlVfU0FNUExFUik7XHJcbiAgICAgICAgd2ViR0wudW5pZm9ybTFpKHVfU2FtcGxlckxvY2F0aW9uLCB0ZXh0dXJlLndlYkdMVGV4dHVyZUlkKTtcclxuICAgICAgICBsZXQgdV9UZXhDb29yZEZhY3RvckxvY2F0aW9uIDogV2ViR0xVbmlmb3JtTG9jYXRpb24gPSB0aGlzLndlYkdMVW5pZm9ybUxvY2F0aW9ucy5nZXQodGhpcy5VX1RFWF9DT09SRF9GQUNUT1IpO1xyXG4gICAgICAgIHdlYkdMLnVuaWZvcm0yZih1X1RleENvb3JkRmFjdG9yTG9jYXRpb24sIHRleENvb3JkRmFjdG9yWCwgdGV4Q29vcmRGYWN0b3JZKTtcclxuICAgICAgICBsZXQgdV9UZXhDb29yZFNoaWZ0TG9jYXRpb24gOiBXZWJHTFVuaWZvcm1Mb2NhdGlvbiA9IHRoaXMud2ViR0xVbmlmb3JtTG9jYXRpb25zLmdldCh0aGlzLlVfVEVYX0NPT1JEX1NISUZUKTtcclxuICAgICAgICB3ZWJHTC51bmlmb3JtMmYodV9UZXhDb29yZFNoaWZ0TG9jYXRpb24sIHRleENvb3JkU2hpZnRYLCB0ZXhDb29yZFNoaWZ0WSk7XHJcblxyXG4gICAgICAgIC8vIERSQVcgVEhFIFNQUklURSBBUyBBIFRSSUFOR0xFIFNUUklQIFVTSU5HIDQgVkVSVElDRVMsIFNUQVJUSU5HIEFUIFRIRSBTVEFSVCBPRiBUSEUgQVJSQVkgKGluZGV4IDApXHJcbiAgICAgICAgd2ViR0wuZHJhd0FycmF5cyh3ZWJHTC5UUklBTkdMRV9TVFJJUCwgdGhpcy5JTkRFWF9PRl9GSVJTVF9WRVJURVgsIHRoaXMuTlVNX1ZFUlRJQ0VTKTtcclxuICAgIH1cclxufSIsImV4cG9ydCBjbGFzcyBXZWJHTEdhbWVUZXh0dXJlIHtcclxuICAgIHB1YmxpYyB3ZWJHTFRleHR1cmVJZDogbnVtYmVyO1xyXG4gICAgcHVibGljIHdlYkdMVGV4dHVyZTogV2ViR0xUZXh0dXJlO1xyXG4gICAgcHVibGljIGltYWdlOiBIVE1MSW1hZ2VFbGVtZW50O1xyXG4gICAgcHVibGljIHdpZHRoIDogbnVtYmVyO1xyXG4gICAgcHVibGljIGhlaWdodCA6IG51bWJlcjtcclxufSIsImltcG9ydCB7IE1hdGhVdGlsaXRpZXMgfSBmcm9tIFwiLi4vbWF0aC9NYXRoVXRpbGl0aWVzXCJcclxuaW1wb3J0IHsgVGlsZWRMYXllciB9IGZyb20gXCIuLi9zY2VuZS90aWxlcy9UaWxlZExheWVyXCJcclxuaW1wb3J0IHsgVGlsZVNldCB9IGZyb20gXCIuLi9zY2VuZS90aWxlcy9UaWxlU2V0XCJcclxuaW1wb3J0IHsgV2ViR0xHYW1lUmVuZGVyaW5nQ29tcG9uZW50IH0gZnJvbSAnLi9XZWJHTEdhbWVSZW5kZXJpbmdDb21wb25lbnQnXHJcbmltcG9ydCB7IFdlYkdMR2FtZVRleHR1cmUgfSBmcm9tICcuL1dlYkdMR2FtZVRleHR1cmUnXHJcbmltcG9ydCB7IFZpZXdwb3J0IH0gZnJvbSAnLi4vc2NlbmUvVmlld3BvcnQnXHJcblxyXG5leHBvcnQgY2xhc3MgV2ViR0xHYW1lVGlsZWRMYXllclJlbmRlcmVyIGV4dGVuZHMgV2ViR0xHYW1lUmVuZGVyaW5nQ29tcG9uZW50IHtcclxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhpcyBmdW5jdGlvbiBnZW5lcmF0ZXMgdGhlIGFycmF5IG9mIGF0dHJpYnV0ZSBkYXRhIG5lZWRlZCB0byBcclxuICAgICAqIHJlbmRlciBvdXIgVGlsZWRMYXllciBhbmQgcHV0cyBpdCBpbiB0aGUgdGlsZWQgbGF5ZXIgYXJndW1lbnQuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZW5lcmF0ZVZlcnRleERhdGEodGlsZWRMYXllcjogVGlsZWRMYXllcik6IEZsb2F0MzJBcnJheSB7XHJcbiAgICAgICAgbGV0IHNvbWVOdW1iZXJZb3VIYXZlVG9EZXRlcm1pbmUgOiBudW1iZXIgPSA0O1xyXG4gICAgICAgIGxldCBkYXRhVG9GaWxsID0gW3NvbWVOdW1iZXJZb3VIYXZlVG9EZXRlcm1pbmVdO1xyXG4gICAgICAgIGxldCB2ZXJ0ZXhEYXRhOiBGbG9hdDMyQXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KGRhdGFUb0ZpbGwpO1xyXG4gICAgICAgIHJldHVybiB2ZXJ0ZXhEYXRhO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRWZXJ0ZXhEYXRhKHJlbmRlclNldHVwRGF0YTogb2JqZWN0KTogRmxvYXQzMkFycmF5IHtcclxuICAgICAgICAvLyBXRSBXSUxMIE5FRUQgVEhJUyBUTyBLTk9XIEhPVyBMQVJHRSBUTyBNQUtFIE9VUiBWRVJURVggREFUQSBCVUZGRVJcclxuICAgICAgICBsZXQgdGlsZWRMYXllcnM6IEFycmF5PFRpbGVkTGF5ZXI+ID0gPEFycmF5PFRpbGVkTGF5ZXI+PnJlbmRlclNldHVwRGF0YTtcclxuICAgICAgICBsZXQgdGlsZWRMYXllcjogVGlsZWRMYXllciA9IHRpbGVkTGF5ZXJzWzBdO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdlbmVyYXRlVmVydGV4RGF0YSh0aWxlZExheWVyKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0U2hhZGVyQXR0cmlidXRlTmFtZXMoKTogc3RyaW5nW10ge1xyXG4gICAgICAgIC8vIFlPVSdMTCBORUVEIFRPIERFRklORSBUSElTIE1FVEhPRFxyXG4gICAgICAgIHJldHVybiBbXTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0U2hhZGVyVW5pZm9ybU5hbWVzKCk6IHN0cmluZ1tdIHtcclxuICAgICAgICAvLyBZT1UnTEwgTkVFRCBUTyBERUZJTkUgVEhJUyBNRVRIT0RcclxuICAgICAgICByZXR1cm4gW107XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHJlbmRlciggIHdlYkdMOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsXHJcbiAgICAgICAgICAgICAgICAgICAgdmlld3BvcnQgOiBWaWV3cG9ydCxcclxuICAgICAgICAgICAgICAgICAgICB0aWxlZExheWVyczogQXJyYXk8VGlsZWRMYXllcj4pOiB2b2lkIHtcclxuXHJcbiAgICAgICAgICAgIC8vIFNFTEVDVCBUSEUgQU5JTUFURUQgU1BSSVRFIFJFTkRFUklORyBTSEFERVIgUFJPR1JBTSBGT1IgVVNFXHJcbiAgICAgICAgbGV0IHNoYWRlclByb2dyYW1Ub1VzZSA9IHRoaXMuc2hhZGVyLmdldFByb2dyYW0oKTtcclxuICAgICAgICB3ZWJHTC51c2VQcm9ncmFtKHNoYWRlclByb2dyYW1Ub1VzZSk7XHJcblxyXG4gICAgICAgIC8vIEFORCBUSEVOIFJFTkRFUiBFQUNIIExBWUVSXHJcbiAgICAgICAgZm9yIChsZXQgdGlsZWRMYXllciBvZiB0aWxlZExheWVycykge1xyXG4gICAgICAgICAgICB0aGlzLnJlbmRlclRpbGVkTGF5ZXIod2ViR0wsIHZpZXdwb3J0LCB0aWxlZExheWVyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSByZW5kZXJUaWxlZExheWVyKFxyXG4gICAgICAgIHdlYkdMOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsXHJcbiAgICAgICAgdmlld3BvcnQgOiBWaWV3cG9ydCxcclxuICAgICAgICB0aWxlZExheWVyOiBUaWxlZExheWVyKSB7XHJcbiAgICAgICAgICAgIC8vIFlPVSdMTCBORUVEIFRPIERFRklORSBUSElTIE1FVEhPRFxyXG4gICAgfVxyXG59IiwiaW1wb3J0IHtTY2VuZU9iamVjdH0gZnJvbSAnLi9TY2VuZU9iamVjdCdcclxuaW1wb3J0IHtBbmltYXRlZFNwcml0ZX0gZnJvbSAnLi9zcHJpdGUvQW5pbWF0ZWRTcHJpdGUnXHJcbmltcG9ydCB7VGlsZWRMYXllcn0gZnJvbSAnLi90aWxlcy9UaWxlZExheWVyJ1xyXG5pbXBvcnQge1RpbGVTZXR9IGZyb20gJy4vdGlsZXMvVGlsZVNldCdcclxuaW1wb3J0IHtWaWV3cG9ydH0gZnJvbSAnLi9WaWV3cG9ydCc7XHJcblxyXG5leHBvcnQgY2xhc3MgU2NlbmVHcmFwaCB7XHJcbiAgICAvLyBBTkQgQUxMIE9GIFRIRSBBTklNQVRFRCBTUFJJVEVTLCBXSElDSCBBUkUgTk9UIFNUT1JFRFxyXG4gICAgLy8gU09SVEVEIE9SIElOIEFOWSBQQVJUSUNVTEFSIE9SREVSLiBOT1RFIFRIQVQgQU5JTUFURUQgU1BSSVRFU1xyXG4gICAgLy8gQVJFIFNDRU5FIE9CSkVDVFNcclxuICAgIHByaXZhdGUgYW5pbWF0ZWRTcHJpdGVzIDogQXJyYXk8QW5pbWF0ZWRTcHJpdGU+O1xyXG5cclxuICAgIC8vIFNFVCBPRiBWSVNJQkxFIE9CSkVDVFMsIE5PVEUgVEhBVCBBVCBUSEUgTU9NRU5UIE9VUlxyXG4gICAgLy8gU0NFTkUgR1JBUEggSVMgUVVJVEUgU0lNUExFLCBTTyBUSElTIElTIFRIRSBTQU1FIEFTXHJcbiAgICAvLyBPVVIgTElTVCBPRiBBTklNQVRFRCBTUFJJVEVTXHJcbiAgICBwcml2YXRlIHZpc2libGVTZXQgOiBBcnJheTxTY2VuZU9iamVjdD47XHJcblxyXG4gICAgLy8gV0UgQVJFIEFMU08gVVNJTkcgQSBUSUxJTkcgRU5HSU5FIEZPUiBSRU5ERVJJTkcgT1VSIExFVkVMXHJcbiAgICAvLyBOT1RFIFRIQVQgV0UgTUFOQUdFIFRISVMgSEVSRSBCRUNBVVNFIFdFIE1BWSBJTlZPTFZFIFRIRSBUSUxFRFxyXG4gICAgLy8gTEFZRVJTIElOIFBIWVNJQ1MgQU5EIFBBVEhGSU5ESU5HIEFTIFdFTExcclxuICAgIHByaXZhdGUgdGlsZWRMYXllcnMgOiBBcnJheTxUaWxlZExheWVyPjtcclxuICAgIHByaXZhdGUgdGlsZVNldHMgOiBBcnJheTxUaWxlU2V0PjtcclxuXHJcbiAgICAvLyBUSEUgVklFV1BPUlQgSVMgVVNFRCBUTyBGSUxURVIgT1VUIFdIQVQgSVMgTk9UIFZJU0lCTEVcclxuICAgIHByaXZhdGUgdmlld3BvcnQgOiBWaWV3cG9ydDtcclxuXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgLy8gREVGQVVMVCBDT05TVFJVQ1RPUiBJTklUSUFMSVpFUyBPVVIgREFUQSBTVFJVQ1RVUkVTXHJcbiAgICAgICAgdGhpcy5jbGVhcigpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjbGVhcigpIDogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5hbmltYXRlZFNwcml0ZXMgPSBbXTtcclxuICAgICAgICB0aGlzLnZpc2libGVTZXQgPSBbXTtcclxuICAgICAgICB0aGlzLnRpbGVkTGF5ZXJzID0gW107XHJcbiAgICAgICAgdGhpcy50aWxlU2V0cyA9IFtdO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhZGRUaWxlU2V0KHRpbGVTZXRUb0FkZCA6IFRpbGVTZXQpIDogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy50aWxlU2V0cy5wdXNoKHRpbGVTZXRUb0FkZCkgLSAxO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXROdW1UaWxlU2V0cygpIDogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy50aWxlU2V0cy5sZW5ndGg7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldFRpbGVTZXQoaW5kZXggOiBudW1iZXIpIDogVGlsZVNldCB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudGlsZVNldHNbaW5kZXhdO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhZGRMYXllcihsYXllclRvQWRkIDogVGlsZWRMYXllcikgOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnRpbGVkTGF5ZXJzLnB1c2gobGF5ZXJUb0FkZCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldE51bVRpbGVkTGF5ZXJzKCkgOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnRpbGVkTGF5ZXJzLmxlbmd0aDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0VGlsZWRMYXllcnMoKSA6IEFycmF5PFRpbGVkTGF5ZXI+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy50aWxlZExheWVycztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0VGlsZWRMYXllcihsYXllckluZGV4IDogbnVtYmVyKSA6IFRpbGVkTGF5ZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnRpbGVkTGF5ZXJzW2xheWVySW5kZXhdO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXROdW1TcHJpdGVzKCkgOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFuaW1hdGVkU3ByaXRlcy5sZW5ndGg7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldFZpZXdwb3J0KGluaXRWaWV3cG9ydCA6IFZpZXdwb3J0KSA6IHZvaWQge1xyXG4gICAgICAgIHRoaXMudmlld3BvcnQgPSBpbml0Vmlld3BvcnQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldFZpZXdwb3J0KCkgOiBWaWV3cG9ydCB7IFxyXG4gICAgICAgIHJldHVybiB0aGlzLnZpZXdwb3J0O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhZGRBbmltYXRlZFNwcml0ZShzcHJpdGUgOiBBbmltYXRlZFNwcml0ZSkgOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmFuaW1hdGVkU3ByaXRlcy5wdXNoKHNwcml0ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldFNwcml0ZUF0KHRlc3RYIDogbnVtYmVyLCB0ZXN0WSA6IG51bWJlcikgOiBBbmltYXRlZFNwcml0ZSB7XHJcbiAgICAgICAgZm9yIChsZXQgc3ByaXRlIG9mIHRoaXMuYW5pbWF0ZWRTcHJpdGVzKSB7XHJcbiAgICAgICAgICAgIGlmIChzcHJpdGUuY29udGFpbnModGVzdFgsIHRlc3RZKSlcclxuICAgICAgICAgICAgICAgIHJldHVybiBzcHJpdGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogdXBkYXRlXHJcbiAgICAgKiBcclxuICAgICAqIENhbGxlZCBvbmNlIHBlciBmcmFtZSwgdGhpcyBmdW5jdGlvbiB1cGRhdGVzIHRoZSBzdGF0ZSBvZiBhbGwgdGhlIG9iamVjdHNcclxuICAgICAqIGluIHRoZSBzY2VuZS5cclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIGRlbHRhIFRoZSB0aW1lIHRoYXQgaGFzIHBhc3NlZCBzaW5jZSB0aGUgbGFzdCB0aW1lIHRoaXMgdXBkYXRlXHJcbiAgICAgKiBmdW5jYXRpb24gd2FzIGNhbGxlZC5cclxuICAgICAqL1xyXG4gICAgcHVibGljIHVwZGF0ZShkZWx0YSA6IG51bWJlcikgOiB2b2lkIHtcclxuICAgICAgICBmb3IgKGxldCBzcHJpdGUgb2YgdGhpcy5hbmltYXRlZFNwcml0ZXMpIHtcclxuICAgICAgICAgICAgc3ByaXRlLnVwZGF0ZShkZWx0YSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZihzcHJpdGUuZ2V0VHlwZSgpID09IFwiREVOS0lNVVNISTJcIikge1xyXG4gICAgICAgICAgICAgICAgc3ByaXRlLmRlbmtpbXVzaGlBSSgpO1xyXG4gICAgICAgICAgICB9ZWxzZSBpZihzcHJpdGUuZ2V0VHlwZSgpID09IFwiTEFEWUJVR1wiKSB7XHJcbiAgICAgICAgICAgICAgICBzcHJpdGUubGFkeWJ1Z0FJKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNjb3BlKCkgOiBBcnJheTxTY2VuZU9iamVjdD4ge1xyXG4gICAgICAgIC8vIENMRUFSIE9VVCBUSEUgT0xEXHJcbiAgICAgICAgdGhpcy52aXNpYmxlU2V0ID0gW107XHJcblxyXG4gICAgICAgIC8vIFBVVCBBTEwgVEhFIFNDRU5FIE9CSkVDVFMgSU5UTyBUSEUgVklTSUJMRSBTRVRcclxuICAgICAgICBmb3IgKGxldCBzcHJpdGUgb2YgdGhpcy5hbmltYXRlZFNwcml0ZXMpIHtcclxuICAgICAgICAgICAgdGhpcy52aXNpYmxlU2V0LnB1c2goc3ByaXRlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLnZpc2libGVTZXQ7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQge1ZlY3RvcjN9IGZyb20gJy4uL21hdGgvVmVjdG9yMydcclxuXHJcbi8qKlxyXG4gKiBTY2VuZU9iamVjdFxyXG4gKiBcclxuICogQSBTY2VuZU9iamVjdCBpcyBzb21ldGhpbmcgdGhhdCBjYW4gYmUgcGxhY2VkIGludG8gdGhlIHNjZW5lIGdyYXBoLiBJdCBoYXNcclxuICogYSBwb3NpdGlvbiwgcm90YXRpb24sIGFuZCBzY2FsZSBpbiB0aGUgZ2FtZSB3b3JsZC4gTm90ZSB0aGF0IGl0cyBwb3NpdGlvblxyXG4gKiBpcyB0eXBpY2FsbHkgaXRzIGNlbnRlcmVkIGxvY2F0aW9uLCBzbyBpZiB3ZSdyZSB0YWxraW5nIGFib3V0IGEgMmQgYm94LCBcclxuICogaXQgd291bGQgYmUgdGhlIGNlbnRlciBvZiB0aGF0IGJveC5cclxuICovXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBTY2VuZU9iamVjdCB7XHJcbiAgICBwcml2YXRlIHBvc2l0aW9uIDogVmVjdG9yMztcclxuICAgIHByaXZhdGUgcm90YXRpb24gOiBWZWN0b3IzO1xyXG4gICAgcHJpdmF0ZSBzY2FsZSA6IFZlY3RvcjM7XHJcblxyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMucG9zaXRpb24gPSBuZXcgVmVjdG9yMygpO1xyXG4gICAgICAgIHRoaXMucm90YXRpb24gPSBuZXcgVmVjdG9yMygpO1xyXG4gICAgICAgIHRoaXMuc2NhbGUgPSBuZXcgVmVjdG9yMygpO1xyXG5cclxuICAgICAgICAvLyBDTEVBUiBBTEwgVkFMVUVTXHJcbiAgICAgICAgdGhpcy5wb3NpdGlvbi5zZXQoMC4wLCAwLjAsIDAuMCwgMS4wKTtcclxuICAgICAgICB0aGlzLnJvdGF0aW9uLnNldCgwLjAsIDAuMCwgMC4wLCAxLjApO1xyXG4gICAgICAgIHRoaXMuc2NhbGUuc2V0KDEuMCwgMS4wLCAxLjAsIDEuMCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldFBvc2l0aW9uKCkgOiBWZWN0b3IzIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5wb3NpdGlvbjtcclxuICAgIH0gICAgXHJcblxyXG4gICAgcHVibGljIGdldFJvdGF0aW9uKCkgOiBWZWN0b3IzIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yb3RhdGlvbjtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0U2NhbGUoKSA6IFZlY3RvcjMge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNjYWxlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhYnN0cmFjdCBjb250YWlucyh0ZXN0WCA6IG51bWJlciwgdGVzdFkgOiBudW1iZXIpIDogYm9vbGVhbjtcclxufSIsImV4cG9ydCBjbGFzcyBWaWV3cG9ydCB7XHJcbiAgICBwcml2YXRlIHdpZHRoIDogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBoZWlnaHQgOiBudW1iZXI7XHJcbiAgICBwcml2YXRlIHggOiBudW1iZXI7XHJcbiAgICBwcml2YXRlIHkgOiBudW1iZXI7XHJcblxyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKGluaXRXaWR0aCA6IG51bWJlciwgaW5pdEhlaWdodCA6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMud2lkdGggPSBpbml0V2lkdGg7XHJcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBpbml0SGVpZ2h0O1xyXG4gICAgICAgIHRoaXMueCA9IDA7XHJcbiAgICAgICAgdGhpcy55ID0gMDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0V2lkdGgoKSA6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMud2lkdGg7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldEhlaWdodCgpIDogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5oZWlnaHQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldFgoKSA6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMueDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0WSgpIDogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy55O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBpbmMoaW5jWCA6IG51bWJlciwgaW5jWSA6IG51bWJlcikgOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnggKz0gaW5jWDtcclxuICAgICAgICB0aGlzLnkgKz0gaW5jWTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0UG9zaXRpb24oaW5pdFggOiBudW1iZXIsIGluaXRZIDogbnVtYmVyKSA6IHZvaWQge1xyXG4gICAgICAgIHRoaXMueCA9IGluaXRYO1xyXG4gICAgICAgIHRoaXMueSA9IGluaXRZO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHtTY2VuZU9iamVjdH0gZnJvbSAnLi4vU2NlbmVPYmplY3QnXHJcbmltcG9ydCB7QW5pbWF0ZWRTcHJpdGVUeXBlfSBmcm9tICcuL0FuaW1hdGVkU3ByaXRlVHlwZSdcclxuaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gJy4uLy4uL21hdGgvVmVjdG9yMyc7XHJcblxyXG5leHBvcnQgY2xhc3MgQW5pbWF0ZWRTcHJpdGUgZXh0ZW5kcyBTY2VuZU9iamVjdCB7XHJcbiAgICBwcml2YXRlIHNwcml0ZVR5cGUgOiBBbmltYXRlZFNwcml0ZVR5cGU7XHJcbiAgICBwcml2YXRlIHR5cGUgOiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIHN0YXRlIDogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSBhbmltYXRpb25GcmFtZUluZGV4IDogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBmcmFtZUNvdW50ZXIgOiBudW1iZXI7XHJcblxyXG4gICAgcHJpdmF0ZSBtb3ZldGltZSA6IG51bWJlciA9IDA7XHJcbiAgICBwcml2YXRlIHJhbmRvbUludGVydmFsIDogbnVtYmVyID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogNjApO1xyXG4gICAgcHJpdmF0ZSBkaXJlY3Rpb24gOiBudW1iZXI7XHJcbiAgICBwcml2YXRlIGluaXRQb3NpdGlvbiA6IG51bWJlcjtcclxuICAgIHByaXZhdGUgbmV3UG9zaXRpb24gOiBudW1iZXI7XHJcbiAgICBcclxuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcihpbml0U3ByaXRlVHlwZSA6IEFuaW1hdGVkU3ByaXRlVHlwZSwgaW5pdFN0YXRlIDogc3RyaW5nLCB0eXBlIDogc3RyaW5nKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLnNwcml0ZVR5cGUgPSBpbml0U3ByaXRlVHlwZTtcclxuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFNUQVJUIFJFU0VUXHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IGluaXRTdGF0ZTtcclxuICAgICAgICB0aGlzLmFuaW1hdGlvbkZyYW1lSW5kZXggPSAwO1xyXG4gICAgICAgIHRoaXMuZnJhbWVDb3VudGVyID0gMDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0QW5pbWF0aW9uRnJhbWVJbmRleCgpIDogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5hbmltYXRpb25GcmFtZUluZGV4O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRGcmFtZUNvdW50ZXIoKSA6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZnJhbWVDb3VudGVyO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRTcHJpdGVUeXBlKCkgOiBBbmltYXRlZFNwcml0ZVR5cGUge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNwcml0ZVR5cGU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldFR5cGUoKSA6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudHlwZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0RGlyZWN0aW9uKCkgOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRpcmVjdGlvbjtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0U3RhdGUoKSA6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGU7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHB1YmxpYyBzZXRTdGF0ZShpbml0U3RhdGUgOiBzdHJpbmcpIDogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IGluaXRTdGF0ZTtcclxuICAgICAgICB0aGlzLmFuaW1hdGlvbkZyYW1lSW5kZXggPSAwO1xyXG4gICAgICAgIHRoaXMuZnJhbWVDb3VudGVyID0gMDtcclxuICAgIH1cclxuICAgIFxyXG4gICAgcHVibGljIHVwZGF0ZShkZWx0YSA6IG51bWJlcikgOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmZyYW1lQ291bnRlcisrO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIEhBVkUgV0UgR09ORSBQQVNUIFRIRSBMQVNUIEZSQU1FIElOIFRIRSBBTklNQVRJT04/XHJcbiAgICAgICAgdmFyIGN1cnJlbnRBbmltYXRpb24gPSB0aGlzLnNwcml0ZVR5cGUuZ2V0QW5pbWF0aW9uKHRoaXMuc3RhdGUpO1xyXG4gICAgICAgIHZhciBjdXJyZW50RnJhbWUgPSBjdXJyZW50QW5pbWF0aW9uW3RoaXMuYW5pbWF0aW9uRnJhbWVJbmRleF07XHJcbiAgICAgICAgaWYgKHRoaXMuZnJhbWVDb3VudGVyID4gKGN1cnJlbnRGcmFtZS5kdXJhdGlvbikpIHtcclxuICAgICAgICAgICAgdGhpcy5hbmltYXRpb25GcmFtZUluZGV4Kys7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmFuaW1hdGlvbkZyYW1lSW5kZXggPj0gY3VycmVudEFuaW1hdGlvbi5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uRnJhbWVJbmRleCA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5mcmFtZUNvdW50ZXIgPSAwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZGVua2ltdXNoaUFJKCkgOiB2b2lkIHtcclxuICAgICAgICBsZXQgU1BFRUQgOiBudW1iZXIgPSAxMDtcclxuICAgICAgICB0aGlzLm1vdmV0aW1lKys7XHJcblxyXG4gICAgICAgIGlmKHRoaXMubW92ZXRpbWUgPiB0aGlzLnJhbmRvbUludGVydmFsKSB7XHJcbiAgICAgICAgICAgIHRoaXMubW92ZXRpbWUgPSAwO1xyXG4gICAgICAgICAgICB0aGlzLnJhbmRvbUludGVydmFsID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMjApO1xyXG4gICAgICAgICAgICB0aGlzLmRpcmVjdGlvbiA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gU3RheSBTdGlsbFxyXG4gICAgICAgIGlmKHRoaXMuZGlyZWN0aW9uID09IDApIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZShcIklETEVcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIE1vdmUgVXBcclxuICAgICAgICBlbHNlIGlmKHRoaXMuZGlyZWN0aW9uID09IDEgJiYgdGhpcy5nZXRQb3NpdGlvbigpLmdldFkoKSA+IDApIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZShcIldBTEtcIik7XHJcbiAgICAgICAgICAgIHRoaXMuZ2V0UG9zaXRpb24oKS5zZXQodGhpcy5nZXRQb3NpdGlvbigpLmdldFgoKSwgdGhpcy5nZXRQb3NpdGlvbigpLmdldFkoKSAtIFNQRUVELCAwLCAxKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gTW92ZSBSaWdodFxyXG4gICAgICAgIGVsc2UgaWYodGhpcy5kaXJlY3Rpb24gPT0gMiAmJiB0aGlzLmdldFBvc2l0aW9uKCkuZ2V0WCgpICsgdGhpcy5nZXRTcHJpdGVUeXBlKCkuZ2V0U3ByaXRlV2lkdGgoKSA8IDMyMDApIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZShcIldBTEtcIik7XHJcbiAgICAgICAgICAgIHRoaXMuZ2V0UG9zaXRpb24oKS5zZXQodGhpcy5nZXRQb3NpdGlvbigpLmdldFgoKSArIFNQRUVELCB0aGlzLmdldFBvc2l0aW9uKCkuZ2V0WSgpLCAwLCAxKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gTW92ZSBEb3duXHJcbiAgICAgICAgZWxzZSBpZih0aGlzLmRpcmVjdGlvbiA9PSAzICYmIHRoaXMuZ2V0UG9zaXRpb24oKS5nZXRZKCkgKyB0aGlzLmdldFNwcml0ZVR5cGUoKS5nZXRTcHJpdGVIZWlnaHQoKSA8IDMyMDApIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZShcIldBTEtcIik7XHJcbiAgICAgICAgICAgIHRoaXMuZ2V0UG9zaXRpb24oKS5zZXQodGhpcy5nZXRQb3NpdGlvbigpLmdldFgoKSwgdGhpcy5nZXRQb3NpdGlvbigpLmdldFkoKSArIFNQRUVELCAwLCAxKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gTW92ZSBMZWZ0XHJcbiAgICAgICAgZWxzZSBpZih0aGlzLmRpcmVjdGlvbiA9PSA0ICYmIHRoaXMuZ2V0UG9zaXRpb24oKS5nZXRYKCkgPiAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoXCJXQUxLXCIpO1xyXG4gICAgICAgICAgICB0aGlzLmdldFBvc2l0aW9uKCkuc2V0KHRoaXMuZ2V0UG9zaXRpb24oKS5nZXRYKCkgLSBTUEVFRCwgdGhpcy5nZXRQb3NpdGlvbigpLmdldFkoKSwgMCwgMSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBsYWR5YnVnQUkoKSA6IHZvaWQge1xyXG4gICAgICAgIGxldCBTUEVFRCA6IG51bWJlciA9IDEwO1xyXG4gICAgICAgIHRoaXMubW92ZXRpbWUrKztcclxuXHJcbiAgICAgICAgaWYodGhpcy5kaXJlY3Rpb24gPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLmRpcmVjdGlvbiA9IE1hdGgucmFuZG9tKCkgPD0gMC41ID8gLTEgOiAxO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYodGhpcy5tb3ZldGltZSA+IHRoaXMucmFuZG9tSW50ZXJ2YWwpIHtcclxuICAgICAgICAgICAgdGhpcy5tb3ZldGltZSA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMuZGlyZWN0aW9uID0gdGhpcy5kaXJlY3Rpb24gKiAtMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFN0YXkgU3RpbGxcclxuICAgICAgICBpZih0aGlzLmRpcmVjdGlvbiA9PSAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoXCJJRExFXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBNb3ZlIFJpZ2h0XHJcbiAgICAgICAgZWxzZSBpZih0aGlzLmRpcmVjdGlvbiA9PSAxICYmIHRoaXMuZ2V0UG9zaXRpb24oKS5nZXRYKCkgKyB0aGlzLmdldFNwcml0ZVR5cGUoKS5nZXRTcHJpdGVXaWR0aCgpIDwgMzIwMCkge1xyXG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKFwiV0FMS0lOR1wiKTtcclxuICAgICAgICAgICAgdGhpcy5nZXRQb3NpdGlvbigpLnNldCh0aGlzLmdldFBvc2l0aW9uKCkuZ2V0WCgpICsgU1BFRUQsIHRoaXMuZ2V0UG9zaXRpb24oKS5nZXRZKCksIDAsIDEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBNb3ZlIExlZnRcclxuICAgICAgICBlbHNlIGlmKHRoaXMuZGlyZWN0aW9uID09IC0xICYmIHRoaXMuZ2V0UG9zaXRpb24oKS5nZXRYKCkgPiAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoXCJXQUxLSU5HXCIpO1xyXG4gICAgICAgICAgICB0aGlzLmdldFBvc2l0aW9uKCkuc2V0KHRoaXMuZ2V0UG9zaXRpb24oKS5nZXRYKCkgLSBTUEVFRCwgdGhpcy5nZXRQb3NpdGlvbigpLmdldFkoKSwgMCwgMSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY29udGFpbnMocG9pbnRYIDogbnVtYmVyLCBwb2ludFkgOiBudW1iZXIpIDogYm9vbGVhbiB7XHJcbiAgICAgICAgbGV0IHNwcml0ZVdpZHRoID0gdGhpcy5nZXRTcHJpdGVUeXBlKCkuZ2V0U3ByaXRlV2lkdGgoKTtcclxuICAgICAgICBsZXQgc3ByaXRlSGVpZ2h0ID0gdGhpcy5nZXRTcHJpdGVUeXBlKCkuZ2V0U3ByaXRlSGVpZ2h0KCk7XHJcbiAgICAgICAgbGV0IHNwcml0ZUxlZnQgPSB0aGlzLmdldFBvc2l0aW9uKCkuZ2V0WCgpO1xyXG4gICAgICAgIGxldCBzcHJpdGVSaWdodCA9IHRoaXMuZ2V0UG9zaXRpb24oKS5nZXRYKCkgKyBzcHJpdGVXaWR0aDtcclxuICAgICAgICBsZXQgc3ByaXRlVG9wID0gdGhpcy5nZXRQb3NpdGlvbigpLmdldFkoKTtcclxuICAgICAgICBsZXQgc3ByaXRlQm90dG9tID0gdGhpcy5nZXRQb3NpdGlvbigpLmdldFkoKSArIHNwcml0ZUhlaWdodDtcclxuICAgICAgICBpZiAoICAgIChwb2ludFggPCBzcHJpdGVMZWZ0KVxyXG4gICAgICAgICAgICB8fCAgKHNwcml0ZVJpZ2h0IDwgcG9pbnRYKVxyXG4gICAgICAgICAgICB8fCAgKHBvaW50WSA8IHNwcml0ZVRvcClcclxuICAgICAgICAgICAgfHwgIChzcHJpdGVCb3R0b20gPCBwb2ludFkpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8qKlJFTkFNRSBUSElTIE1FVEhPRCBTTyBJVCBERU5PVEVTIFBJWEVMIExPQ0FUSU9OIElOIFRFWFRVUkUgKi9cclxuICAgIHB1YmxpYyBnZXRMZWZ0KCkgOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNwcml0ZVR5cGUuZ2V0TGVmdCh0aGlzLnN0YXRlLCB0aGlzLmFuaW1hdGlvbkZyYW1lSW5kZXgpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBwdWJsaWMgZ2V0VG9wKCkgOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNwcml0ZVR5cGUuZ2V0VG9wKHRoaXMuc3RhdGUsIHRoaXMuYW5pbWF0aW9uRnJhbWVJbmRleCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHRvU3RyaW5nKCkgOiBzdHJpbmcge1xyXG4gICAgICAgIGxldCBzdW1tYXJ5IDogc3RyaW5nID0gIFwieyBwb3NpdGlvbjogKFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArICAgdGhpcy5nZXRQb3NpdGlvbigpLmdldFgoKSArIFwiLCBcIiArIHRoaXMuZ2V0UG9zaXRpb24oKS5nZXRZKCkgKyBcIikgXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgICBcIihzdGF0ZTogXCIgKyB0aGlzLmdldFN0YXRlKCkgKyBcIikgXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgICBcIihhbmltYXRpb25GcmFtZUluZGV4OiBcIiArIHRoaXMuZ2V0QW5pbWF0aW9uRnJhbWVJbmRleCgpICsgXCIpIFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArICAgXCIoZnJhbWVDb3VudGVyOiBcIiArIHRoaXMuZ2V0RnJhbWVDb3VudGVyKCkgKyBcIikgXCI7XHJcbiAgICAgICAgcmV0dXJuIHN1bW1hcnk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQge1dlYkdMR2FtZVRleHR1cmV9IGZyb20gJy4uLy4uL3JlbmRlcmluZy9XZWJHTEdhbWVUZXh0dXJlJ1xyXG5cclxuZXhwb3J0IGNsYXNzIEFuaW1hdGlvbkZyYW1lIHtcclxuICAgIHB1YmxpYyBsZWZ0IDogbnVtYmVyO1xyXG4gICAgcHVibGljIHRvcCA6IG51bWJlcjtcclxuICAgIHB1YmxpYyBkdXJhdGlvbiA6IG51bWJlcjtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihpbml0TGVmdCA6IG51bWJlciwgaW5pdFRvcCA6IG51bWJlciwgaW5pdER1cmF0aW9uIDogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5sZWZ0ID0gaW5pdExlZnQ7XHJcbiAgICAgICAgdGhpcy50b3AgPSBpbml0VG9wO1xyXG4gICAgICAgIHRoaXMuZHVyYXRpb24gPSBpbml0RHVyYXRpb247XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBBbmltYXRlZFNwcml0ZVR5cGUge1xyXG4gICAgcHJpdmF0ZSBzcHJpdGVTaGVldFRleHR1cmUgOiBXZWJHTEdhbWVUZXh0dXJlO1xyXG4gICAgcHJpdmF0ZSBhbmltYXRpb25zIDogTWFwPHN0cmluZywgQXJyYXk8QW5pbWF0aW9uRnJhbWU+PjtcclxuICAgIHByaXZhdGUgc3ByaXRlV2lkdGggOiBudW1iZXI7XHJcbiAgICBwcml2YXRlIHNwcml0ZUhlaWdodCA6IG51bWJlcjtcclxuXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoaW5pdFNwcml0ZVNoZWV0VGV4dHVyZSA6IFdlYkdMR2FtZVRleHR1cmUsIFxyXG4gICAgICAgICAgICAgICAgaW5pdFNwcml0ZVdpZHRoIDogbnVtYmVyLCBpbml0U3ByaXRlSGVpZ2h0IDogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5zcHJpdGVTaGVldFRleHR1cmUgPSBpbml0U3ByaXRlU2hlZXRUZXh0dXJlO1xyXG4gICAgICAgIHRoaXMuYW5pbWF0aW9ucyA9IG5ldyBNYXAoKTtcclxuICAgICAgICB0aGlzLnNwcml0ZVdpZHRoID0gaW5pdFNwcml0ZVdpZHRoO1xyXG4gICAgICAgIHRoaXMuc3ByaXRlSGVpZ2h0ID0gaW5pdFNwcml0ZUhlaWdodDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYWRkQW5pbWF0aW9uKHN0YXRlIDogc3RyaW5nKSA6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuYW5pbWF0aW9ucy5zZXQoc3RhdGUsIG5ldyBBcnJheTxBbmltYXRpb25GcmFtZT4oKSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFkZEFuaW1hdGlvbkZyYW1lKHN0YXRlIDogc3RyaW5nLCBpbmRleCA6IG51bWJlciwgZnJhbWVEdXJhdGlvbiA6IG51bWJlcikgOiB2b2lkIHtcclxuICAgICAgICB2YXIgY29sdW1ucyA9IHRoaXMuc3ByaXRlU2hlZXRUZXh0dXJlLndpZHRoL3RoaXMuc3ByaXRlV2lkdGg7XHJcbiAgICAgICAgdmFyIHJvd3MgPSB0aGlzLnNwcml0ZVNoZWV0VGV4dHVyZS5oZWlnaHQvdGhpcy5zcHJpdGVIZWlnaHQ7XHJcbiAgICAgICAgdmFyIGNvbCA9IGluZGV4ICUgY29sdW1ucztcclxuICAgICAgICB2YXIgcm93ID0gTWF0aC5mbG9vcihpbmRleCAvICBjb2x1bW5zKTtcclxuICAgICAgICB2YXIgbGVmdCA9IGNvbCAqIHRoaXMuc3ByaXRlV2lkdGg7XHJcbiAgICAgICAgdmFyIHRvcCA9IHJvdyAqIHRoaXMuc3ByaXRlSGVpZ2h0O1xyXG4gICAgICAgIHRoaXMuYW5pbWF0aW9ucy5nZXQoc3RhdGUpLnB1c2gobmV3IEFuaW1hdGlvbkZyYW1lKGxlZnQsIHRvcCwgZnJhbWVEdXJhdGlvbikpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRTcHJpdGVXaWR0aCgpIDogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zcHJpdGVXaWR0aDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0U3ByaXRlSGVpZ2h0KCkgOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNwcml0ZUhlaWdodDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0U3ByaXRlU2hlZXRUZXh0dXJlKCkgOiBXZWJHTEdhbWVUZXh0dXJlIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zcHJpdGVTaGVldFRleHR1cmU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldEFuaW1hdGlvbihzdGF0ZSA6IHN0cmluZykgOiBBcnJheTxBbmltYXRpb25GcmFtZT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFuaW1hdGlvbnMuZ2V0KHN0YXRlKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0TGVmdChzdGF0ZSA6IHN0cmluZywgZnJhbWVJbmRleCA6IG51bWJlcikgOiBudW1iZXIge1xyXG4gICAgICAgIGxldCBhbmltYXRpb25GcmFtZSA6IEFuaW1hdGlvbkZyYW1lID0gdGhpcy5hbmltYXRpb25zLmdldChzdGF0ZSlbZnJhbWVJbmRleF07XHJcbiAgICAgICAgcmV0dXJuIGFuaW1hdGlvbkZyYW1lLmxlZnQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldFRvcChzdGF0ZSA6IHN0cmluZywgZnJhbWVJbmRleCA6IG51bWJlcikgOiBudW1iZXIge1xyXG4gICAgICAgIGxldCBhbmltYXRpb25GcmFtZSA6IEFuaW1hdGlvbkZyYW1lID0gdGhpcy5hbmltYXRpb25zLmdldChzdGF0ZSlbZnJhbWVJbmRleF07XHJcbiAgICAgICAgcmV0dXJuIGFuaW1hdGlvbkZyYW1lLnRvcDtcclxuICAgIH1cclxufSIsImltcG9ydCB7IFdlYkdMR2FtZVRleHR1cmUgfSBmcm9tIFwiLi4vLi4vcmVuZGVyaW5nL1dlYkdMR2FtZVRleHR1cmVcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBUaWxlU2V0IHtcclxuICAgIHByaXZhdGUgbmFtZSA6IHN0cmluZztcclxuICAgIHByaXZhdGUgY29sdW1ucyA6IG51bWJlcjtcclxuICAgIHByaXZhdGUgcm93cyA6IG51bWJlcjtcclxuICAgIHByaXZhdGUgdGlsZVdpZHRoIDogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSB0aWxlSGVpZ2h0IDogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSB0aWxlU3BhY2luZyA6IG51bWJlcjtcclxuICAgIHByaXZhdGUgdGlsZVNoZWV0V2lkdGggOiBudW1iZXI7XHJcbiAgICBwcml2YXRlIHRpbGVTaGVldEhlaWdodCA6IG51bWJlcjtcclxuICAgIHByaXZhdGUgZmlyc3RJbmRleCA6IG51bWJlcjtcclxuICAgIHByaXZhdGUgdGV4dHVyZSA6IFdlYkdMR2FtZVRleHR1cmU7XHJcblxyXG4gICAgY29uc3RydWN0b3IoaW5pdE5hbWUgOiBzdHJpbmcsIFxyXG4gICAgICAgICAgICAgICAgaW5pdENvbHVtbnMgOiBudW1iZXIsXHJcbiAgICAgICAgICAgICAgICBpbml0Um93cyA6IG51bWJlcixcclxuICAgICAgICAgICAgICAgIGluaXRUaWxlV2lkdGggOiBudW1iZXIsXHJcbiAgICAgICAgICAgICAgICBpbml0VGlsZUhlaWdodCA6IG51bWJlcixcclxuICAgICAgICAgICAgICAgIGluaXRUaWxlU3BhY2luZyA6IG51bWJlcixcclxuICAgICAgICAgICAgICAgIGluaXRUaWxlU2hlZXRXaWR0aCA6IG51bWJlcixcclxuICAgICAgICAgICAgICAgIGluaXRUaWxlU2hlZXRIZWlnaHQgOiBudW1iZXIsXHJcbiAgICAgICAgICAgICAgICBpbml0Rmlyc3RJbmRleCA6IG51bWJlcixcclxuICAgICAgICAgICAgICAgIGluaXRUZXh0dXJlIDogV2ViR0xHYW1lVGV4dHVyZSkge1xyXG4gICAgICAgIHRoaXMubmFtZSA9IGluaXROYW1lO1xyXG4gICAgICAgIHRoaXMuY29sdW1ucyA9IGluaXRDb2x1bW5zO1xyXG4gICAgICAgIHRoaXMucm93cyA9IGluaXRSb3dzO1xyXG4gICAgICAgIHRoaXMudGlsZVdpZHRoID0gaW5pdFRpbGVXaWR0aDtcclxuICAgICAgICB0aGlzLnRpbGVIZWlnaHQgPSBpbml0VGlsZUhlaWdodDtcclxuICAgICAgICB0aGlzLnRpbGVTcGFjaW5nID0gaW5pdFRpbGVTcGFjaW5nO1xyXG4gICAgICAgIHRoaXMudGlsZVNoZWV0V2lkdGggPSBpbml0VGlsZVNoZWV0V2lkdGg7XHJcbiAgICAgICAgdGhpcy50aWxlU2hlZXRIZWlnaHQgPSBpbml0VGlsZVNoZWV0SGVpZ2h0O1xyXG4gICAgICAgIHRoaXMuZmlyc3RJbmRleCA9IGluaXRGaXJzdEluZGV4O1xyXG4gICAgICAgIHRoaXMudGV4dHVyZSA9IGluaXRUZXh0dXJlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXROYW1lKCkgOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm5hbWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldENvbHVtbnMoKSA6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29sdW1ucztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0Um93cygpIDogbnVtYmVyIHsgXHJcbiAgICAgICAgcmV0dXJuIHRoaXMucm93cztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0VGlsZVdpZHRoKCkgOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnRpbGVXaWR0aDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0VGlsZUhlaWdodCgpIDogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy50aWxlSGVpZ2h0O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRUaWxlU3BhY2luZygpIDogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy50aWxlU3BhY2luZztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0VGlsZVNoZWV0V2lkdGgoKSA6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudGlsZVNoZWV0V2lkdGg7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldFRpbGVTaGVldEhlaWdodCgpIDogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy50aWxlU2hlZXRIZWlnaHQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldEZpcnN0SW5kZXgoKSA6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZmlyc3RJbmRleDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0VGV4dHVyZSgpIDogV2ViR0xHYW1lVGV4dHVyZSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudGV4dHVyZTtcclxuICAgIH1cclxufSIsImltcG9ydCB7IFRpbGVTZXQgfSBmcm9tIFwiLi9UaWxlU2V0XCI7XHJcblxyXG5leHBvcnQgY2xhc3MgVGlsZWRMYXllciB7XHJcbiAgICBwcml2YXRlIGNvbGxpZGFibGUgOiBib29sZWFuO1xyXG4gICAgcHJpdmF0ZSB0aWxlcyA6IEFycmF5PG51bWJlcj47XHJcbiAgICBwcml2YXRlIGNvbHVtbnMgOiBudW1iZXI7XHJcbiAgICBwcml2YXRlIHJvd3MgOiBudW1iZXI7XHJcbiAgICBwcml2YXRlIHRpbGVTZXQgOiBUaWxlU2V0O1xyXG4gICAgXHJcbiAgICAvLyBXRSBXSUxMIFNUT1JFIFJFTkRFUklORy1TUEVDSUZJQyBEQVRBIEhFUkVcclxuICAgIHByaXZhdGUgcmVuZGVyRGF0YSA6IG9iamVjdDtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihpbml0Q29sdW1ucyA6IG51bWJlcixcclxuICAgICAgICAgICAgICAgIGluaXRSb3dzIDogbnVtYmVyLFxyXG4gICAgICAgICAgICAgICAgaW5pdFRpbGVTZXQgOiBUaWxlU2V0KSB7XHJcbiAgICAgICAgdGhpcy50aWxlcyA9IG5ldyBBcnJheSgpO1xyXG4gICAgICAgIHRoaXMuY29sdW1ucyA9IGluaXRDb2x1bW5zO1xyXG4gICAgICAgIHRoaXMucm93cyA9IGluaXRSb3dzO1xyXG4gICAgICAgIHRoaXMudGlsZVNldCA9IGluaXRUaWxlU2V0O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXRSZW5kZXJEYXRhKGluaXRSZW5kZXJEYXRhIDogb2JqZWN0KSA6IHZvaWQge1xyXG4gICAgICAgIHRoaXMucmVuZGVyRGF0YSA9IGluaXRSZW5kZXJEYXRhO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRSZW5kZXJEYXRhKCkgOiBvYmplY3Qge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJlbmRlckRhdGE7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldE1pbmltdW1WaXNpYmxlQ29sdW1uKHZpZXdwb3J0TGVmdCA6IG51bWJlcikgOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiAodmlld3BvcnRMZWZ0IC8gdGhpcy50aWxlU2V0LmdldFRpbGVXaWR0aCgpKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0TWF4aW11bVZpc2libGVDb2x1bW4odmlld3BvcnRSaWdodCA6IG51bWJlcikgOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiAodmlld3BvcnRSaWdodCAvIHRoaXMudGlsZVNldC5nZXRUaWxlV2lkdGgoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldE1pbmltdW1WaXNpYmxlUm93KHZpZXdwb3J0VG9wIDogbnVtYmVyKSA6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuICh2aWV3cG9ydFRvcCAvIHRoaXMudGlsZVNldC5nZXRUaWxlSGVpZ2h0KCkpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRNYXhpbXVtVmlzaWJsZVJvdyh2aWV3cG9ydEJvdHRvbSA6IG51bWJlcikgOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiAodmlld3BvcnRCb3R0b20gLyB0aGlzLnRpbGVTZXQuZ2V0VGlsZUhlaWdodCgpKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0TnVtQ2VsbHMoKSA6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29sdW1ucyAqIHRoaXMucm93cztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0Q29sdW1ucygpIDogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jb2x1bW5zO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRSb3dzKCkgOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJvd3M7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldFRpbGVTZXQoKSA6IFRpbGVTZXQge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnRpbGVTZXQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGlzQ29sbGlkYWJsZSgpIDogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29sbGlkYWJsZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYWRkVGlsZSh0aWxlU2V0Q2VsbEluZGV4IDogbnVtYmVyKSA6IHZvaWQge1xyXG4gICAgICAgIHRoaXMudGlsZXMucHVzaCh0aWxlU2V0Q2VsbEluZGV4KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0VGlsZShjb2x1bW4gOiBudW1iZXIsIHJvdyA6IG51bWJlciwgdGlsZVNldENlbGxJbmRleCA6IG51bWJlcikge1xyXG4gICAgICAgIGxldCB0aWxlSW5kZXggOiBudW1iZXIgPSB0aGlzLmdldFRpbGVJbmRleChjb2x1bW4sIHJvdyk7XHJcbiAgICAgICAgdGhpcy50aWxlc1t0aWxlSW5kZXhdID0gdGlsZVNldENlbGxJbmRleDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0VGlsZUluZGV4KGNvbHVtbiA6IG51bWJlciwgcm93IDogbnVtYmVyKSA6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIChyb3cgKiB0aGlzLmNvbHVtbnMpICsgY29sdW1uO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRUaWxlU2V0Q2VsbEluZGV4KGNvbHVtbiA6IG51bWJlciwgcm93IDogbnVtYmVyKSA6IG51bWJlciB7XHJcbiAgICAgICAgbGV0IHRpbGVJbmRleCA6IG51bWJlciA9IHRoaXMuZ2V0VGlsZUluZGV4KGNvbHVtbiwgcm93KTtcclxuICAgICAgICByZXR1cm4gdGhpcy50aWxlc1t0aWxlSW5kZXhdO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRUaWxlKGNvbHVtbiA6IG51bWJlciwgcm93IDogbnVtYmVyKSA6IG51bWJlciB7XHJcbiAgICAgICAgbGV0IGluZGV4ID0gdGhpcy5nZXRUaWxlSW5kZXgoY29sdW1uLCByb3cpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnRpbGVzW2luZGV4XTtcclxuICAgIH1cclxufSIsIi8qXHJcbiAqIFRoaXMgcHJvdmlkZXMgcmVzcG9uc2VzIHRvIFVJIGlucHV0LlxyXG4gKi9cclxuaW1wb3J0IHtBbmltYXRlZFNwcml0ZX0gZnJvbSBcIi4uL3NjZW5lL3Nwcml0ZS9BbmltYXRlZFNwcml0ZVwiXHJcbmltcG9ydCB7U2NlbmVHcmFwaH0gZnJvbSBcIi4uL3NjZW5lL1NjZW5lR3JhcGhcIlxyXG5cclxuZXhwb3J0IGNsYXNzIFVJQ29udHJvbGxlciB7XHJcbiAgICBwcml2YXRlIHNwcml0ZVRvRHJhZyA6IEFuaW1hdGVkU3ByaXRlO1xyXG4gICAgcHJpdmF0ZSBzY2VuZSA6IFNjZW5lR3JhcGg7XHJcbiAgICBwcml2YXRlIGRyYWdPZmZzZXRYIDogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBkcmFnT2Zmc2V0WSA6IG51bWJlcjtcclxuXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoY2FudmFzSWQgOiBzdHJpbmcsIGluaXRTY2VuZSA6IFNjZW5lR3JhcGgpIHtcclxuICAgICAgICB0aGlzLnNwcml0ZVRvRHJhZyA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5zY2VuZSA9IGluaXRTY2VuZTtcclxuICAgICAgICB0aGlzLmRyYWdPZmZzZXRYID0gLTE7XHJcbiAgICAgICAgdGhpcy5kcmFnT2Zmc2V0WSA9IC0xO1xyXG5cclxuICAgICAgICBsZXQgY2FudmFzIDogSFRNTENhbnZhc0VsZW1lbnQgPSA8SFRNTENhbnZhc0VsZW1lbnQ+ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoY2FudmFzSWQpO1xyXG4gICAgICAgIGNhbnZhcy5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIHRoaXMubW91c2VEb3duSGFuZGxlcik7XHJcbiAgICAgICAgY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgdGhpcy5tb3VzZU1vdmVIYW5kbGVyKTtcclxuICAgICAgICBjYW52YXMuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgdGhpcy5tb3VzZVVwSGFuZGxlcik7XHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy5rZXlib2FyZEhhbmRsZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBtb3VzZURvd25IYW5kbGVyID0gKGV2ZW50IDogTW91c2VFdmVudCkgOiB2b2lkID0+IHtcclxuICAgICAgICBsZXQgbW91c2VQcmVzc1ggOiBudW1iZXIgPSBldmVudC5jbGllbnRYO1xyXG4gICAgICAgIGxldCBtb3VzZVByZXNzWSA6IG51bWJlciA9IGV2ZW50LmNsaWVudFk7XHJcbiAgICAgICAgbGV0IHNwcml0ZSA6IEFuaW1hdGVkU3ByaXRlID0gdGhpcy5zY2VuZS5nZXRTcHJpdGVBdChtb3VzZVByZXNzWCwgbW91c2VQcmVzc1kpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwibW91c2VQcmVzc1g6IFwiICsgbW91c2VQcmVzc1gpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwibW91c2VQcmVzc1k6IFwiICsgbW91c2VQcmVzc1kpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwic3ByaXRlOiBcIiArIHNwcml0ZSk7XHJcbiAgICAgICAgaWYgKHNwcml0ZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIC8vIFNUQVJUIERSQUdHSU5HIElUXHJcbiAgICAgICAgICAgIHRoaXMuc3ByaXRlVG9EcmFnID0gc3ByaXRlO1xyXG4gICAgICAgICAgICB0aGlzLmRyYWdPZmZzZXRYID0gc3ByaXRlLmdldFBvc2l0aW9uKCkuZ2V0WCgpIC0gbW91c2VQcmVzc1g7XHJcbiAgICAgICAgICAgIHRoaXMuZHJhZ09mZnNldFkgPSBzcHJpdGUuZ2V0UG9zaXRpb24oKS5nZXRZKCkgLSBtb3VzZVByZXNzWTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHB1YmxpYyBtb3VzZU1vdmVIYW5kbGVyID0gKGV2ZW50IDogTW91c2VFdmVudCkgOiB2b2lkID0+IHtcclxuICAgICAgICBpZiAodGhpcy5zcHJpdGVUb0RyYWcgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLnNwcml0ZVRvRHJhZy5nZXRQb3NpdGlvbigpLnNldChldmVudC5jbGllbnRYICsgdGhpcy5kcmFnT2Zmc2V0WCwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LmNsaWVudFkgKyB0aGlzLmRyYWdPZmZzZXRZLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zcHJpdGVUb0RyYWcuZ2V0UG9zaXRpb24oKS5nZXRaKCksIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNwcml0ZVRvRHJhZy5nZXRQb3NpdGlvbigpLmdldFcoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBtb3VzZVVwSGFuZGxlciA9IChldmVudCA6IE1vdXNlRXZlbnQpIDogdm9pZCA9PiB7XHJcbiAgICAgICAgdGhpcy5zcHJpdGVUb0RyYWcgPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBrZXlib2FyZEhhbmRsZXIgPSAoZXZlbnQgOiBLZXlib2FyZEV2ZW50KSA6IHZvaWQgPT4ge1xyXG4gICAgICAgIGlmKGV2ZW50LmtleSA9PSAndycgJiYgdGhpcy5zY2VuZS5nZXRWaWV3cG9ydCgpLmdldFkoKSA+IDApIHtcclxuICAgICAgICAgICAgdGhpcy5zY2VuZS5nZXRWaWV3cG9ydCgpLmluYygwLCAtMTAwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYoZXZlbnQua2V5ID09ICdhJyAmJiB0aGlzLnNjZW5lLmdldFZpZXdwb3J0KCkuZ2V0WCgpID4gMCkge1xyXG4gICAgICAgICAgICB0aGlzLnNjZW5lLmdldFZpZXdwb3J0KCkuaW5jKC0xMDAsIDApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZihldmVudC5rZXkgPT0gJ3MnKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2NlbmUuZ2V0Vmlld3BvcnQoKS5pbmMoMCwgMTAwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYoZXZlbnQua2V5ID09ICdkJykge1xyXG4gICAgICAgICAgICB0aGlzLnNjZW5lLmdldFZpZXdwb3J0KCkuaW5jKDEwMCwgMCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59Il19"}